/*
Navicat MySQL Data Transfer

Source Server         : 本地数据库
Source Server Version : 50640
Source Host           : localhost:3306
Source Database       : mini_blog

Target Server Type    : MYSQL
Target Server Version : 50640
File Encoding         : 65001

Date: 2021-01-20 16:40:01
*/
create database db_simple_blog;
use db_simple_blog;

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for attend_record
-- ----------------------------
DROP TABLE IF EXISTS `attend_record`;
CREATE TABLE `attend_record` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) NOT NULL COMMENT '用户id',
  `dept_id` bigint(20) NOT NULL COMMENT '部门id',
  `start_time` datetime DEFAULT NULL COMMENT '打开开始时间',
  `end_time` datetime DEFAULT NULL COMMENT '打卡结束时间',
  `total` decimal(11,1) DEFAULT NULL COMMENT '工时/小时',
  `status` tinyint(4) DEFAULT '1' COMMENT '状态（1=已打卡;0=未打卡）',
  `create_time` datetime DEFAULT NULL COMMENT '日期',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COMMENT='考勤记录';

-- ----------------------------
-- Records of attend_record
-- ----------------------------
INSERT INTO `attend_record` VALUES ('1', '6', '2', '2019-07-24 09:00:00', '2019-07-24 18:00:00', '8.0', '0', '2019-07-24 09:00:00', null);
INSERT INTO `attend_record` VALUES ('2', '11', '3', '2019-07-24 09:00:00', '2019-07-24 18:00:00', '8.0', '1', '2019-07-24 09:00:00', null);
INSERT INTO `attend_record` VALUES ('3', '12', '7', '2019-07-24 09:00:00', '2019-07-24 18:00:00', '8.0', '1', '2019-07-24 09:00:00', null);
INSERT INTO `attend_record` VALUES ('4', '13', '6', '2019-07-24 09:00:00', '2019-07-24 18:00:00', '8.0', '1', '2019-07-24 09:00:00', null);
INSERT INTO `attend_record` VALUES ('5', '14', '8', '2019-07-20 09:00:00', '2019-07-20 18:00:00', '8.0', '1', '2019-07-20 09:00:00', null);
INSERT INTO `attend_record` VALUES ('6', '15', '7', '2019-07-20 09:00:00', '2019-07-20 18:00:00', '8.0', '1', '2019-07-20 09:00:00', null);
INSERT INTO `attend_record` VALUES ('7', '16', '6', '2019-07-20 09:00:00', '2019-07-20 18:00:00', '8.0', '1', '2019-07-20 09:00:00', null);
INSERT INTO `attend_record` VALUES ('8', '26', '5', '2019-07-20 09:00:00', '2019-07-20 18:00:00', '8.0', '1', '2019-07-20 09:00:00', null);
INSERT INTO `attend_record` VALUES ('9', '22', '4', '2019-07-23 09:00:00', '2019-07-23 18:00:00', '8.0', '1', '2019-07-23 09:00:00', null);
INSERT INTO `attend_record` VALUES ('10', '24', '8', '2019-07-23 09:00:00', '2019-07-23 18:00:00', '8.0', '1', '2019-07-23 09:00:00', null);
INSERT INTO `attend_record` VALUES ('11', '25', '6', '2019-07-23 09:00:00', '2019-07-23 18:00:00', '8.0', '1', '2019-07-23 09:00:00', null);
INSERT INTO `attend_record` VALUES ('12', '6', '7', '2019-07-23 09:00:00', '2019-07-23 18:00:00', '8.0', '1', '2019-07-23 09:00:00', null);
INSERT INTO `attend_record` VALUES ('13', '9', '8', '2019-07-23 09:00:00', '2019-07-23 18:00:00', '8.0', '1', '2019-07-23 09:00:00', null);

-- ----------------------------
-- Table structure for blog
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `content` varchar(5000) NOT NULL COMMENT '内容',
  `user_id` bigint(20) DEFAULT NULL COMMENT '作者',
  `type` int(255) DEFAULT '1' COMMENT '类型(1=自己的;2=转发的)',
  `blog_id` int(11) DEFAULT NULL COMMENT 'type=2时生效，即被转发的微博id',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `is_active` int(11) DEFAULT '1' COMMENT '是否有效(1=是;0=否)',
  `is_delete` int(11) DEFAULT '0' COMMENT '是否删除(1=是;0=否)',
  `delete_time` datetime DEFAULT NULL COMMENT '删除时间',
  `update_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `memo_a` varchar(255) DEFAULT NULL COMMENT '备注字段',
  PRIMARY KEY (`id`),
  KEY `idx` (`create_time`,`is_delete`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=90 DEFAULT CHARSET=utf8mb4 COMMENT='微博';

-- ----------------------------
-- Records of blog
-- ----------------------------
INSERT INTO `blog` VALUES ('20', '不错，不错，辛苦辛苦！！！', '27', '1', null, '2020-02-28 11:12:51', '1', '0', null, '2020-03-02 11:33:24', null);
INSERT INTO `blog` VALUES ('23', '我自狂歌空度日，飞扬跋扈为谁雄！', '6', '1', null, '2020-03-02 09:49:48', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('25', '春天快来了...疫情估计快结束了 yes！！', '38', '1', null, '2020-03-02 15:18:09', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('27', '写的不错！！！', '38', '2', '23', '2020-03-02 15:21:29', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('28', '是时候迎接夏天的到来了', '37', '1', null, '2020-03-02 16:03:06', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('33', '今天过得还行！！！', '39', '1', null, '2020-03-04 20:36:52', '1', '0', null, '2020-03-04 20:43:44', null);
INSERT INTO `blog` VALUES ('35', '我知道日子难过，可这他妈也太难过了吧！！！', '6', '1', null, '2020-12-22 23:32:40', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('36', '天气确实好冷', '6', '2', '31', '2020-12-25 22:45:09', '1', '1', null, '2021-01-20 14:47:18', null);
INSERT INTO `blog` VALUES ('40', '天行健，君子当自强不息；地势坤，君子当厚德载物！', '27', '1', null, '2020-12-27 16:04:27', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('41', '程序员实战基地 fightjava.com  V3.1再次重磅升级上线！', '27', '1', null, '2020-12-28 09:58:54', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('42', '人生当中，成功只是一时的，失败才是主旋律，但是如何面对失败，却把人分成了不同的样子，有的人会被失败击垮，有的人能够不断的爬起来继续向前，我想，真正的成熟应该并不是追求完美，而是直面自己的缺憾，这才是生活的本质！\n\n\n\n', '38', '1', null, '2020-12-28 15:05:15', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('43', 'you have a dream , get for it', '6', '1', null, '2020-12-28 15:15:21', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('44', 'IT人的逗比日常', '38', '1', null, '2020-12-28 15:16:58', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('45', '人活一世，最主要的还是保持心境敞亮！尽人事、知天命，可争取者则争取，不可争取者亦莫要强求！！！', '27', '1', null, '2020-12-28 15:23:27', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('46', '良将用兵，如良医疗病，病万变，药亦万变；不谋全局者、不足谋一域；不谋万世者、不足谋一时', '27', '1', null, '2020-12-28 17:17:49', '1', '0', null, '2020-12-30 11:59:50', null);
INSERT INTO `blog` VALUES ('47', '既往不恋，当下不杂，未来不迎！！！', '6', '1', null, '2020-12-29 09:39:56', '1', '0', null, '2020-12-30 11:59:50', null);
INSERT INTO `blog` VALUES ('51', '2021即将到来，祝各位新年快乐，身体健康！！！', '27', '1', null, '2020-12-30 23:32:27', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('52', '作为一名**者的，如果没有研究过Netty，那么你只能算是一个初级程序员；如果你想知道Nginx是怎么写出来的，如果你想知道Tomcat和Jetty是如何实现的，如果你想实现一个简单的Redis***，那么你就应该好好学习一下Netty，如果你要进阶，想了解***的深层高阶知识，那么Netty绝对是一个必须要过的门槛！\n\n今天要与大家介绍的是我从**一位老友手上得来的关于Netty进阶的速成手册，其内容涵盖了Netty基础+入门+中级+高级+源码架构和行业应用，相比于市面上的一些资料，它可以说是Top级别的Netty案头书！', '6', '1', null, '2020-12-31 12:07:53', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('53', 'Java程序员不在寂寞', '6', '1', null, '2020-12-31 12:09:46', '1', '0', null, '2020-12-31 18:58:52', null);
INSERT INTO `blog` VALUES ('58', '山不在高，有仙则灵；水不在深，有龙则灵，斯是陋室，惟吾德馨！', '27', '1', null, '2021-01-04 10:15:18', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('59', '在《易经》里，会将人分为六个阶段，第一阶段是潜龙勿用，第二阶段是见龙在田，第三阶段是终日乾乾，\n第四阶段是或跃在渊，第五阶段是飞龙在天，第六阶段是亢龙有悔！！！', '6', '1', null, '2021-01-04 10:17:11', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('60', '东临碣石，以观沧海；水何澹澹，山岛竦峙；树木丛生，百草丰茂；秋风萧瑟，洪波涌起', '6', '1', null, '2021-01-04 10:19:31', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('61', '日月之行，若出其中；星汉灿烂，若出其里；幸甚至哉，歌以咏志 - 操作 《短歌行》', '27', '1', null, '2021-01-04 10:23:21', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('62', '君不见，黄河之水天上来，奔流到海不复回；君不见，高堂明镜悲白发，朝如青丝暮成雪；\n人生得意须尽欢，莫使金樽空对月；天生我材必有用，千金散尽还复来 -李白 《将进酒》', '27', '1', null, '2021-01-04 10:29:40', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('63', '烹羊宰牛且为乐，会须一饮三百杯;岑夫子，丹丘生，将进酒，杯莫停;与君歌一曲，请君为我倾耳听\n钟鼓馔玉不足贵，但愿长醉不复醒;古来圣贤皆寂寞，惟有饮者留其名;\n陈王昔时宴平乐，斗酒十千恣欢谑;主人何为言少钱，径须沽取对君酌;五花马，千金裘，呼儿将出换美酒，与尔同销万古愁 -李白 《将进酒》', '6', '1', null, '2021-01-04 10:31:26', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('64', '重要的不是你活了多少年，而是你活出的生命有多少分量。 - Abraham Lincoln亚伯拉罕·林肯', '27', '1', null, '2021-01-05 10:29:34', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('65', '不要努力去做一个成功的人，而应该努力去做一个有价值的人。 - Albert Einstein阿尔伯特·****', '40', '1', null, '2021-01-05 11:42:43', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('66', '始终面向阳光，阴影就会自然地落到你身后。 -  Walt Whitman沃尔特·惠特曼', '40', '1', null, '2021-01-05 11:43:40', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('67', '你的时间有限，所以别浪费生命过别人的生活。 - St*** Jobs史蒂夫·乔布斯', '40', '1', null, '2021-01-05 11:44:08', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('68', '你人生中最重要的两天是你出生的那一天和你明白自己为何出生的那天。 - Mark Twain 马克·吐温', '40', '1', null, '2021-01-05 11:44:44', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('69', '我了解到，人们会忘记你说过的话，忘记你做过的事，但永远不会忘记你给他们的感受。 - Maya Angelou玛雅·安吉罗', '40', '1', null, '2021-01-05 11:45:10', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('70', '记住，无论你觉得自己有多优秀，你也永远没有资格轻视任何人，永远。 - Paul Walker保罗·沃克', '40', '1', null, '2021-01-05 11:45:28', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('71', '每个人都想改变世界，但没有人想到改变自己。 - Lev Tolstoy列夫·托尔斯泰', '40', '1', null, '2021-01-05 11:45:44', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('72', '每当一扇幸福之门关闭，就会有另一扇幸福之门打开，但我们往往长久凝视着关闭的这扇门，而看不到已经打开的那扇门。 - Helen Keller 海伦·凯勒', '40', '1', null, '2021-01-05 11:45:57', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('73', '如果你事事不顺，记住飞机是逆风而不是顺风飞行的。 - Henry Ford亨利·福特', '40', '1', null, '2021-01-05 11:46:14', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('74', '筑造你自己的梦想，不然别人就会雇佣你筑造他们的梦想。 - Farrah Gray法拉·格雷', '40', '1', null, '2021-01-05 11:46:39', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('75', '只有那些敢冒走过头的风险的人才知道自己能走多远。 - Thomas Stearns Eliot托马斯·斯特尔那斯·艾略特', '40', '1', null, '2021-01-05 11:46:54', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('76', '每个孩子都是艺术家。问题在于如何在长大后还能保持艺术家的灵性。 - Pablo Picasso巴勃罗·***', '40', '1', null, '2021-01-05 11:47:12', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('77', '最难的是下决心行动，其余的就是坚持。 - Amelia Earhart阿梅莉亚·埃尔哈特', '40', '1', null, '2021-01-05 11:47:33', '1', '1', null, '2021-01-06 20:50:49', null);
INSERT INTO `blog` VALUES ('78', '不错，不错，不错！很多干货！！！！\n值得我2021年学习一波了！！！！', '40', '2', '41', '2021-01-06 11:53:24', '1', '1', null, '2021-01-06 20:33:05', null);
INSERT INTO `blog` VALUES ('79', '别拿自己的人生和他人做比较，你根本不清楚他们的人生是怎么一回事！！！', '6', '1', null, '2021-01-06 15:09:51', '1', '0', null, '2021-01-06 20:32:56', null);
INSERT INTO `blog` VALUES ('81', '人的一生中必须具有超常的自我管控能力，要避免自**扰和自我消耗；', '41', '1', null, '2021-01-11 15:14:47', '1', '0', null, '2021-01-11 15:18:00', null);
INSERT INTO `blog` VALUES ('82', '今天天气很不错！！！', '43', '1', null, '2021-01-14 16:03:01', '1', '0', null, null, null);
INSERT INTO `blog` VALUES ('83', '赞同！！！', '43', '2', '81', '2021-01-18 10:57:46', '1', '0', null, '2021-01-20 15:34:28', null);
INSERT INTO `blog` VALUES ('84', '确实不错！', '6', '2', '82', '2021-01-18 22:22:13', '1', '1', null, '2021-01-20 14:46:40', null);
INSERT INTO `blog` VALUES ('85', '确实不错', '27', '2', '82', '2021-01-18 22:59:15', '1', '1', null, '2021-01-20 11:50:33', null);
INSERT INTO `blog` VALUES ('88', '微服务与 DDD 的架构设计思路\n领域驱动设计很好的遵循了“关注点分离”（Separation of concerns，SOC）的原则，提出了更成熟、清晰的分层架构。正因如此，DDD思维模式，可以帮助我们更好划分微服务。\n', '27', '1', null, '2021-01-19 18:00:23', '1', '0', null, '2021-01-20 15:34:28', null);

-- ----------------------------
-- Table structure for blog_image
-- ----------------------------
DROP TABLE IF EXISTS `blog_image`;
CREATE TABLE `blog_image` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `blog_id` int(11) DEFAULT NULL COMMENT '微博id',
  `name` varchar(100) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '图片名称',
  `size` varchar(255) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '图片大小',
  `suffix` varchar(50) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '图片后缀名',
  `file_url` varchar(500) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '图片访问的磁盘目录',
  `is_active` tinyint(4) DEFAULT '1' COMMENT '是否有效(1=是;0=否)',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=167 DEFAULT CHARSET=utf8 COMMENT='微博的图片库';

-- ----------------------------
-- Records of blog_image
-- ----------------------------
INSERT INTO `blog_image` VALUES ('1', '1', '图片1', '1', '.jpg', '20191226/2/34193209178200.jpg', '1', '2020-02-09 23:40:09');
INSERT INTO `blog_image` VALUES ('2', '1', '图片2', '1', '.jpg', 'img2.jpg', '1', '2020-02-09 23:40:09');
INSERT INTO `blog_image` VALUES ('6', '6', '3 (2).jpg', '108160', '.jpg', '20200210\\user\\409984788015500.jpg', '1', '2020-02-10 15:03:17');
INSERT INTO `blog_image` VALUES ('7', '6', 'haizei-1.jpg', '34969', '.jpg', '20200210\\user\\409994318995500.jpg', '1', '2020-02-10 15:03:26');
INSERT INTO `blog_image` VALUES ('9', '11', '6.jpg', '190014', '.jpg', '20200211\\blog\\485990760520200.jpg', '1', '2020-02-11 12:10:04');
INSERT INTO `blog_image` VALUES ('57', '17', '金马伦高地.jpg', '783800', '.jpg', '20200228/blog/836517667666600.jpg', '1', '2020-02-28 01:14:20');
INSERT INTO `blog_image` VALUES ('58', '18', 'ece8c6fae0012978195c0ff364bc4c81.jpg', '1127306', '.jpg', '20200228/blog/837222218364100.jpg', '1', '2020-02-28 01:26:03');
INSERT INTO `blog_image` VALUES ('59', '18', '金马伦高地.jfif', '596770', '.jfif', '20200228/blog/837224952413700.jfif', '1', '2020-02-28 01:26:06');
INSERT INTO `blog_image` VALUES ('60', '18', '金马伦高地.jpg', '783800', '.jpg', '20200228/blog/837227316742100.jpg', '1', '2020-02-28 01:26:08');
INSERT INTO `blog_image` VALUES ('61', '18', 'QQ图片20200126204930.jpg', '1368244', '.jpg', '20200228/blog/837230735815500.jpg', '1', '2020-02-28 01:26:12');
INSERT INTO `blog_image` VALUES ('62', '18', 'ece8c6fae0012978195c0ff364bc4c81.jpg', '1127306', '.jpg', '20200228/blog/837234302014300.jpg', '1', '2020-02-28 01:26:15');
INSERT INTO `blog_image` VALUES ('63', '18', '闪电蓝色天空.jpg', '535962', '.jpg', '20200228/blog/837236931317400.jpg', '1', '2020-02-28 01:26:18');
INSERT INTO `blog_image` VALUES ('64', '18', 'ece8c6fae0012978195c0ff364bc4c81.jpg', '1127306', '.jpg', '20200228/blog/837239989384600.jpg', '1', '2020-02-28 01:26:21');
INSERT INTO `blog_image` VALUES ('65', '18', 'QQ图片20200126204930.jpg', '1368244', '.jpg', '20200228/blog/837242553967600.jpg', '1', '2020-02-28 01:26:23');
INSERT INTO `blog_image` VALUES ('66', '18', '金马伦高地.jfif', '596770', '.jfif', '20200228/blog/837245141847500.jfif', '1', '2020-02-28 01:26:26');
INSERT INTO `blog_image` VALUES ('67', '19', 'timg (20).jpg', '46584', '.jpg', '20200228/blog/80976962780000.jpg', '1', '2020-02-28 11:06:18');
INSERT INTO `blog_image` VALUES ('68', '19', 'hacker-2.jpg', '98470', '.jpg', '20200228/blog/80987758615500.jpg', '1', '2020-02-28 11:06:29');
INSERT INTO `blog_image` VALUES ('69', '20', '6 (2).jpg', '43164', '.jpg', '20200228/blog/81331211133400.jpg', '1', '2020-02-28 11:12:12');
INSERT INTO `blog_image` VALUES ('70', '20', '6.jpg', '190014', '.jpg', '20200228/blog/81334961919200.jpg', '1', '2020-02-28 11:12:16');
INSERT INTO `blog_image` VALUES ('71', '20', 'github2.jpg', '41980', '.jpg', '20200228/blog/81337930820900.jpg', '1', '2020-02-28 11:12:19');
INSERT INTO `blog_image` VALUES ('72', '20', 'haizei-8.jpg', '381970', '.jpg', '20200228/blog/81341306561800.jpg', '1', '2020-02-28 11:12:23');
INSERT INTO `blog_image` VALUES ('73', '20', 'haizei-7.jpg', '36735', '.jpg', '20200228/blog/81344539755900.jpg', '1', '2020-02-28 11:12:26');
INSERT INTO `blog_image` VALUES ('74', '20', 'timg (7).jpg', '65006', '.jpg', '20200228/blog/81347968197400.jpg', '1', '2020-02-28 11:12:29');
INSERT INTO `blog_image` VALUES ('75', '20', 'test.jpg', '488438', '.jpg', '20200228/blog/81352256022900.jpg', '1', '2020-02-28 11:12:33');
INSERT INTO `blog_image` VALUES ('76', '20', '清新-5.jpg', '450035', '.jpg', '20200228/blog/81355837132800.jpg', '1', '2020-02-28 11:12:37');
INSERT INTO `blog_image` VALUES ('77', '20', 'timg (22).jpg', '34035', '.jpg', '20200228/blog/81361488639800.jpg', '1', '2020-02-28 11:12:43');
INSERT INTO `blog_image` VALUES ('78', '23', '5 (2).jpg', '46193', '.jpg', '20200302/blog/335574727292600.jpg', '1', '2020-03-02 09:49:35');
INSERT INTO `blog_image` VALUES ('79', '23', 'timg (23).jpg', '15935', '.jpg', '20200302/blog/335581333361000.jpg', '1', '2020-03-02 09:49:41');
INSERT INTO `blog_image` VALUES ('80', '25', '7.jpg', '1020228', '.jpg', '20200302/blog/355269985984400.jpg', '1', '2020-03-02 15:17:50');
INSERT INTO `blog_image` VALUES ('81', '25', '10.jpg', '447448', '.jpg', '20200302/blog/355273444243100.jpg', '1', '2020-03-02 15:17:54');
INSERT INTO `blog_image` VALUES ('82', '25', 'desktop.jpg', '190313', '.jpg', '20200302/blog/355277720243500.jpg', '1', '2020-03-02 15:17:58');
INSERT INTO `blog_image` VALUES ('83', '28', '20141022033015686.jpg', '12871', '.jpg', '20200302/blog/357975314320200.jpg', '1', '2020-03-02 16:02:56');
INSERT INTO `blog_image` VALUES ('84', '28', '20141022033024435.jpg', '5511', '.jpg', '20200302/blog/357978019521100.jpg', '1', '2020-03-02 16:02:58');
INSERT INTO `blog_image` VALUES ('85', '28', '5.jpg', '4190255', '.jpg', '20200302/blog/357983116920900.jpg', '1', '2020-03-02 16:03:04');
INSERT INTO `blog_image` VALUES ('86', '30', 'haizei-4.jpg', '29049', '.jpg', '20200304/blog/510046103018100.jpg', '1', '2020-03-04 10:17:23');
INSERT INTO `blog_image` VALUES ('87', '30', 'haizei-6.jpg', '153642', '.jpg', '20200304/blog/510051126699000.jpg', '1', '2020-03-04 10:17:28');
INSERT INTO `blog_image` VALUES ('88', '31', '1.jpg', '402513', '.jpg', '20200304/blog/510087023160500.jpg', '1', '2020-03-04 10:18:04');
INSERT INTO `blog_image` VALUES ('89', '31', '2.jpg', '403204', '.jpg', '20200304/blog/510089695861000.jpg', '1', '2020-03-04 10:18:07');
INSERT INTO `blog_image` VALUES ('90', '31', '3.jpg', '277393', '.jpg', '20200304/blog/510092384408500.jpg', '1', '2020-03-04 10:18:09');
INSERT INTO `blog_image` VALUES ('91', '33', '4.jpeg', '215124', '.jpeg', '20200304/blog/547191783223300.jpeg', '1', '2020-03-04 20:36:29');
INSERT INTO `blog_image` VALUES ('92', '33', '5.jpg', '4190255', '.jpg', '20200304/blog/547195474698600.jpg', '1', '2020-03-04 20:36:33');
INSERT INTO `blog_image` VALUES ('93', '33', '6.jpg', '190014', '.jpg', '20200304/blog/547198791734800.jpg', '1', '2020-03-04 20:36:36');
INSERT INTO `blog_image` VALUES ('94', '35', '397939764406200.jpg', '4108', '.jpg', '20201222/blog/869163478624500.jpg', '1', '2020-12-22 23:32:29');
INSERT INTO `blog_image` VALUES ('95', '35', '485730263055500.jfif', '71763', '.jfif', '20201222/blog/869170673970600.jfif', '1', '2020-12-22 23:32:36');
INSERT INTO `blog_image` VALUES ('96', '40', '485730263055500.jfif', '71763', '.jfif', '20201227/blog/1274282203796300.jfif', '1', '2020-12-27 16:04:16');
INSERT INTO `blog_image` VALUES ('97', '41', '1.jpg', '321243', '.jpg', '20201228/blog/1338746928080700.jpg', '1', '2020-12-28 09:58:40');
INSERT INTO `blog_image` VALUES ('98', '41', '2.jpg', '1013377', '.jpg', '20201228/blog/1338750511061700.jpg', '1', '2020-12-28 09:58:43');
INSERT INTO `blog_image` VALUES ('99', '41', '5.png', '46968', '.png', '20201228/blog/1338752832868600.png', '1', '2020-12-28 09:58:45');
INSERT INTO `blog_image` VALUES ('100', '41', '双旦活动图.jpg', '322059', '.jpg', '20201228/blog/1338759646126200.jpg', '1', '2020-12-28 09:58:52');
INSERT INTO `blog_image` VALUES ('101', '42', 'df5d3ac79f3df8dc7e47f7c7da11728b46102884.jpg', '89844', '.jpg', '20201228/blog/1357142070083000.jpg', '1', '2020-12-28 15:05:13');
INSERT INTO `blog_image` VALUES ('102', '44', '2.jpg', '20435', '.jpg', '20201228/blog/1357819665644500.jpg', '1', '2020-12-28 15:16:31');
INSERT INTO `blog_image` VALUES ('103', '44', '3.jpg', '44716', '.jpg', '20201228/blog/1357823251640000.jpg', '1', '2020-12-28 15:16:34');
INSERT INTO `blog_image` VALUES ('104', '44', '4.gif', '51831', '.gif', '20201228/blog/1357825568209300.gif', '1', '2020-12-28 15:16:36');
INSERT INTO `blog_image` VALUES ('105', '44', '5.jpg', '12993', '.jpg', '20201228/blog/1357827769360600.jpg', '1', '2020-12-28 15:16:39');
INSERT INTO `blog_image` VALUES ('106', '44', '6.jpg', '60038', '.jpg', '20201228/blog/1357829573793900.jpg', '1', '2020-12-28 15:16:40');
INSERT INTO `blog_image` VALUES ('107', '44', '8.jpg', '32139', '.jpg', '20201228/blog/1357831414892400.jpg', '1', '2020-12-28 15:16:42');
INSERT INTO `blog_image` VALUES ('108', '44', '9.jpg', '35593', '.jpg', '20201228/blog/1357833239143400.jpg', '1', '2020-12-28 15:16:44');
INSERT INTO `blog_image` VALUES ('109', '44', '10.jpg', '20983', '.jpg', '20201228/blog/1357835472015700.jpg', '1', '2020-12-28 15:16:46');
INSERT INTO `blog_image` VALUES ('110', '44', '11.jpg', '30966', '.jpg', '20201228/blog/1357837329796500.jpg', '1', '2020-12-28 15:16:48');
INSERT INTO `blog_image` VALUES ('111', '46', '1.jpg', '331488', '.jpg', '20201228/blog/1365080926153000.jpg', '1', '2020-12-28 17:17:32');
INSERT INTO `blog_image` VALUES ('115', '52', '1.png', '123965', '.png', '20201231/blog/1605706157426100.png', '1', '2020-12-31 12:07:48');
INSERT INTO `blog_image` VALUES ('116', '52', '2.png', '101758', '.png', '20201231/blog/1605708153399300.png', '1', '2020-12-31 12:07:50');
INSERT INTO `blog_image` VALUES ('117', '52', '3.png', '121083', '.png', '20201231/blog/1605710027452500.png', '1', '2020-12-31 12:07:52');
INSERT INTO `blog_image` VALUES ('118', '57', '1.jpg', '331488', '.jpg', '20210104/blog/1943883442604800.jpg', '1', '2021-01-04 10:03:59');
INSERT INTO `blog_image` VALUES ('119', '57', '81331211133400.jpg', '43164', '.jpg', '20210104/blog/1943888111435200.jpg', '1', '2021-01-04 10:04:03');
INSERT INTO `blog_image` VALUES ('120', '58', '1.jpg', '331488', '.jpg', '20210104/blog/1944552271036000.jpg', '1', '2021-01-04 10:15:08');
INSERT INTO `blog_image` VALUES ('121', '60', '9.jpg', '401815', '.jpg', '20210104/blog/1944807281410200.jpg', '1', '2021-01-04 10:19:23');
INSERT INTO `blog_image` VALUES ('122', '60', '10.jpg', '447448', '.jpg', '20210104/blog/1944809516767400.jpg', '1', '2021-01-04 10:19:25');
INSERT INTO `blog_image` VALUES ('123', '62', '李白1.png', '522318', '.png', '20210104/blog/1945415153045200.png', '1', '2021-01-04 10:29:30');
INSERT INTO `blog_image` VALUES ('124', '62', '李白2.png', '489164', '.png', '20210104/blog/1945418989056300.png', '1', '2021-01-04 10:29:34');
INSERT INTO `blog_image` VALUES ('125', '62', '李白3.png', '545796', '.png', '20210104/blog/1945423313674500.png', '1', '2021-01-04 10:29:39');
INSERT INTO `blog_image` VALUES ('126', '63', '李白4.png', '598196', '.png', '20210104/blog/1945517262303000.png', '1', '2021-01-04 10:31:13');
INSERT INTO `blog_image` VALUES ('127', '63', '李白5.png', '737222', '.png', '20210104/blog/1945519961000500.png', '1', '2021-01-04 10:31:15');
INSERT INTO `blog_image` VALUES ('128', '63', '李白6.png', '688773', '.png', '20210104/blog/1945522381210700.png', '1', '2021-01-04 10:31:18');
INSERT INTO `blog_image` VALUES ('129', '63', '李白7.png', '580432', '.png', '20210104/blog/1945524904783600.png', '1', '2021-01-04 10:31:20');
INSERT INTO `blog_image` VALUES ('130', '63', '李白8.png', '448602', '.png', '20210104/blog/1945527144028200.png', '1', '2021-01-04 10:31:22');
INSERT INTO `blog_image` VALUES ('131', '63', '李白9.png', '1862557', '.png', '20210104/blog/1945529520301100.png', '1', '2021-01-04 10:31:25');
INSERT INTO `blog_image` VALUES ('132', '64', '林肯.jpeg', '63968', '.jpeg', '20210105/blog/2031819462921500.jpeg', '1', '2021-01-05 10:29:32');
INSERT INTO `blog_image` VALUES ('135', '65', '爱因斯旦.jpeg', '66617', '.jpeg', '20210105/blog/2036207013327700.jpeg', '1', '2021-01-05 11:42:40');
INSERT INTO `blog_image` VALUES ('136', '66', '惠特曼.jpeg', '56383', '.jpeg', '20210105/blog/2036260747619800.jpeg', '1', '2021-01-05 11:43:33');
INSERT INTO `blog_image` VALUES ('137', '67', '乔布斯.jpeg', '60364', '.jpeg', '20210105/blog/2036293325753100.jpeg', '1', '2021-01-05 11:44:06');
INSERT INTO `blog_image` VALUES ('138', '68', '马克吐温.jpeg', '55466', '.jpeg', '20210105/blog/2036329661458800.jpeg', '1', '2021-01-05 11:44:42');
INSERT INTO `blog_image` VALUES ('139', '69', '安吉罗.jpeg', '82542', '.jpeg', '20210105/blog/2036355737592500.jpeg', '1', '2021-01-05 11:45:08');
INSERT INTO `blog_image` VALUES ('140', '70', '保罗沃克.jpeg', '69044', '.jpeg', '20210105/blog/2036373235700100.jpeg', '1', '2021-01-05 11:45:26');
INSERT INTO `blog_image` VALUES ('141', '71', '托尔斯泰.jpeg', '61845', '.jpeg', '20210105/blog/2036389054660300.jpeg', '1', '2021-01-05 11:45:42');
INSERT INTO `blog_image` VALUES ('142', '72', '凯勒.jpeg', '72102', '.jpeg', '20210105/blog/2036402808991700.jpeg', '1', '2021-01-05 11:45:56');
INSERT INTO `blog_image` VALUES ('143', '73', '福特.jpeg', '64506', '.jpeg', '20210105/blog/2036419703452600.jpeg', '1', '2021-01-05 11:46:12');
INSERT INTO `blog_image` VALUES ('144', '74', '格雷.jpeg', '64502', '.jpeg', '20210105/blog/2036444522230900.jpeg', '1', '2021-01-05 11:46:37');
INSERT INTO `blog_image` VALUES ('145', '75', '艾略特.jpeg', '53933', '.jpeg', '20210105/blog/2036459746509200.jpeg', '1', '2021-01-05 11:46:52');
INSERT INTO `blog_image` VALUES ('146', '76', '毕加索.jpeg', '61262', '.jpeg', '20210105/blog/2036478352546600.jpeg', '1', '2021-01-05 11:47:11');
INSERT INTO `blog_image` VALUES ('154', '81', '1.jpg', '331488', '.jpg', '20210111/blog/1348528678468071424.jpg', '1', '2021-01-11 15:14:26');
INSERT INTO `blog_image` VALUES ('155', '81', '爱因斯旦.jpeg', '66617', '.jpeg', '20210111/blog/1348528701327028224.jpeg', '1', '2021-01-11 15:14:31');
INSERT INTO `blog_image` VALUES ('156', '81', '11.jpg', '30966', '.jpg', '20210111/blog/1348528712987193344.jpg', '1', '2021-01-11 15:14:34');
INSERT INTO `blog_image` VALUES ('157', '81', '15.jpg', '25786', '.jpg', '20210111/blog/1348528727004557312.jpg', '1', '2021-01-11 15:14:37');
INSERT INTO `blog_image` VALUES ('158', '81', '22.gif', '212725', '.gif', '20210111/blog/1348528740799623168.gif', '1', '2021-01-11 15:14:40');
INSERT INTO `blog_image` VALUES ('159', '81', '440908456564300.jpg', '108160', '.jpg', '20210111/blog/1348528754967982080.jpg', '1', '2021-01-11 15:14:44');
INSERT INTO `blog_image` VALUES ('160', '83', '6.jpg', '190014', '.jpg', '20210114/blog/1349632092233019392.jpg', '1', '2021-01-14 16:19:00');
INSERT INTO `blog_image` VALUES ('161', '83', '8.jpg', '991241', '.jpg', '20210114/blog/1349632106405572608.jpg', '1', '2021-01-14 16:19:03');
INSERT INTO `blog_image` VALUES ('162', '84', 'def.jpg', '17483', '.jpg', '20210114/blog/1349633617411977216.jpg', '1', '2021-01-14 16:25:04');
INSERT INTO `blog_image` VALUES ('163', '84', 'abc.jpg', '13781', '.jpg', '20210114/blog/1349633632842821632.jpg', '1', '2021-01-14 16:25:07');
INSERT INTO `blog_image` VALUES ('164', '86', '4.jpeg', '215124', '.jpeg', '20210119/blog/1351468055775162368.jpeg', '1', '2021-01-19 17:54:28');
INSERT INTO `blog_image` VALUES ('165', '87', '10.jpg', '447448', '.jpg', '20210119/blog/1351468404149858304.jpg', '1', '2021-01-19 17:55:51');
INSERT INTO `blog_image` VALUES ('166', '88', '4.jpeg', '215124', '.jpeg', '20210119/blog/1351469541414416384.jpeg', '1', '2021-01-19 18:00:22');

-- ----------------------------
-- Table structure for collect
-- ----------------------------
DROP TABLE IF EXISTS `collect`;
CREATE TABLE `collect` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `blog_id` int(11) NOT NULL COMMENT '微博id',
  `user_id` int(11) NOT NULL COMMENT '收藏人',
  `collect_time` datetime DEFAULT NULL COMMENT '收藏时间',
  `status` int(11) DEFAULT '1' COMMENT '状态(1=正常;0=取消收藏)',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_blog_id_user_id` (`blog_id`,`user_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8mb4 COMMENT='收藏表';

-- ----------------------------
-- Records of collect
-- ----------------------------
INSERT INTO `collect` VALUES ('1', '6', '27', '2020-02-10 15:54:11', '0', '2020-02-10 15:54:12', '2020-02-11 12:16:11');
INSERT INTO `collect` VALUES ('3', '7', '33', '2020-02-24 23:03:52', '1', '2020-02-24 23:03:52', null);
INSERT INTO `collect` VALUES ('4', '15', '33', '2020-02-24 23:09:36', '0', '2020-02-24 23:09:36', '2020-02-24 23:09:37');
INSERT INTO `collect` VALUES ('5', '11', '37', '2020-02-25 23:53:18', '1', '2020-02-25 23:53:18', null);
INSERT INTO `collect` VALUES ('6', '8', '37', '2020-02-25 23:53:20', '0', '2020-02-25 23:53:20', '2020-02-25 23:53:24');
INSERT INTO `collect` VALUES ('7', '7', '37', '2020-02-25 23:53:28', '1', '2020-02-25 23:53:28', null);
INSERT INTO `collect` VALUES ('8', '19', '27', '2020-02-28 11:06:55', '0', '2020-02-28 11:06:53', '2020-03-02 09:36:18');
INSERT INTO `collect` VALUES ('12', '23', '27', '2020-03-02 11:34:47', '1', '2020-03-02 11:34:46', null);
INSERT INTO `collect` VALUES ('13', '20', '38', '2020-03-02 15:19:24', '1', '2020-03-02 15:19:24', null);
INSERT INTO `collect` VALUES ('15', '25', '6', '2020-03-02 15:22:25', '1', '2020-03-02 15:22:24', null);
INSERT INTO `collect` VALUES ('16', '20', '37', '2020-03-02 16:01:16', '1', '2020-03-02 16:01:15', null);
INSERT INTO `collect` VALUES ('17', '28', '35', '2020-03-02 22:48:31', '1', '2020-03-02 22:48:31', null);
INSERT INTO `collect` VALUES ('22', '31', '39', '2020-03-04 20:35:18', '1', '2020-03-04 20:35:18', null);
INSERT INTO `collect` VALUES ('23', '33', '6', '2020-03-04 22:20:15', '1', '2020-03-04 22:20:15', null);
INSERT INTO `collect` VALUES ('24', '34', '27', '2020-12-22 21:50:53', '1', '2020-12-22 21:50:52', null);
INSERT INTO `collect` VALUES ('25', '35', '27', '2020-12-22 23:34:03', '1', '2020-12-22 23:34:03', null);
INSERT INTO `collect` VALUES ('26', '77', '27', '2021-01-05 23:07:35', '1', '2021-01-05 23:07:35', null);
INSERT INTO `collect` VALUES ('27', '41', '40', '2021-01-06 11:53:04', '1', '2021-01-06 11:53:04', null);
INSERT INTO `collect` VALUES ('28', '79', '41', '2021-01-11 15:11:21', '1', '2021-01-11 15:11:20', null);
INSERT INTO `collect` VALUES ('30', '72', '43', '2021-01-18 17:03:08', '1', '2021-01-18 17:03:08', null);
INSERT INTO `collect` VALUES ('31', '81', '43', '2021-01-18 17:28:37', '1', '2021-01-18 17:28:37', null);
INSERT INTO `collect` VALUES ('32', '83', '6', '2021-01-18 22:15:23', '1', '2021-01-18 22:15:23', null);

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `blog_id` int(11) NOT NULL COMMENT '微博id',
  `user_id` int(11) NOT NULL COMMENT '评论人',
  `content` varchar(5000) DEFAULT NULL COMMENT '评论内容',
  `comment_time` datetime DEFAULT NULL COMMENT '评论时间',
  `status` int(11) DEFAULT '1' COMMENT '状态(1=正常;0=取消评论)',
  `update_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8mb4 COMMENT='评论表';

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('1', '2', '28', '一起加油', '2020-02-10 21:01:14', '1', null);
INSERT INTO `comment` VALUES ('2', '7', '28', '我们一起加油', '2020-02-10 21:02:42', '1', null);
INSERT INTO `comment` VALUES ('3', '7', '27', '我们一起加油', '2020-02-10 21:03:19', '1', null);
INSERT INTO `comment` VALUES ('5', '2', '27', '我们一起加油', '2020-02-11 12:18:38', '1', null);
INSERT INTO `comment` VALUES ('6', '2', '27', '让我们一起加油吧！！', '2020-02-11 18:42:20', '1', null);
INSERT INTO `comment` VALUES ('7', '2', '27', '让我们再次加油吧！！', '2020-02-11 18:44:09', '1', null);
INSERT INTO `comment` VALUES ('8', '6', '27', '总体上还是不错的！', '2020-03-02 09:35:28', '1', null);
INSERT INTO `comment` VALUES ('9', '21', '27', 'df', '2020-03-02 09:38:08', '1', null);
INSERT INTO `comment` VALUES ('10', '20', '6', '好漂亮，好帅气', '2020-03-02 11:14:44', '1', null);
INSERT INTO `comment` VALUES ('11', '20', '6', '还行吧', '2020-03-02 11:20:37', '1', null);
INSERT INTO `comment` VALUES ('12', '23', '27', '帅气', '2020-03-02 11:34:57', '1', null);
INSERT INTO `comment` VALUES ('13', '23', '38', '帅气', '2020-03-02 15:19:33', '1', null);
INSERT INTO `comment` VALUES ('14', '20', '38', '不错', '2020-03-02 15:19:50', '1', null);
INSERT INTO `comment` VALUES ('15', '29', '35', '1212', '2020-03-03 21:28:25', '1', null);
INSERT INTO `comment` VALUES ('16', '28', '27', '不错', '2020-03-04 10:05:10', '1', null);
INSERT INTO `comment` VALUES ('17', '31', '39', '确实好冷', '2020-03-04 20:35:26', '1', null);
INSERT INTO `comment` VALUES ('18', '33', '6', '阔以', '2020-03-04 22:20:23', '1', null);
INSERT INTO `comment` VALUES ('19', '31', '6', '确实真的冷', '2020-12-17 16:40:09', '1', null);
INSERT INTO `comment` VALUES ('20', '23', '6', '确实如此', '2020-12-22 21:43:33', '1', null);
INSERT INTO `comment` VALUES ('21', '34', '27', '是呀', '2020-12-22 21:51:01', '1', null);
INSERT INTO `comment` VALUES ('22', '35', '27', '不错', '2020-12-22 23:34:23', '1', null);
INSERT INTO `comment` VALUES ('23', '43', '6', '出自《幸福来敲门》', '2020-12-28 15:15:45', '1', null);
INSERT INTO `comment` VALUES ('24', '42', '27', '说得在理', '2020-12-28 15:20:26', '1', null);
INSERT INTO `comment` VALUES ('25', '63', '27', '不错！！！', '2021-01-04 22:32:24', '1', null);
INSERT INTO `comment` VALUES ('26', '59', '27', '受益匪浅', '2021-01-04 22:33:21', '1', null);
INSERT INTO `comment` VALUES ('27', '77', '27', '说的对，赞同', '2021-01-05 23:08:21', '1', null);
INSERT INTO `comment` VALUES ('28', '76', '27', '我就觉得很不错！', '2021-01-06 11:52:19', '1', null);
INSERT INTO `comment` VALUES ('29', '69', '27', '说得对', '2021-01-06 12:18:08', '1', null);
INSERT INTO `comment` VALUES ('30', '79', '40', '说的对，免得给自己拉下一身困扰！！！', '2021-01-06 15:11:58', '1', null);
INSERT INTO `comment` VALUES ('31', '78', '6', '牛逼', '2021-01-06 15:27:40', '1', null);
INSERT INTO `comment` VALUES ('32', '77', '6', '说得好', '2021-01-06 15:30:45', '1', null);
INSERT INTO `comment` VALUES ('33', '61', '40', '不错!', '2021-01-08 15:14:20', '1', null);
INSERT INTO `comment` VALUES ('34', '79', '41', '不错！', '2021-01-11 15:12:35', '1', null);
INSERT INTO `comment` VALUES ('35', '84', '43', '不错', '2021-01-14 18:08:50', '1', null);
INSERT INTO `comment` VALUES ('36', '81', '43', '说的不错！', '2021-01-14 18:42:39', '1', null);
INSERT INTO `comment` VALUES ('37', '82', '43', '没错', '2021-01-14 23:14:06', '1', null);
INSERT INTO `comment` VALUES ('38', '82', '6', '是的，还行吧！！！', '2021-01-14 23:14:41', '1', null);
INSERT INTO `comment` VALUES ('39', '83', '6', '不错的微博！', '2021-01-18 22:15:42', '1', null);
INSERT INTO `comment` VALUES ('40', '82', '6', '是啊 确实不错！', '2021-01-18 22:21:40', '1', null);
INSERT INTO `comment` VALUES ('41', '83', '27', '赞同+1', '2021-01-18 22:57:58', '1', null);
INSERT INTO `comment` VALUES ('42', '82', '27', '还行吧', '2021-01-19 09:56:34', '1', null);
INSERT INTO `comment` VALUES ('43', '88', '6', '写得不错！', '2021-01-20 09:52:43', '1', null);

-- ----------------------------
-- Table structure for concern
-- ----------------------------
DROP TABLE IF EXISTS `concern`;
CREATE TABLE `concern` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `concern_id` int(11) DEFAULT NULL COMMENT '关注者',
  `concern_be_id` int(11) DEFAULT NULL COMMENT '被关注者id',
  `concern_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '关注的时间',
  `is_active` tinyint(255) DEFAULT '1' COMMENT '是否有效(1=是;0=取消关注)',
  `update_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `memo` varchar(255) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_concern_id_concern__be_id` (`concern_id`,`concern_be_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8 COMMENT='关注-被关注表（我的粉丝、我的关注-好友圈）';

-- ----------------------------
-- Records of concern
-- ----------------------------
INSERT INTO `concern` VALUES ('31', '27', '6', '2020-12-28 09:52:41', '1', null, null);
INSERT INTO `concern` VALUES ('32', '27', '38', '2020-12-28 15:18:15', '1', null, null);
INSERT INTO `concern` VALUES ('33', '38', '6', '2020-12-28 15:19:04', '1', null, null);
INSERT INTO `concern` VALUES ('34', '6', '27', '2020-12-31 18:39:10', '1', null, null);
INSERT INTO `concern` VALUES ('35', '40', '27', '2021-01-05 23:08:46', '1', null, null);
INSERT INTO `concern` VALUES ('36', '27', '40', '2021-01-06 10:20:03', '1', null, null);
INSERT INTO `concern` VALUES ('37', '6', '40', '2021-01-06 15:14:27', '1', null, null);
INSERT INTO `concern` VALUES ('38', '40', '6', '2021-01-06 15:27:22', '1', null, null);
INSERT INTO `concern` VALUES ('39', '41', '6', '2021-01-11 15:11:29', '1', null, null);
INSERT INTO `concern` VALUES ('40', '43', '41', '2021-01-18 10:58:40', '1', null, null);
INSERT INTO `concern` VALUES ('42', '6', '43', '2021-01-18 22:22:25', '1', null, null);
INSERT INTO `concern` VALUES ('43', '27', '43', '2021-01-18 22:58:23', '1', null, null);

-- ----------------------------
-- Table structure for praise
-- ----------------------------
DROP TABLE IF EXISTS `praise`;
CREATE TABLE `praise` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `blog_id` int(11) DEFAULT NULL COMMENT '微博id',
  `user_id` int(11) NOT NULL COMMENT '点赞人',
  `praise_time` datetime DEFAULT NULL COMMENT '点赞时间',
  `status` int(11) DEFAULT '1' COMMENT '状态(1=正常;0=取消点赞)',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_blog_id_user_id` (`blog_id`,`user_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=90 DEFAULT CHARSET=utf8mb4 COMMENT='点赞表';

-- ----------------------------
-- Records of praise
-- ----------------------------
INSERT INTO `praise` VALUES ('11', '23', '6', '2020-03-02 10:22:23', '1', '2020-03-02 10:22:22', null);
INSERT INTO `praise` VALUES ('12', '20', '6', '2020-03-02 11:23:51', '1', '2020-03-02 11:23:50', null);
INSERT INTO `praise` VALUES ('14', '20', '38', '2020-03-02 15:19:24', '1', '2020-03-02 15:19:23', null);
INSERT INTO `praise` VALUES ('15', '23', '38', '2020-03-02 15:19:26', '1', '2020-03-02 15:19:26', null);
INSERT INTO `praise` VALUES ('16', '25', '6', '2020-03-02 15:22:07', '1', '2020-03-02 15:22:06', null);
INSERT INTO `praise` VALUES ('17', '27', '37', '2020-03-02 16:00:45', '1', '2020-03-02 16:00:44', null);
INSERT INTO `praise` VALUES ('18', '25', '37', '2020-03-02 16:00:46', '1', '2020-03-02 16:00:46', null);
INSERT INTO `praise` VALUES ('19', '23', '37', '2020-03-02 16:00:50', '1', '2020-03-02 16:00:49', null);
INSERT INTO `praise` VALUES ('20', '20', '37', '2020-03-02 16:00:52', '1', '2020-03-02 16:00:51', null);
INSERT INTO `praise` VALUES ('21', '28', '35', '2020-03-02 22:48:30', '1', '2020-03-02 22:48:30', null);
INSERT INTO `praise` VALUES ('25', '31', '39', '2020-03-04 20:35:16', '1', '2020-03-04 20:35:17', null);
INSERT INTO `praise` VALUES ('26', '33', '6', '2020-03-04 20:47:18', '1', '2020-03-04 20:47:18', null);
INSERT INTO `praise` VALUES ('29', '34', '27', '2020-12-22 22:52:55', '1', '2020-12-22 22:52:54', null);
INSERT INTO `praise` VALUES ('30', '35', '27', '2020-12-22 23:33:59', '1', '2020-12-22 23:33:58', null);
INSERT INTO `praise` VALUES ('31', '41', '27', '2020-12-28 10:07:31', '1', '2020-12-28 10:07:31', null);
INSERT INTO `praise` VALUES ('32', '51', '6', '2020-12-31 18:39:12', '1', '2020-12-31 18:39:11', null);
INSERT INTO `praise` VALUES ('33', '62', '6', '2021-01-04 17:09:52', '1', '2021-01-04 17:09:52', null);
INSERT INTO `praise` VALUES ('35', '77', '6', '2021-01-05 11:47:53', '1', '2021-01-05 11:47:53', null);
INSERT INTO `praise` VALUES ('36', '76', '6', '2021-01-05 11:48:10', '1', '2021-01-05 11:48:09', null);
INSERT INTO `praise` VALUES ('37', '75', '6', '2021-01-05 11:48:13', '1', '2021-01-05 11:48:12', null);
INSERT INTO `praise` VALUES ('38', '74', '6', '2021-01-05 11:48:14', '1', '2021-01-05 11:48:14', null);
INSERT INTO `praise` VALUES ('43', '70', '27', '2021-01-06 10:52:30', '1', '2021-01-06 10:52:29', null);
INSERT INTO `praise` VALUES ('44', '77', '27', '2021-01-06 10:57:29', '1', '2021-01-06 10:57:29', null);
INSERT INTO `praise` VALUES ('45', '76', '27', '2021-01-06 11:51:56', '1', '2021-01-06 11:51:56', null);
INSERT INTO `praise` VALUES ('46', '41', '40', '2021-01-06 11:52:57', '1', '2021-01-06 11:52:57', null);
INSERT INTO `praise` VALUES ('47', '64', '40', '2021-01-06 12:07:21', '1', '2021-01-06 12:07:20', null);
INSERT INTO `praise` VALUES ('48', '78', '27', '2021-01-06 12:08:14', '1', '2021-01-06 12:08:13', null);
INSERT INTO `praise` VALUES ('49', '74', '27', '2021-01-06 12:08:30', '1', '2021-01-06 12:08:30', null);
INSERT INTO `praise` VALUES ('50', '73', '27', '2021-01-06 12:10:17', '1', '2021-01-06 12:10:17', null);
INSERT INTO `praise` VALUES ('51', '72', '27', '2021-01-06 12:10:37', '1', '2021-01-06 12:10:37', null);
INSERT INTO `praise` VALUES ('52', '78', '40', '2021-01-06 12:15:57', '1', '2021-01-06 12:15:57', null);
INSERT INTO `praise` VALUES ('53', '71', '27', '2021-01-06 12:16:14', '1', '2021-01-06 12:16:14', null);
INSERT INTO `praise` VALUES ('54', '69', '27', '2021-01-06 12:16:35', '1', '2021-01-06 12:16:35', null);
INSERT INTO `praise` VALUES ('55', '68', '27', '2021-01-06 12:16:53', '1', '2021-01-06 12:16:52', null);
INSERT INTO `praise` VALUES ('56', '67', '27', '2021-01-06 12:16:57', '1', '2021-01-06 12:16:56', null);
INSERT INTO `praise` VALUES ('57', '40', '40', '2021-01-06 12:17:19', '1', '2021-01-06 12:17:19', null);
INSERT INTO `praise` VALUES ('58', '20', '40', '2021-01-06 12:17:26', '1', '2021-01-06 12:17:25', null);
INSERT INTO `praise` VALUES ('59', '65', '27', '2021-01-06 12:17:39', '1', '2021-01-06 12:17:39', null);
INSERT INTO `praise` VALUES ('60', '64', '27', '2021-01-06 12:17:50', '1', '2021-01-06 12:17:50', null);
INSERT INTO `praise` VALUES ('61', '79', '27', '2021-01-06 15:11:15', '1', '2021-01-06 15:11:14', null);
INSERT INTO `praise` VALUES ('62', '79', '40', '2021-01-06 15:11:29', '1', '2021-01-06 15:11:28', null);
INSERT INTO `praise` VALUES ('63', '79', '6', '2021-01-06 15:14:29', '1', '2021-01-06 15:14:29', null);
INSERT INTO `praise` VALUES ('64', '78', '6', '2021-01-06 15:14:35', '1', '2021-01-06 15:14:34', null);
INSERT INTO `praise` VALUES ('65', '73', '6', '2021-01-06 15:14:42', '1', '2021-01-06 15:14:42', null);
INSERT INTO `praise` VALUES ('66', '72', '6', '2021-01-06 15:14:43', '1', '2021-01-06 15:14:43', null);
INSERT INTO `praise` VALUES ('67', '71', '6', '2021-01-06 15:14:45', '1', '2021-01-06 15:14:45', null);
INSERT INTO `praise` VALUES ('68', '70', '6', '2021-01-06 15:14:46', '1', '2021-01-06 15:14:46', null);
INSERT INTO `praise` VALUES ('69', '69', '6', '2021-01-06 15:14:53', '1', '2021-01-06 15:14:52', null);
INSERT INTO `praise` VALUES ('70', '67', '6', '2021-01-06 15:15:31', '1', '2021-01-06 15:15:31', null);
INSERT INTO `praise` VALUES ('71', '68', '6', '2021-01-06 15:29:18', '1', '2021-01-06 15:29:17', null);
INSERT INTO `praise` VALUES ('72', '66', '6', '2021-01-06 15:29:25', '1', '2021-01-06 15:29:25', null);
INSERT INTO `praise` VALUES ('73', '65', '6', '2021-01-06 15:29:27', '1', '2021-01-06 15:29:26', null);
INSERT INTO `praise` VALUES ('74', '64', '6', '2021-01-06 15:29:29', '1', '2021-01-06 15:29:28', null);
INSERT INTO `praise` VALUES ('75', '61', '6', '2021-01-06 15:30:05', '1', '2021-01-06 15:30:05', null);
INSERT INTO `praise` VALUES ('76', '62', '40', '2021-01-08 15:14:06', '1', '2021-01-08 15:14:06', null);
INSERT INTO `praise` VALUES ('77', '61', '40', '2021-01-08 15:14:11', '1', '2021-01-08 15:14:10', null);
INSERT INTO `praise` VALUES ('79', '79', '41', '2021-01-11 15:11:20', '1', '2021-01-11 15:11:19', null);
INSERT INTO `praise` VALUES ('82', '76', '43', '2021-01-18 17:02:55', '1', '2021-01-18 17:02:55', null);
INSERT INTO `praise` VALUES ('83', '81', '43', '2021-01-18 17:25:57', '1', '2021-01-18 17:25:56', null);
INSERT INTO `praise` VALUES ('84', '62', '43', '2021-01-18 17:28:27', '1', '2021-01-18 17:28:27', null);
INSERT INTO `praise` VALUES ('85', '83', '6', '2021-01-18 22:15:11', '1', '2021-01-18 22:15:11', null);
INSERT INTO `praise` VALUES ('86', '82', '6', '2021-01-18 22:21:22', '1', '2021-01-18 22:21:21', null);
INSERT INTO `praise` VALUES ('87', '83', '27', '2021-01-18 22:57:25', '1', '2021-01-18 22:57:24', null);
INSERT INTO `praise` VALUES ('88', '82', '27', '2021-01-19 09:56:08', '1', '2021-01-19 09:56:07', null);

-- ----------------------------
-- Table structure for reply
-- ----------------------------
DROP TABLE IF EXISTS `reply`;
CREATE TABLE `reply` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `blog_id` int(11) NOT NULL COMMENT '微博id',
  `comment_id` int(11) NOT NULL COMMENT '评论id',
  `user_id` int(11) NOT NULL COMMENT '发起人',
  `content` varchar(500) DEFAULT NULL COMMENT '回复内容',
  `reply_from` varchar(50) DEFAULT NULL COMMENT '回复人',
  `reply_to` varchar(50) DEFAULT NULL COMMENT '被回复人',
  `reply_time` datetime DEFAULT NULL COMMENT '回复时间',
  `status` int(11) DEFAULT '1' COMMENT '状态(1=正常;0=取消回复)',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 COMMENT='回复表';

-- ----------------------------
-- Records of reply
-- ----------------------------
INSERT INTO `reply` VALUES ('2', '7', '2', '27', '阔以', '张三子', null, '2020-02-11 14:58:49', '1', '2020-02-11 14:58:50', null);
INSERT INTO `reply` VALUES ('3', '7', '2', '29', '我觉得不行', '王五', null, '2020-02-11 14:59:51', '1', '2020-02-11 14:59:51', null);
INSERT INTO `reply` VALUES ('4', '7', '2', '29', '阔以个屁！！', '王五', '张三子', '2020-02-11 15:00:11', '1', '2020-02-11 15:00:12', null);
INSERT INTO `reply` VALUES ('5', '7', '2', '27', '那你说说咋不行！！', '张三子', '王五', '2020-02-11 15:00:51', '1', '2020-02-11 15:00:52', null);
INSERT INTO `reply` VALUES ('7', '7', '3', '28', '讲得不错！！', '李四', null, '2020-02-11 19:02:00', '1', '2020-02-11 19:02:01', null);
INSERT INTO `reply` VALUES ('8', '23', '13', '27', '谢谢', '张三子', null, '2020-03-04 10:05:31', '1', '2020-03-04 10:05:31', null);
INSERT INTO `reply` VALUES ('9', '28', '16', '38', '谢谢', '布鲁斯', null, '2020-03-04 10:15:19', '1', '2020-03-04 10:15:18', null);
INSERT INTO `reply` VALUES ('10', '23', '12', '38', '你也帅气', '布鲁斯', null, '2020-03-04 10:15:46', '1', '2020-03-04 10:15:45', null);
INSERT INTO `reply` VALUES ('11', '20', '14', '39', '对吧', '成龙', null, '2020-03-04 20:39:59', '1', '2020-03-04 20:39:59', null);
INSERT INTO `reply` VALUES ('12', '31', '17', '6', '还行吧', '修罗debug', null, '2020-12-17 16:39:46', '1', '2020-12-17 16:39:45', null);
INSERT INTO `reply` VALUES ('13', '34', '21', '6', '嗯嗯', '修罗debug', null, '2020-12-22 22:02:02', '1', '2020-12-22 22:02:02', null);
INSERT INTO `reply` VALUES ('14', '35', '22', '6', '是吧 我也觉得不错！', '修罗debug', null, '2020-12-22 23:35:44', '1', '2020-12-22 23:35:43', null);
INSERT INTO `reply` VALUES ('15', '43', '23', '27', 'good', '张三子', null, '2020-12-28 15:25:54', '1', '2020-12-28 15:25:54', null);
INSERT INTO `reply` VALUES ('16', '79', '30', '41', '是的！', '十三爷', null, '2021-01-11 15:12:46', '1', '2021-01-11 15:12:46', null);
INSERT INTO `reply` VALUES ('17', '79', '34', '43', '是的', '杰马克', null, '2021-01-14 21:43:28', '1', '2021-01-14 21:43:28', null);
INSERT INTO `reply` VALUES ('18', '79', '34', '43', '说得对', '杰马克', null, '2021-01-14 21:43:44', '1', '2021-01-14 21:43:44', null);
INSERT INTO `reply` VALUES ('19', '82', '37', '6', 'yes 你说的对！！！', null, null, '2021-01-14 23:17:59', '1', '2021-01-14 23:18:54', '2021-01-14 23:21:00');
INSERT INTO `reply` VALUES ('20', '82', '38', '43', 'yes 你也说的对', null, null, '2021-01-14 23:19:39', '1', '2021-01-14 23:19:39', '2021-01-14 23:21:00');
INSERT INTO `reply` VALUES ('21', '79', '34', '43', 'yes 说得对', '杰马克', null, '2021-01-14 23:28:29', '1', '2021-01-14 23:28:28', null);
INSERT INTO `reply` VALUES ('22', '79', '30', '43', '你说的不错', '杰马克', null, '2021-01-14 23:28:44', '1', '2021-01-14 23:28:44', null);
INSERT INTO `reply` VALUES ('23', '82', '37', '6', '是的', '修罗debug', null, '2021-01-18 22:22:00', '1', '2021-01-18 22:21:59', null);
INSERT INTO `reply` VALUES ('24', '82', '37', '27', '是的', '张三子', null, '2021-01-18 22:58:56', '1', '2021-01-18 22:58:55', null);

-- ----------------------------
-- Table structure for sys_config
-- ----------------------------
DROP TABLE IF EXISTS `sys_config`;
CREATE TABLE `sys_config` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `param_key` varchar(50) DEFAULT NULL COMMENT 'key',
  `param_value` varchar(2000) DEFAULT NULL COMMENT 'value',
  `status` tinyint(4) DEFAULT '1' COMMENT '状态   0：隐藏   1：显示',
  `remark` varchar(500) DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`),
  UNIQUE KEY `param_key` (`param_key`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='系统配置信息表';

-- ----------------------------
-- Records of sys_config
-- ----------------------------
INSERT INTO `sys_config` VALUES ('1', 'CLOUD_STORAGE_CONFIG_KEY', '{\"aliyunAccessKeyId\":\"\",\"aliyunAccessKeySecret\":\"\",\"aliyunBucketName\":\"\",\"aliyunDomain\":\"\",\"aliyunEndPoint\":\"\",\"aliyunPrefix\":\"\",\"qcloudBucketName\":\"\",\"qcloudDomain\":\"\",\"qcloudPrefix\":\"\",\"qcloudSecretId\":\"\",\"qcloudSecretKey\":\"\",\"qiniuAccessKey\":\"NrgMfABZxWLo5B-YYSjoE8-AZ1EISdi1Z3ubLOeZ\",\"qiniuBucketName\":\"ios-app\",\"qiniuDomain\":\"http://7xqbwh.dl1.z0.glb.clouddn.com\",\"qiniuPrefix\":\"upload\",\"qiniuSecretKey\":\"uIwJHevMRWU0VLxFvgy0tAcOdGqasdtVlJkdy6vV\",\"type\":1}', '0', '云存储配置信息');

-- ----------------------------
-- Table structure for sys_dept
-- ----------------------------
DROP TABLE IF EXISTS `sys_dept`;
CREATE TABLE `sys_dept` (
  `dept_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `parent_id` bigint(20) DEFAULT NULL COMMENT '上级部门ID，一级部门为0',
  `name` varchar(50) DEFAULT NULL COMMENT '部门名称',
  `order_num` int(11) DEFAULT NULL COMMENT '排序',
  `del_flag` tinyint(4) DEFAULT '0' COMMENT '是否删除  -1：已删除  0：正常',
  PRIMARY KEY (`dept_id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8 COMMENT='部门管理';

-- ----------------------------
-- Records of sys_dept
-- ----------------------------
INSERT INTO `sys_dept` VALUES ('1', '0', '集团总部', '0', '0');
INSERT INTO `sys_dept` VALUES ('2', '1', '互联网技术部', '1', '0');
INSERT INTO `sys_dept` VALUES ('3', '1', '销售部', '2', '0');
INSERT INTO `sys_dept` VALUES ('4', '3', '市场调研部', '0', '0');
INSERT INTO `sys_dept` VALUES ('5', '3', '销售中心办公室', '1', '0');
INSERT INTO `sys_dept` VALUES ('6', '2', '开发部', '0', '0');
INSERT INTO `sys_dept` VALUES ('7', '2', '测试部', '1', '0');
INSERT INTO `sys_dept` VALUES ('8', '2', '运维部', '2', '0');
INSERT INTO `sys_dept` VALUES ('9', '2', '产品部', '3', '0');
INSERT INTO `sys_dept` VALUES ('10', '1', '财务部', '0', '0');
INSERT INTO `sys_dept` VALUES ('11', '10', '会计部', '0', '0');
INSERT INTO `sys_dept` VALUES ('12', '10', '审计部', '1', '0');
INSERT INTO `sys_dept` VALUES ('13', '10', '税务部', '2', '0');
INSERT INTO `sys_dept` VALUES ('15', '14', '测试1', '0', '-1');
INSERT INTO `sys_dept` VALUES ('16', '14', '测试2', '1', '-1');
INSERT INTO `sys_dept` VALUES ('17', '11', '测试部门1', '1', '-1');
INSERT INTO `sys_dept` VALUES ('18', '15', '1', '0', '-1');
INSERT INTO `sys_dept` VALUES ('19', '10', '1', '0', '-1');
INSERT INTO `sys_dept` VALUES ('20', '2', '总监部2', '1', '-1');
INSERT INTO `sys_dept` VALUES ('21', '10', '总经理办公室', '3', '0');
INSERT INTO `sys_dept` VALUES ('22', '10', '财务1部', '12', '-1');
INSERT INTO `sys_dept` VALUES ('23', '6', '开发一部', '1', '0');
INSERT INTO `sys_dept` VALUES ('24', '6', '开发二部', '2', '0');
INSERT INTO `sys_dept` VALUES ('25', '23', '前端部', '1', '0');
INSERT INTO `sys_dept` VALUES ('26', '23', '后端部', '1', '0');
INSERT INTO `sys_dept` VALUES ('27', '24', '前端部', '0', '0');
INSERT INTO `sys_dept` VALUES ('28', '24', '测试部', '1', '0');

-- ----------------------------
-- Table structure for sys_dict
-- ----------------------------
DROP TABLE IF EXISTS `sys_dict`;
CREATE TABLE `sys_dict` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL COMMENT '字典名称',
  `type` varchar(100) NOT NULL COMMENT '字典类型',
  `code` varchar(100) NOT NULL COMMENT '字典码',
  `value` varchar(1000) NOT NULL COMMENT '字典值',
  `order_num` int(11) DEFAULT '0' COMMENT '排序',
  `remark` varchar(255) DEFAULT NULL COMMENT '备注',
  `del_flag` tinyint(4) DEFAULT '0' COMMENT '删除标记  -1：已删除  0：正常',
  PRIMARY KEY (`id`),
  UNIQUE KEY `type` (`type`,`code`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COMMENT='数据字典表';

-- ----------------------------
-- Records of sys_dict
-- ----------------------------
INSERT INTO `sys_dict` VALUES ('4', '博客类型', 'blogType', 'blogCode', '1', '1', '', '0');
INSERT INTO `sys_dict` VALUES ('5', '博客类型', 'blogType', 'blogCodeV2', '博客编码V2', '2', null, '0');
INSERT INTO `sys_dict` VALUES ('6', '商品类型', 'itemType', 'itemType', '婴儿', '1', '商品类型', '0');
INSERT INTO `sys_dict` VALUES ('7', '商品类型', 'itemType', 'itemType2', '洗发用品', '2', '商品类型', '0');

-- ----------------------------
-- Table structure for sys_log
-- ----------------------------
DROP TABLE IF EXISTS `sys_log`;
CREATE TABLE `sys_log` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) DEFAULT NULL COMMENT '用户名',
  `operation` varchar(50) DEFAULT NULL COMMENT '用户操作',
  `method` varchar(200) DEFAULT NULL COMMENT '请求方法',
  `params` varchar(10000) DEFAULT NULL COMMENT '请求参数',
  `time` bigint(20) NOT NULL COMMENT '执行时长(毫秒)',
  `ip` varchar(64) DEFAULT NULL COMMENT 'IP地址',
  `create_date` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=860 DEFAULT CHARSET=utf8 COMMENT='系统日志';

-- ----------------------------
-- Records of sys_log
-- ----------------------------
INSERT INTO `sys_log` VALUES ('169', 'debug', '修改登录密码', 'com.debug.pmp.server.controller.SysUserController.updatePassword()', '\"123456\"', '53', '0:0:0:0:0:0:0:1', '2019-08-05 20:35:03');
INSERT INTO `sys_log` VALUES ('170', 'admin', '删除菜单', 'com.debug.pmp.server.controller.SysMenuController.delete()', '61', '47', '0:0:0:0:0:0:0:1', '2019-08-05 20:49:43');
INSERT INTO `sys_log` VALUES ('171', 'admin', '删除菜单', 'com.debug.pmp.server.controller.SysMenuController.delete()', '65', '47', '0:0:0:0:0:0:0:1', '2019-08-05 20:49:49');
INSERT INTO `sys_log` VALUES ('172', 'admin', '删除菜单', 'com.debug.pmp.server.controller.SysMenuController.delete()', '64', '45', '0:0:0:0:0:0:0:1', '2019-08-05 20:49:54');
INSERT INTO `sys_log` VALUES ('173', 'admin', '删除菜单', 'com.debug.pmp.server.controller.SysMenuController.delete()', '63', '41', '0:0:0:0:0:0:0:1', '2019-08-05 20:49:59');
INSERT INTO `sys_log` VALUES ('174', 'admin', '删除菜单', 'com.debug.pmp.server.controller.SysMenuController.delete()', '62', '42', '0:0:0:0:0:0:0:1', '2019-08-05 20:50:04');
INSERT INTO `sys_log` VALUES ('175', 'admin', '删除菜单', 'com.debug.pmp.server.controller.SysMenuController.delete()', '57', '104', '0:0:0:0:0:0:0:1', '2019-08-05 22:34:17');
INSERT INTO `sys_log` VALUES ('176', 'admin', '删除菜单', 'com.debug.pmp.server.controller.SysMenuController.delete()', '56', '79', '0:0:0:0:0:0:0:1', '2019-08-05 22:34:23');
INSERT INTO `sys_log` VALUES ('177', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.SysMenuController.update()', '{\"menuId\":41,\"parentId\":0,\"parentName\":\"一级菜单\",\"name\":\"博客模块\",\"type\":0,\"icon\":\"fa fa-coffee\",\"orderNum\":1}', '88', '0:0:0:0:0:0:0:1', '2019-08-10 21:54:57');
INSERT INTO `sys_log` VALUES ('178', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.SysMenuController.update()', '{\"menuId\":41,\"parentId\":0,\"parentName\":\"一级菜单\",\"name\":\"博客模块\",\"type\":0,\"icon\":\"fa fa-coffee\",\"orderNum\":3}', '40', '0:0:0:0:0:0:0:1', '2019-08-10 21:56:08');
INSERT INTO `sys_log` VALUES ('179', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.SysMenuController.update()', '{\"menuId\":42,\"parentId\":41,\"parentName\":\"博客模块\",\"name\":\"博客类别\",\"url\":\"modules/item/itemType.html\",\"perms\":\"sys:blog:list\",\"type\":1,\"icon\":\"fa fa-envelope-open\",\"orderNum\":0}', '38', '0:0:0:0:0:0:0:1', '2019-08-10 21:58:30');
INSERT INTO `sys_log` VALUES ('180', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.SysMenuController.update()', '{\"menuId\":42,\"parentId\":41,\"parentName\":\"博客模块\",\"name\":\"博客类别\",\"url\":\"modules/blog/blogType.html\",\"perms\":\"sys:blog:list\",\"type\":1,\"icon\":\"fa fa-envelope-open\",\"orderNum\":0}', '40', '0:0:0:0:0:0:0:1', '2019-08-10 21:59:01');
INSERT INTO `sys_log` VALUES ('181', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.SysMenuController.update()', '{\"menuId\":69,\"parentId\":66,\"parentName\":\"课程模块\",\"name\":\"课程详情\",\"url\":\"modules/lesson/lessonInfo.html\",\"perms\":\"sys:lesson:info\",\"type\":1,\"icon\":\"fa fa-clone\",\"orderNum\":2}', '38', '0:0:0:0:0:0:0:1', '2019-08-10 22:02:11');
INSERT INTO `sys_log` VALUES ('182', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.SysMenuController.update()', '{\"menuId\":74,\"parentId\":72,\"parentName\":\"门户模块\",\"name\":\"广告列表\",\"url\":\"modules/web/webad.html\",\"perms\":\"sys:webad:list\",\"type\":1,\"icon\":\"fa fa-window-maximize\",\"orderNum\":1}', '128', '0:0:0:0:0:0:0:1', '2019-08-12 12:20:25');
INSERT INTO `sys_log` VALUES ('183', 'admin', '新增友情链接', 'com.debug.coding.fight.server.controller.admin.LinkController.save()', '{\"id\":4,\"name\":\"Debug的oschina博客\",\"url\":\"https://my.oschina.net/steadyjack\",\"isDelete\":0,\"orderBy\":4,\"createTime\":\"Aug 12, 2019 5:22:13 PM\",\"memo\":\"Debug的oschina博客\"}', '100', '0:0:0:0:0:0:0:1', '2019-08-12 17:22:14');
INSERT INTO `sys_log` VALUES ('184', 'admin', '修改友链', 'com.debug.coding.fight.server.controller.admin.LinkController.update()', '{\"id\":2,\"name\":\"程序员天堂~慕课网\",\"url\":\"https://www.imooc.com/\",\"isDelete\":0,\"orderBy\":2,\"createTime\":\"Mar 7, 2019 11:33:12 AM\",\"updateTime\":\"Aug 12, 2019 3:34:54 PM\",\"memo\":\"\"}', '10', '0:0:0:0:0:0:0:1', '2019-08-12 17:22:37');
INSERT INTO `sys_log` VALUES ('185', 'admin', '修改友链', 'com.debug.coding.fight.server.controller.admin.LinkController.update()', '{\"id\":2,\"name\":\"程序员天堂~慕课网\",\"url\":\"https://www.imooc.com/\",\"isDelete\":0,\"orderBy\":2,\"createTime\":\"Mar 7, 2019 11:33:12 AM\",\"updateTime\":\"Aug 12, 2019 5:25:25 PM\",\"memo\":\"\"}', '158', '0:0:0:0:0:0:0:1', '2019-08-12 17:25:25');
INSERT INTO `sys_log` VALUES ('186', 'admin', '修改友链', 'com.debug.coding.fight.server.controller.admin.LinkController.update()', '{\"id\":2,\"name\":\"程序员天堂~Github\",\"url\":\"https://github.com/\",\"isDelete\":0,\"orderBy\":5,\"createTime\":\"Mar 7, 2019 11:33:12 AM\",\"updateTime\":\"Aug 12, 2019 5:25:53 PM\",\"memo\":\"\"}', '70', '0:0:0:0:0:0:0:1', '2019-08-12 17:25:53');
INSERT INTO `sys_log` VALUES ('187', 'admin', '新增友情链接', 'com.debug.coding.fight.server.controller.admin.LinkController.save()', '{\"id\":5,\"name\":\"a\",\"url\":\"a\",\"isDelete\":0,\"orderBy\":0,\"createTime\":\"Aug 12, 2019 5:26:27 PM\"}', '53', '0:0:0:0:0:0:0:1', '2019-08-12 17:26:27');
INSERT INTO `sys_log` VALUES ('188', 'admin', '新增友情链接', 'com.debug.coding.fight.server.controller.admin.LinkController.save()', '{\"id\":6,\"name\":\"b\",\"url\":\"b\",\"isDelete\":0,\"orderBy\":0,\"createTime\":\"Aug 12, 2019 5:26:35 PM\",\"memo\":\"b\"}', '52', '0:0:0:0:0:0:0:1', '2019-08-12 17:26:35');
INSERT INTO `sys_log` VALUES ('189', 'admin', '删除友链', 'com.debug.coding.fight.server.controller.admin.LinkController.delete()', '[6,5]', '92', '0:0:0:0:0:0:0:1', '2019-08-12 17:26:41');
INSERT INTO `sys_log` VALUES ('190', 'admin', '新增友情链接', 'com.debug.coding.fight.server.controller.admin.LinkController.save()', '{\"id\":7,\"name\":\"Debug线上课程地址(CSDN)\",\"url\":\"https://edu.csdn.net/lecturer/2355\",\"isDelete\":0,\"orderBy\":6,\"createTime\":\"Aug 12, 2019 5:27:48 PM\",\"memo\":\"Debug线上课程地址(CSDN)\"}', '94', '0:0:0:0:0:0:0:1', '2019-08-12 17:27:49');
INSERT INTO `sys_log` VALUES ('191', 'admin', '修改友链', 'com.debug.coding.fight.server.controller.admin.LinkController.update()', '{\"id\":3,\"name\":\"码云开源项目地址\",\"url\":\"https://gitee.com/steadyjack\",\"isDelete\":0,\"orderBy\":0,\"createTime\":\"Mar 7, 2019 2:29:26 PM\",\"updateTime\":\"Aug 12, 2019 5:36:50 PM\",\"memo\":\"Debug在码云的开源项目地址\"}', '41', '0:0:0:0:0:0:0:1', '2019-08-12 17:36:50');
INSERT INTO `sys_log` VALUES ('192', 'admin', '修改友链', 'com.debug.coding.fight.server.controller.admin.LinkController.update()', '{\"id\":1,\"name\":\"csdn博客\",\"url\":\"https://blog.csdn.net/u013871100\",\"isDelete\":0,\"orderBy\":1,\"createTime\":\"Mar 7, 2019 11:33:12 AM\",\"updateTime\":\"Aug 12, 2019 5:37:03 PM\",\"memo\":\"debug的csdn博客\"}', '44', '0:0:0:0:0:0:0:1', '2019-08-12 17:37:03');
INSERT INTO `sys_log` VALUES ('193', 'admin', '修改友链', 'com.debug.coding.fight.server.controller.admin.LinkController.update()', '{\"id\":4,\"name\":\"oschina博客\",\"url\":\"https://my.oschina.net/steadyjack\",\"isDelete\":0,\"orderBy\":4,\"createTime\":\"Aug 12, 2019 5:22:14 PM\",\"updateTime\":\"Aug 12, 2019 5:37:10 PM\",\"memo\":\"debug的oschina博客\"}', '46', '0:0:0:0:0:0:0:1', '2019-08-12 17:37:11');
INSERT INTO `sys_log` VALUES ('194', 'admin', '修改友链', 'com.debug.coding.fight.server.controller.admin.LinkController.update()', '{\"id\":2,\"name\":\"程序员天堂~github\",\"url\":\"https://github.com/\",\"isDelete\":0,\"orderBy\":5,\"createTime\":\"Mar 7, 2019 11:33:12 AM\",\"updateTime\":\"Aug 12, 2019 5:25:53 PM\",\"memo\":\"\"}', '4', '0:0:0:0:0:0:0:1', '2019-08-12 17:37:20');
INSERT INTO `sys_log` VALUES ('195', 'admin', '修改友链', 'com.debug.coding.fight.server.controller.admin.LinkController.update()', '{\"id\":2,\"name\":\"程序员天堂-github\",\"url\":\"https://github.com/\",\"isDelete\":0,\"orderBy\":5,\"createTime\":\"Mar 7, 2019 11:33:12 AM\",\"updateTime\":\"Aug 12, 2019 5:37:28 PM\",\"memo\":\"\"}', '93', '0:0:0:0:0:0:0:1', '2019-08-12 17:37:28');
INSERT INTO `sys_log` VALUES ('196', 'admin', '修改友链', 'com.debug.coding.fight.server.controller.admin.LinkController.update()', '{\"id\":7,\"name\":\"线上平台课程地址(CSDN)\",\"url\":\"https://edu.csdn.net/lecturer/2355\",\"isDelete\":0,\"orderBy\":6,\"createTime\":\"Aug 12, 2019 5:27:49 PM\",\"updateTime\":\"Aug 12, 2019 5:37:45 PM\",\"memo\":\"debug线上课程地址(CSDN)\"}', '47', '0:0:0:0:0:0:0:1', '2019-08-12 17:37:45');
INSERT INTO `sys_log` VALUES ('197', 'admin', '修改友链', 'com.debug.coding.fight.server.controller.admin.LinkController.update()', '{\"id\":7,\"name\":\"线上平台课程地址(csdn学院)\",\"url\":\"https://edu.csdn.net/lecturer/2355\",\"isDelete\":0,\"orderBy\":6,\"createTime\":\"Aug 12, 2019 5:27:49 PM\",\"updateTime\":\"Aug 12, 2019 5:37:55 PM\",\"memo\":\"debug线上课程地址(CSDN)\"}', '78', '0:0:0:0:0:0:0:1', '2019-08-12 17:37:55');
INSERT INTO `sys_log` VALUES ('198', 'admin', '新增友情链接', 'com.debug.coding.fight.server.controller.admin.LinkController.save()', '{\"id\":8,\"name\":\"慕课网\",\"url\":\"https://www.imooc.com/learn/1096\",\"isDelete\":0,\"orderBy\":8,\"createTime\":\"Aug 12, 2019 5:50:00 PM\",\"memo\":\"debug发布在慕课网上的免费课程\"}', '143', '0:0:0:0:0:0:0:1', '2019-08-12 17:50:00');
INSERT INTO `sys_log` VALUES ('199', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":10,\"name\":\"企业级员工角色权限管理平台(SpringBoot2.0+Shiro+Vue)\",\"orderBy\":1,\"isActive\":1,\"memo\":\"企业级员工角色权限统一管理平台\",\"createTime\":\"Mar 4, 2019 9:37:33 AM\",\"updateTime\":\"Aug 12, 2019 6:24:23 PM\"}', '119', '0:0:0:0:0:0:0:1', '2019-08-12 18:24:23');
INSERT INTO `sys_log` VALUES ('200', 'admin', '新增博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.save()', '{\"id\":15,\"name\":\"Java通用化工具类开发实战\",\"orderBy\":15,\"memo\":\"Java通用化工具类开发实战\",\"createTime\":\"Aug 12, 2019 6:26:08 PM\"}', '66', '0:0:0:0:0:0:0:1', '2019-08-12 18:26:08');
INSERT INTO `sys_log` VALUES ('201', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":15,\"name\":\"Java通用化工具类开发实战\",\"orderBy\":15,\"isActive\":0,\"memo\":\"Java通用化工具类开发实战\",\"createTime\":\"Aug 12, 2019 6:26:08 PM\",\"updateTime\":\"Aug 12, 2019 6:26:18 PM\"}', '40', '0:0:0:0:0:0:0:1', '2019-08-12 18:26:18');
INSERT INTO `sys_log` VALUES ('202', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":15,\"name\":\"Java通用化工具类开发实战\",\"orderBy\":15,\"isActive\":1,\"memo\":\"Java通用化工具类开发实战\",\"createTime\":\"Aug 12, 2019 6:26:08 PM\",\"updateTime\":\"Aug 12, 2019 6:26:22 PM\"}', '34', '0:0:0:0:0:0:0:1', '2019-08-12 18:26:22');
INSERT INTO `sys_log` VALUES ('203', 'admin', '新增博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.save()', '{\"id\":16,\"name\":\"Shiro权限认证安全框架实战\",\"orderBy\":16,\"isActive\":1,\"memo\":\"Shiro权限认证安全框架实战\",\"createTime\":\"Aug 12, 2019 6:27:28 PM\"}', '44', '0:0:0:0:0:0:0:1', '2019-08-12 18:27:29');
INSERT INTO `sys_log` VALUES ('204', 'admin', '新增博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.save()', '{\"id\":17,\"name\":\"JVM技术栈\",\"orderBy\":170,\"isActive\":1,\"memo\":\"JVM技术栈\",\"createTime\":\"Aug 12, 2019 6:30:08 PM\"}', '123', '0:0:0:0:0:0:0:1', '2019-08-12 18:30:08');
INSERT INTO `sys_log` VALUES ('205', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":5,\"name\":\"JavaSE与Java8知识体系\",\"orderBy\":130,\"isActive\":1,\"memo\":\"JavaSE知识体系\",\"createTime\":\"Mar 4, 2019 9:35:52 AM\",\"updateTime\":\"Aug 12, 2019 6:30:51 PM\"}', '44', '0:0:0:0:0:0:0:1', '2019-08-12 18:30:52');
INSERT INTO `sys_log` VALUES ('206', 'admin', '新增博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.save()', '{\"id\":18,\"name\":\"其他技术栈\",\"orderBy\":200,\"isActive\":1,\"memo\":\"其他技术栈\",\"createTime\":\"Aug 12, 2019 6:31:15 PM\"}', '100', '0:0:0:0:0:0:0:1', '2019-08-12 18:31:15');
INSERT INTO `sys_log` VALUES ('207', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":18,\"name\":\"其他技术栈\",\"orderBy\":2000,\"isActive\":1,\"memo\":\"其他技术栈\",\"createTime\":\"Aug 12, 2019 6:31:15 PM\",\"updateTime\":\"Aug 12, 2019 6:31:20 PM\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-12 18:31:21');
INSERT INTO `sys_log` VALUES ('208', 'admin', '新增博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.save()', '{\"id\":19,\"name\":\"fdas\",\"orderBy\":0,\"isActive\":1,\"memo\":\"fdsa\",\"createTime\":\"Aug 12, 2019 6:31:27 PM\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-12 18:31:28');
INSERT INTO `sys_log` VALUES ('209', 'admin', '删除博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.delete()', '[19]', '40', '0:0:0:0:0:0:0:1', '2019-08-12 18:31:31');
INSERT INTO `sys_log` VALUES ('210', 'admin', '删除博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.delete()', '[19,11]', '3', '0:0:0:0:0:0:0:1', '2019-08-12 18:37:36');
INSERT INTO `sys_log` VALUES ('211', 'admin', '删除博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.delete()', '[19]', '45', '0:0:0:0:0:0:0:1', '2019-08-12 18:37:42');
INSERT INTO `sys_log` VALUES ('212', 'admin', '删除博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.delete()', '[11]', '7', '0:0:0:0:0:0:0:1', '2019-08-12 18:37:50');
INSERT INTO `sys_log` VALUES ('213', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":11,\"name\":\"分布式中间件技术入门与实战\",\"orderBy\":60,\"isActive\":0,\"memo\":\"分布式中间件技术入门与实战\",\"createTime\":\"Mar 4, 2019 9:37:33 AM\",\"updateTime\":\"Aug 12, 2019 6:38:11 PM\"}', '221', '0:0:0:0:0:0:0:1', '2019-08-12 18:38:12');
INSERT INTO `sys_log` VALUES ('214', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":11,\"name\":\"分布式中间件技术入门与实战\",\"orderBy\":60,\"isActive\":1,\"memo\":\"分布式中间件技术入门与实战\",\"createTime\":\"Mar 4, 2019 9:37:33 AM\",\"updateTime\":\"Aug 12, 2019 6:38:24 PM\"}', '130', '0:0:0:0:0:0:0:1', '2019-08-12 18:38:25');
INSERT INTO `sys_log` VALUES ('215', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":1,\"name\":\"微服务项目实战(SpringBoot)\",\"orderBy\":0,\"isActive\":1,\"memo\":\"微服务项目实战(SpringBoot)\",\"createTime\":\"Aug 12, 2019 10:46:53 PM\"}', '108', '0:0:0:0:0:0:0:1', '2019-08-12 22:46:53');
INSERT INTO `sys_log` VALUES ('216', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":1,\"name\":\"微服务项目实战(SpringBoot)\",\"orderBy\":10,\"isActive\":1,\"memo\":\"微服务项目实战(SpringBoot)\",\"createTime\":\"Aug 12, 2019 10:46:53 PM\",\"updateTime\":\"Aug 12, 2019 10:47:06 PM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-12 22:47:07');
INSERT INTO `sys_log` VALUES ('217', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":2,\"name\":\" 分布式中间件技术实战\",\"orderBy\":20,\"isActive\":1,\"memo\":\"分布式中间件技术实战\",\"createTime\":\"Aug 12, 2019 10:48:17 PM\"}', '45', '0:0:0:0:0:0:0:1', '2019-08-12 22:48:18');
INSERT INTO `sys_log` VALUES ('218', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":2,\"name\":\" 分布式中间件技术实战\",\"orderBy\":20,\"isActive\":1,\"memo\":\"分布式中间件技术实战：Redis RabbitMQ ZooKeeper RabbitMQ Dubbo Shiro....\",\"createTime\":\"Aug 12, 2019 10:48:18 PM\",\"updateTime\":\"Aug 12, 2019 10:48:37 PM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-12 22:48:37');
INSERT INTO `sys_log` VALUES ('219', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":3,\"name\":\"分布式项目实战\",\"orderBy\":30,\"isActive\":1,\"memo\":\"分布式项目实战\",\"createTime\":\"Aug 12, 2019 10:49:31 PM\"}', '47', '0:0:0:0:0:0:0:1', '2019-08-12 22:49:31');
INSERT INTO `sys_log` VALUES ('220', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":4,\"name\":\"消息中间件RabbitMQ技术实战\",\"orderBy\":40,\"isActive\":1,\"memo\":\"消息中间件RabbitMQ\",\"createTime\":\"Aug 12, 2019 10:49:49 PM\"}', '52', '0:0:0:0:0:0:0:1', '2019-08-12 22:49:49');
INSERT INTO `sys_log` VALUES ('221', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":5,\"name\":\"分布式锁技术实战\",\"orderBy\":50,\"isActive\":1,\"memo\":\"分布式锁技术实战：Redis、ZooKeeper、Redisson、数据库级别锁\",\"createTime\":\"Aug 12, 2019 10:50:27 PM\"}', '42', '0:0:0:0:0:0:0:1', '2019-08-12 22:50:27');
INSERT INTO `sys_log` VALUES ('222', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":6,\"name\":\"分布式服务调度框架Dubbo技术实战\",\"orderBy\":60,\"isActive\":1,\"memo\":\"分布式服务调度框架Dubbo技术实战\",\"createTime\":\"Aug 12, 2019 10:50:56 PM\"}', '44', '0:0:0:0:0:0:0:1', '2019-08-12 22:50:56');
INSERT INTO `sys_log` VALUES ('223', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":2,\"name\":\"分布式中间件技术实战\",\"orderBy\":20,\"isActive\":1,\"memo\":\"分布式中间件技术实战：Redis RabbitMQ ZooKeeper RabbitMQ Dubbo Shiro....\",\"createTime\":\"Aug 12, 2019 10:48:18 PM\",\"updateTime\":\"Aug 12, 2019 10:51:03 PM\"}', '32', '0:0:0:0:0:0:0:1', '2019-08-12 22:51:04');
INSERT INTO `sys_log` VALUES ('224', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":7,\"name\":\"缓存中间件Redis\\u0026amp;Redisson技术实战\",\"orderBy\":70,\"isActive\":1,\"memo\":\"缓存中间件Redis\\u0026amp;Redisson技术实战\",\"createTime\":\"Aug 12, 2019 10:51:23 PM\"}', '128', '0:0:0:0:0:0:0:1', '2019-08-12 22:51:24');
INSERT INTO `sys_log` VALUES ('225', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":8,\"name\":\"SSM整合基础开发实战\",\"orderBy\":80,\"isActive\":1,\"memo\":\"SSM整合基础开发实战\",\"createTime\":\"Aug 12, 2019 10:51:51 PM\"}', '44', '0:0:0:0:0:0:0:1', '2019-08-12 22:51:52');
INSERT INTO `sys_log` VALUES ('226', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":8,\"name\":\"SSM整合基础开发实战\",\"orderBy\":80,\"isActive\":1,\"memo\":\"SSM整合基础开发实战：Spring+Springmvc+Mybatis\",\"createTime\":\"Aug 12, 2019 10:51:52 PM\",\"updateTime\":\"Aug 12, 2019 10:52:05 PM\"}', '42', '0:0:0:0:0:0:0:1', '2019-08-12 22:52:05');
INSERT INTO `sys_log` VALUES ('227', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":9,\"name\":\"SSM整合开发项目实战\",\"orderBy\":90,\"isActive\":1,\"memo\":\"SSM整合开发项目实战：以实际的项目实战相关技术栈\",\"createTime\":\"Aug 12, 2019 10:52:29 PM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-12 22:52:30');
INSERT INTO `sys_log` VALUES ('228', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":10,\"name\":\"企业级项目开发实战\",\"orderBy\":100,\"isActive\":1,\"memo\":\"企业级项目开发实战\",\"createTime\":\"Aug 12, 2019 10:57:31 PM\"}', '115', '0:0:0:0:0:0:0:1', '2019-08-12 22:57:32');
INSERT INTO `sys_log` VALUES ('229', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":11,\"name\":\"微服务SpringBoot技术栈入门到实战\",\"orderBy\":110,\"isActive\":1,\"memo\":\"微服务SpringBoot技术栈入门到实战\",\"createTime\":\"Aug 12, 2019 10:58:14 PM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-12 22:58:15');
INSERT INTO `sys_log` VALUES ('230', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":11,\"name\":\"微服务SpringBoot技术栈入门到实战\",\"orderBy\":11,\"isActive\":1,\"memo\":\"微服务SpringBoot技术栈入门到实战\",\"createTime\":\"Aug 12, 2019 10:58:15 PM\",\"updateTime\":\"Aug 12, 2019 10:58:26 PM\"}', '46', '0:0:0:0:0:0:0:1', '2019-08-12 22:58:27');
INSERT INTO `sys_log` VALUES ('231', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":1,\"name\":\"微服务项目开发实战(SpringBoot)\",\"orderBy\":10,\"isActive\":1,\"memo\":\"微服务项目实战(SpringBoot)\",\"createTime\":\"Aug 12, 2019 10:46:53 PM\",\"updateTime\":\"Aug 12, 2019 10:58:59 PM\"}', '46', '0:0:0:0:0:0:0:1', '2019-08-12 22:59:00');
INSERT INTO `sys_log` VALUES ('232', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":11,\"name\":\"微服务SpringBoot技术栈入门到应用\",\"orderBy\":11,\"isActive\":1,\"memo\":\"微服务SpringBoot技术栈入门到应用\",\"createTime\":\"Aug 12, 2019 10:58:15 PM\",\"updateTime\":\"Aug 12, 2019 10:59:21 PM\"}', '36', '0:0:0:0:0:0:0:1', '2019-08-12 22:59:21');
INSERT INTO `sys_log` VALUES ('233', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":3,\"name\":\"分布式项目开发实战\",\"orderBy\":30,\"isActive\":1,\"memo\":\"分布式项目开发实战\",\"createTime\":\"Aug 12, 2019 10:49:31 PM\",\"updateTime\":\"Aug 12, 2019 10:59:54 PM\"}', '44', '0:0:0:0:0:0:0:1', '2019-08-12 22:59:54');
INSERT INTO `sys_log` VALUES ('234', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":12,\"name\":\"Java技术栈开发\",\"orderBy\":110,\"isActive\":1,\"memo\":\"Java技术栈开发\",\"createTime\":\"Aug 12, 2019 11:00:43 PM\"}', '42', '0:0:0:0:0:0:0:1', '2019-08-12 23:00:43');
INSERT INTO `sys_log` VALUES ('235', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":13,\"name\":\"前后端分离开发实战\",\"orderBy\":120,\"isActive\":1,\"memo\":\"前后端分离开发实战\",\"createTime\":\"Aug 12, 2019 11:00:54 PM\"}', '29', '0:0:0:0:0:0:0:1', '2019-08-12 23:00:54');
INSERT INTO `sys_log` VALUES ('236', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":14,\"name\":\"SpringBoot+Vue项目开发实战\",\"orderBy\":130,\"isActive\":1,\"memo\":\"SpringBoot+Vue项目开发实战\",\"createTime\":\"Aug 12, 2019 11:01:15 PM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-12 23:01:16');
INSERT INTO `sys_log` VALUES ('237', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":15,\"name\":\"高并发技术栈学习与应用\",\"orderBy\":150,\"isActive\":1,\"memo\":\"高并发技术栈学习与应用\",\"createTime\":\"Aug 12, 2019 11:02:09 PM\"}', '61', '0:0:0:0:0:0:0:1', '2019-08-12 23:02:10');
INSERT INTO `sys_log` VALUES ('238', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":16,\"name\":\"秒杀系统技术实战\",\"orderBy\":160,\"isActive\":1,\"memo\":\"秒杀系统技术实战\",\"createTime\":\"Aug 12, 2019 11:03:21 PM\"}', '44', '0:0:0:0:0:0:0:1', '2019-08-12 23:03:21');
INSERT INTO `sys_log` VALUES ('239', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":17,\"name\":\"企业级管理平台开发实战\",\"orderBy\":170,\"isActive\":1,\"memo\":\"企业级管理平台开发实战\",\"createTime\":\"Aug 12, 2019 11:04:45 PM\"}', '51', '0:0:0:0:0:0:0:1', '2019-08-12 23:04:46');
INSERT INTO `sys_log` VALUES ('240', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":18,\"name\":\"毕业设计\",\"orderBy\":190,\"isActive\":1,\"memo\":\"毕业设计\",\"createTime\":\"Aug 12, 2019 11:05:13 PM\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-12 23:05:14');
INSERT INTO `sys_log` VALUES ('241', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":18,\"name\":\"毕业设计\",\"orderBy\":180,\"isActive\":1,\"memo\":\"毕业设计\",\"createTime\":\"Aug 12, 2019 11:05:14 PM\",\"updateTime\":\"Aug 12, 2019 11:05:18 PM\"}', '40', '0:0:0:0:0:0:0:1', '2019-08-12 23:05:19');
INSERT INTO `sys_log` VALUES ('242', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":19,\"name\":\"C#企业级应用开发实战\",\"orderBy\":200,\"isActive\":1,\"memo\":\"C#企业级应用开发实战\",\"createTime\":\"Aug 12, 2019 11:05:45 PM\"}', '41', '0:0:0:0:0:0:0:1', '2019-08-12 23:05:46');
INSERT INTO `sys_log` VALUES ('243', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":20,\"name\":\"Java毕业设计\",\"orderBy\":180,\"isActive\":1,\"memo\":\"Java毕业设计\",\"createTime\":\"Aug 12, 2019 11:06:08 PM\"}', '41', '0:0:0:0:0:0:0:1', '2019-08-12 23:06:08');
INSERT INTO `sys_log` VALUES ('244', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":20,\"name\":\"Java毕业设计\",\"orderBy\":190,\"isActive\":1,\"memo\":\"Java毕业设计\",\"createTime\":\"Aug 12, 2019 11:06:08 PM\",\"updateTime\":\"Aug 12, 2019 11:06:25 PM\"}', '35', '0:0:0:0:0:0:0:1', '2019-08-12 23:06:25');
INSERT INTO `sys_log` VALUES ('245', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":21,\"name\":\"JavaWeb毕业设计\",\"orderBy\":210,\"isActive\":1,\"memo\":\"JavaWeb毕业设计\",\"createTime\":\"Aug 12, 2019 11:06:35 PM\"}', '40', '0:0:0:0:0:0:0:1', '2019-08-12 23:06:35');
INSERT INTO `sys_log` VALUES ('246', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":21,\"name\":\"JavaWeb毕业设计\",\"orderBy\":191,\"isActive\":1,\"memo\":\"JavaWeb毕业设计\",\"createTime\":\"Aug 12, 2019 11:06:35 PM\",\"updateTime\":\"Aug 12, 2019 11:06:49 PM\"}', '40', '0:0:0:0:0:0:0:1', '2019-08-12 23:06:50');
INSERT INTO `sys_log` VALUES ('247', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":22,\"name\":\"ssm毕业设计\",\"orderBy\":200,\"isActive\":1,\"memo\":\"ssm毕业设计：spring+springmvc+mybatis\",\"createTime\":\"Aug 12, 2019 11:07:54 PM\"}', '51', '0:0:0:0:0:0:0:1', '2019-08-12 23:07:54');
INSERT INTO `sys_log` VALUES ('248', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":22,\"name\":\"SSM毕业设计\",\"orderBy\":200,\"isActive\":1,\"memo\":\"SSM毕业设计：spring+springmvc+mybatis\",\"createTime\":\"Aug 12, 2019 11:07:54 PM\"}', '3', '0:0:0:0:0:0:0:1', '2019-08-12 23:08:09');
INSERT INTO `sys_log` VALUES ('249', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":22,\"name\":\"SSM毕业设计2\",\"orderBy\":200,\"isActive\":1,\"memo\":\"SSM毕业设计：spring+springmvc+mybatis\",\"createTime\":\"Aug 12, 2019 11:07:54 PM\",\"updateTime\":\"Aug 12, 2019 11:08:14 PM\"}', '49', '0:0:0:0:0:0:0:1', '2019-08-12 23:08:15');
INSERT INTO `sys_log` VALUES ('250', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":22,\"name\":\"SSM毕业设计\",\"orderBy\":200,\"isActive\":1,\"memo\":\"SSM毕业设计：spring+springmvc+mybatis\",\"createTime\":\"Aug 12, 2019 11:07:54 PM\",\"updateTime\":\"Aug 12, 2019 11:08:18 PM\"}', '50', '0:0:0:0:0:0:0:1', '2019-08-12 23:08:19');
INSERT INTO `sys_log` VALUES ('251', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":22,\"name\":\"SSM毕业设计\",\"orderBy\":192,\"isActive\":1,\"memo\":\"SSM毕业设计：spring+springmvc+mybatis\",\"createTime\":\"Aug 12, 2019 11:07:54 PM\",\"updateTime\":\"Aug 12, 2019 11:08:25 PM\"}', '92', '0:0:0:0:0:0:0:1', '2019-08-12 23:08:26');
INSERT INTO `sys_log` VALUES ('252', 'admin', '新增课程类型', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.save()', '{\"id\":23,\"name\":\"fas\",\"orderBy\":0,\"isActive\":1,\"memo\":\"fda\",\"createTime\":\"Aug 12, 2019 11:08:56 PM\"}', '63', '0:0:0:0:0:0:0:1', '2019-08-12 23:08:57');
INSERT INTO `sys_log` VALUES ('253', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":23,\"name\":\"fas22\",\"orderBy\":22,\"isActive\":1,\"memo\":\"fda22\",\"createTime\":\"Aug 12, 2019 11:08:57 PM\",\"updateTime\":\"Aug 12, 2019 11:09:06 PM\"}', '49', '0:0:0:0:0:0:0:1', '2019-08-12 23:09:07');
INSERT INTO `sys_log` VALUES ('254', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":23,\"name\":\"fas22\",\"orderBy\":22,\"isActive\":0,\"memo\":\"fda22\",\"createTime\":\"Aug 12, 2019 11:08:57 PM\",\"updateTime\":\"Aug 12, 2019 11:09:11 PM\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-12 23:09:12');
INSERT INTO `sys_log` VALUES ('255', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[23]', '42', '0:0:0:0:0:0:0:1', '2019-08-12 23:09:15');
INSERT INTO `sys_log` VALUES ('256', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"title\":\"Java秒杀系统-第一篇\",\"digest\":\"这是Java秒杀系统-第一篇\",\"label\":\"秒杀系统;java;spring boot;\",\"status\":1,\"userId\":1,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"Aug 13, 2019 11:04:20 AM\",\"content\":\"内容如下：Java秒杀系统-第一篇\",\"memo\":\"Java秒杀系统-第一篇\"}', '121', '0:0:0:0:0:0:0:1', '2019-08-13 11:04:20');
INSERT INTO `sys_log` VALUES ('257', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"title\":\"d\",\"digest\":\"a\",\"label\":\"f\",\"status\":1,\"userId\":1,\"isDelete\":0,\"orderBy\":0,\"createTime\":\"Aug 13, 2019 11:08:15 AM\",\"content\":\"c\",\"memo\":\"e\"}', '32336', '0:0:0:0:0:0:0:1', '2019-08-13 11:08:47');
INSERT INTO `sys_log` VALUES ('258', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":7,\"title\":\"d\",\"digest\":\"a\",\"label\":\"f\",\"status\":1,\"userId\":1,\"isDelete\":0,\"orderBy\":0,\"createTime\":\"Aug 13, 2019 11:09:16 AM\",\"content\":\"c\",\"memo\":\"e\"}', '2271', '0:0:0:0:0:0:0:1', '2019-08-13 11:09:18');
INSERT INTO `sys_log` VALUES ('259', 'admin', '删除博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '[7]', '46', '127.0.0.1', '2019-08-13 11:11:59');
INSERT INTO `sys_log` VALUES ('260', 'admin', '删除博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '[]', '1', '0:0:0:0:0:0:0:1', '2019-08-13 11:14:06');
INSERT INTO `sys_log` VALUES ('261', 'admin', '删除博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '[]', '4958', '0:0:0:0:0:0:0:1', '2019-08-13 11:15:09');
INSERT INTO `sys_log` VALUES ('262', 'admin', '删除博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '[7]', '4380', '0:0:0:0:0:0:0:1', '2019-08-13 11:17:53');
INSERT INTO `sys_log` VALUES ('263', 'admin', '删除博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '[7]', '153', '0:0:0:0:0:0:0:1', '2019-08-13 11:18:51');
INSERT INTO `sys_log` VALUES ('264', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":8,\"title\":\"fda\",\"digest\":\"fdsa\",\"label\":\"fda\",\"status\":1,\"userId\":1,\"isDelete\":0,\"orderBy\":0,\"createTime\":\"Aug 13, 2019 11:38:30 AM\",\"content\":\"fdsa\",\"memo\":\"fds\",\"typeIds\":[1,2,3,5,4,10]}', '18517', '0:0:0:0:0:0:0:1', '2019-08-13 11:38:49');
INSERT INTO `sys_log` VALUES ('265', 'admin', '删除博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '[8]', '5346', '0:0:0:0:0:0:0:1', '2019-08-13 11:52:01');
INSERT INTO `sys_log` VALUES ('266', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":9,\"title\":\"Java秒杀系统第一篇\",\"digest\":\"这是Java秒杀系统第一篇\",\"label\":\"java;秒杀;高并发;spring boot;微服务;redis;rabbitmq\",\"status\":1,\"userId\":1,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"Aug 13, 2019 11:53:02 AM\",\"content\":\"正文：Java秒杀系统第一篇\",\"memo\":\"Java秒杀系统第一篇\",\"typeIds\":[1,2]}', '2541', '0:0:0:0:0:0:0:1', '2019-08-13 11:53:05');
INSERT INTO `sys_log` VALUES ('267', 'admin', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '9', '84', '0:0:0:0:0:0:0:1', '2019-08-13 15:28:57');
INSERT INTO `sys_log` VALUES ('268', 'admin', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"title\":\"Java秒杀系统第一篇\",\"digest\":\"这是Java秒杀系统第一篇\",\"label\":\"java;秒杀;高并发;spring boot;微服务;redis;rabbitmq\",\"releaseDate\":\"Aug 13, 2019 12:00:00 AM\",\"status\":2,\"userId\":1,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"Aug 13, 2019 11:53:03 AM\",\"updateTime\":\"Aug 13, 2019 5:45:02 PM\",\"content\":\"正文：Java秒杀系统第一篇\",\"readTotal\":0,\"memo\":\"Java秒杀系统第一篇\",\"typeIds\":[1,2]}', '116', '0:0:0:0:0:0:0:1', '2019-08-13 17:45:02');
INSERT INTO `sys_log` VALUES ('269', 'admin', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"title\":\"Java秒杀系统第一篇2\",\"digest\":\"这是Java秒杀系统第一篇2\",\"label\":\"java;秒杀;高并发;spring boot;微服务;redis;rabbitmq;2\",\"releaseDate\":\"Aug 13, 2019 12:00:00 AM\",\"status\":2,\"userId\":1,\"isDelete\":0,\"orderBy\":102,\"createTime\":\"Aug 13, 2019 11:53:03 AM\",\"updateTime\":\"Aug 13, 2019 5:45:37 PM\",\"content\":\"正文：Java秒杀系统第一篇2\",\"readTotal\":0,\"memo\":\"Java秒杀系统第一篇\",\"typeIds\":[1,2,3,4,5,7,6,8,9,10,11,14,13,12,16,17,18]}', '100', '0:0:0:0:0:0:0:1', '2019-08-13 17:45:38');
INSERT INTO `sys_log` VALUES ('270', 'admin', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"title\":\"Java秒杀系统第一篇\",\"digest\":\"这是Java秒杀系统第一篇\",\"label\":\"java;秒杀;高并发;spring boot;微服务;redis;rabbitmq\",\"releaseDate\":\"Aug 13, 2019 12:00:00 AM\",\"status\":2,\"userId\":1,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"Aug 13, 2019 11:53:03 AM\",\"updateTime\":\"Aug 13, 2019 5:45:57 PM\",\"content\":\"正文：Java秒杀系统第一篇\",\"readTotal\":0,\"memo\":\"Java秒杀系统第一篇\",\"typeIds\":[1]}', '45', '0:0:0:0:0:0:0:1', '2019-08-13 17:45:57');
INSERT INTO `sys_log` VALUES ('271', 'admin', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '9', '89', '0:0:0:0:0:0:0:1', '2019-08-13 17:47:14');
INSERT INTO `sys_log` VALUES ('272', 'admin', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"title\":\"Java秒杀系统第一篇\",\"digest\":\"这是Java秒杀系统第一篇\",\"label\":\"java;秒杀;高并发;spring boot;微服务;redis;rabbitmq\",\"releaseDate\":\"Aug 13, 2019 12:00:00 AM\",\"status\":2,\"userId\":1,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"Aug 13, 2019 11:53:03 AM\",\"updateTime\":\"Aug 13, 2019 6:08:14 PM\",\"content\":\"正文：Java秒杀系统第一篇\",\"readTotal\":0,\"memo\":\"Java秒杀系统第一篇\",\"typeIds\":[1]}', '130', '0:0:0:0:0:0:0:1', '2019-08-13 18:08:15');
INSERT INTO `sys_log` VALUES ('273', 'admin', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"title\":\"Java秒杀系统第一篇\",\"digest\":\"这是Java秒杀系统第一篇2\",\"label\":\"java;秒杀;高并发;spring boot;微服务;redis;rabbitmq\",\"releaseDate\":\"Aug 13, 2019 12:00:00 AM\",\"status\":2,\"userId\":1,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"Aug 13, 2019 11:53:03 AM\",\"updateTime\":\"Aug 13, 2019 6:08:20 PM\",\"content\":\"正文：Java秒杀系统第一篇\",\"readTotal\":0,\"memo\":\"Java秒杀系统第一篇\",\"typeIds\":[1]}', '71', '0:0:0:0:0:0:0:1', '2019-08-13 18:08:21');
INSERT INTO `sys_log` VALUES ('274', 'admin', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"title\":\"Java秒杀系统第一篇\",\"digest\":\"这是Java秒杀系统第一篇\",\"label\":\"java;秒杀;高并发;spring boot;微服务;redis;rabbitmq\",\"releaseDate\":\"Aug 13, 2019 12:00:00 AM\",\"status\":2,\"userId\":1,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"Aug 13, 2019 11:53:03 AM\",\"updateTime\":\"Aug 13, 2019 6:08:25 PM\",\"content\":\"正文：Java秒杀系统第一篇\",\"readTotal\":0,\"memo\":\"Java秒杀系统第一篇\",\"typeIds\":[1]}', '71', '0:0:0:0:0:0:0:1', '2019-08-13 18:08:26');
INSERT INTO `sys_log` VALUES ('275', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":10,\"title\":\"fas\",\"digest\":\"fdsaf\",\"label\":\"f\",\"status\":1,\"userId\":1,\"isDelete\":0,\"orderBy\":0,\"createTime\":\"Aug 13, 2019 6:08:41 PM\",\"content\":\"fdsa\",\"memo\":\"fdsa\",\"typeIds\":[2,1]}', '2659', '0:0:0:0:0:0:0:1', '2019-08-13 18:08:45');
INSERT INTO `sys_log` VALUES ('276', 'admin', '删除博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '[10]', '33', '0:0:0:0:0:0:0:1', '2019-08-13 18:08:56');
INSERT INTO `sys_log` VALUES ('277', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":11,\"title\":\"重磅发布- Java秒杀系统的设计与实战视频教程（SpringBoot版）\",\"digest\":\"历经一个多月的时间，debug亲自录制的“Java商城秒杀系统的设计与实战视频教程（SpringBoot版）”终于完成了！在本课程中，debug真正的将之前所讲解的相关技术融入到了本课程中，即本课程所介绍的“秒杀系统”是一个真正意义上的项目，主要介绍了商城平台举办商品秒杀活动期间所涉及的相关业务。\",\"label\":\"秒杀系统;java;springboot;高并发\",\"status\":1,\"userId\":1,\"isDelete\":0,\"orderBy\":6,\"createTime\":\"Aug 14, 2019 10:28:29 AM\",\"content\":\"值得介绍的是，本课程在技术栈层面涵盖了前端和后端的大部分常用技术，包括Spring Boot、Spring MVC、Mybatis、Redis、ZooKeeper、RabbitMQ、Redisson、分布式锁、分布式唯一ID生成服务/雪花算法、邮件服务、Shiro登录认证服务以及Bootstrap、JQuery等等。\",\"memo\":\"技术列表：Spring Boot、Spring MVC、Mybatis、缓存中间件Redis、服务协调调度中间件ZooKeeper、消息中间件RabbitMQ、综合性质的中间件Redisson、分布式锁、分布式唯一ID生成服务/雪花算法、邮件服务、权限认证授权矿建Shiro的登录认证服务以及Bootstrap、JQuery等等。\",\"typeIds\":[8,1]}', '148', '0:0:0:0:0:0:0:1', '2019-08-14 10:28:30');
INSERT INTO `sys_log` VALUES ('278', 'admin', '删除菜单', 'com.debug.coding.fight.server.controller.admin.SysMenuController.delete()', '44', '105', '0:0:0:0:0:0:0:1', '2019-08-14 16:41:51');
INSERT INTO `sys_log` VALUES ('279', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":11,\"content\":\"值得介绍的是，本课程在技术栈层面涵盖了前端和后端的大部分常用技术，包括Spring Boot、Spring MVC、Mybatis、Redis、ZooKeeper、RabbitMQ、Redisson、分布式锁、分布式唯一ID生成服务/雪花算法、邮件服务、Shiro登录认证服务以及Bootstrap、JQuery等等。//商品秒杀核心业务逻辑的处理-mysql的优化@Overridepublic Boolean killItemV2(Integer killId, Integer userId) throws Exception {    Boolean result\\u003dfalse;    //TODO:判断当前用户是否已经抢购过当前商品    if (itemKillSuccessMapper.countByKillUserId(killId,userId) \\u0026lt;\\u003d 0){        //A  查询待秒杀商品详情        ItemKill itemKill\\u003ditemKillMapper.selectByIdV2(killId);        //TODO:判断是否可以被秒杀canKill\\u003d1?        if (itemKill!\\u003dnull \\u0026amp;\\u0026amp; 1\\u003d\\u003ditemKill.getCanKill() \\u0026amp;\\u0026amp; itemKill.getTotal()\\u0026gt;0){            //B  扣减库存-减一            int res\\u003ditemKillMapper.updateKillItemV2(killId);            //TODO:扣减是否成功?是-生成秒杀成功的订单，同时通知用户秒杀成功的消息            if (res\\u0026gt;0){                commonRecordKillSuccessInfo(itemKill,userId);                result\\u003dtrue;            }        }    }else{        throw new Exception(\\\"您已经抢购过该商品了!\\\");    }    return result;}\"}', '81', '0:0:0:0:0:0:0:1', '2019-08-14 17:12:02');
INSERT INTO `sys_log` VALUES ('280', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":11,\"content\":\"这是相应的实现代码：//商品秒杀核心业务逻辑的处理-mysql的优化@Overridepublic Boolean killItemV2(Integer killId, Integer userId) throws Exception {    Boolean result\\u003dfalse;    //TODO:判断当前用户是否已经抢购过当前商品    if (itemKillSuccessMapper.countByKillUserId(killId,userId) \\u0026lt;\\u003d 0){        //A  查询待秒杀商品详情        ItemKill itemKill\\u003ditemKillMapper.selectByIdV2(killId);        //TODO:判断是否可以被秒杀canKill\\u003d1?        if (itemKill!\\u003dnull \\u0026amp;\\u0026amp; 1\\u003d\\u003ditemKill.getCanKill() \\u0026amp;\\u0026amp; itemKill.getTotal()\\u0026gt;0){            //B  扣减库存-减一            int res\\u003ditemKillMapper.updateKillItemV2(killId);            //TODO:扣减是否成功?是-生成秒杀成功的订单，同时通知用户秒杀成功的消息            if (res\\u0026gt;0){                commonRecordKillSuccessInfo(itemKill,userId);                result\\u003dtrue;            }        }    }else{        throw new Exception(\\\"您已经抢购过该商品了!\\\");    }    return result;}\"}', '19680', '0:0:0:0:0:0:0:1', '2019-08-14 17:14:25');
INSERT INTO `sys_log` VALUES ('281', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":11,\"content\":\"\\u003ch3 id\\u003d\\\"h3_1\\\"\\u003e\\u003cstrong style\\u003d\\\"font-size: medium;\\\"\\u003e摘要：\\u003c/strong\\u003e\\u003c/h3\\u003e\\u003cp\\u003e本篇博文是“Java秒杀系统实战系列文章”的第十三篇，从本篇文章开始我们将进入“秒杀代码优化”环节，本文将首先从数据库级别Sql的优化入手，结合调整秒杀相关的部分核心代码，实现初步的优化！\\u003c/p\\u003e\\u003ch3 id\\u003d\\\"h3_2\\\"\\u003e\\u003cstrong style\\u003d\\\"font-size: medium;\\\"\\u003e内容：\\u003c/strong\\u003e\\u003c/h3\\u003e\\u003cp\\u003e上篇文章我们暴露出了“秒杀接口”在面对高并发请求的场景下所出现的“超卖”、“重复秒杀”等问题，并对相应的问题进行了分析，然后就没有然后了……（事了拂衣去！）\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan id\\u003d\\\"OSC_h3_2\\\"\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e问题既然落在我们的手里，那么身为一名程序猿，那是没有理由回避的。通过分析该“秒杀接口”的核心代码，可以发现在数据库层面，其涉及的Sql我们还是可以动一动手脚的！其调整后的“秒杀核心业务逻辑”的完整源代码如下所示：\\u003c/p\\u003e\\u003cpre\\u003e\\u003ccode\\u003e//商品秒杀核心业务逻辑的处理-mysql的优化\\u003cbr\\u003e@Override\\u003cbr\\u003epublic Boolean killItemV2(Integer killId, Integer userId) throws Exception {\\u003cbr\\u003e    Boolean result\\u003dfalse;\\u003cbr\\u003e\\u003cbr\\u003e    //TODO:判断当前用户是否已经抢购过当前商品\\u003cbr\\u003e    if (itemKillSuccessMapper.countByKillUserId(killId,userId) \\u0026lt;\\u003d 0){\\u003cbr\\u003e        //A  查询待秒杀商品详情\\u003cbr\\u003e        ItemKill itemKill\\u003ditemKillMapper.selectByIdV2(killId);\\u003cbr\\u003e\\u003cbr\\u003e        //TODO:判断是否可以被秒杀canKill\\u003d1?\\u003cbr\\u003e        if (itemKill!\\u003dnull \\u0026amp;\\u0026amp; 1\\u003d\\u003ditemKill.getCanKill() \\u0026amp;\\u0026amp; itemKill.getTotal()\\u0026gt;0){\\u003cbr\\u003e            //B  扣减库存-减一\\u003cbr\\u003e            int res\\u003ditemKillMapper.updateKillItemV2(killId);\\u003cbr\\u003e\\u003cbr\\u003e            //TODO:扣减是否成功?是-生成秒杀成功的订单，同时通知用户秒杀成功的消息\\u003cbr\\u003e            if (res\\u0026gt;0){\\u003cbr\\u003e                commonRecordKillSuccessInfo(itemKill,userId);\\u003cbr\\u003e                result\\u003dtrue;\\u003cbr\\u003e            }\\u003cbr\\u003e        }\\u003cbr\\u003e    }else{\\u003cbr\\u003e        throw new Exception(\\\"您已经抢购过该商品了!\\\");\\u003cbr\\u003e    }\\u003cbr\\u003e    return result;\\u003cbr\\u003e}\\u003c/code\\u003e\\u003c/pre\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e首先是对于 注释A 那里的调整，即在获取“秒杀商品详情”时，我们限定了“可秒杀商品的数量total需要大于0”，其对应的代码为：itemKillMapper.updateKillItemV2(killId);\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74); font-weight: bold;\\\"\\u003e完整的动态Sql\\u003c/span\\u003e如下所示：\\u0026nbsp;\\u0026nbsp;\\u003cbr\\u003e\\u003c/p\\u003e\\u003cpre\\u003e\\u003ccode\\u003e\\u0026lt;!--获取秒杀详情V2--\\u0026gt;\\u003cbr\\u003e\\u0026lt;select id\\u003d\\\"selectByIdV2\\\" resultType\\u003d\\\"com.debug.kill.model.entity.ItemKill\\\"\\u0026gt;\\u003cbr\\u003e  SELECT\\u003cbr\\u003e    a.*,\\u003cbr\\u003e    b.name AS itemName,\\u003cbr\\u003e    (CASE WHEN (now() BETWEEN a.start_time AND a.end_time)\\u003cbr\\u003e      THEN 1\\u003cbr\\u003e     ELSE 0\\u003cbr\\u003e     END)  AS canKill\\u003cbr\\u003e  FROM item_kill AS a LEFT JOIN item AS b ON b.id \\u003d a.item_id\\u003cbr\\u003e  WHERE a.is_active \\u003d 1 AND a.id \\u003d#{id} AND a.total\\u0026gt;0\\u003cbr\\u003e\\u0026lt;/select\\u0026gt;\\u003c/code\\u003e\\u003c/pre\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '3382', '0:0:0:0:0:0:0:1', '2019-08-14 17:17:57');
INSERT INTO `sys_log` VALUES ('282', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":11,\"content\":\"\\u003ch3 id\\u003d\\\"h3_1\\\"\\u003e\\u003cstrong style\\u003d\\\"font-size: medium;\\\"\\u003e摘要：\\u003c/strong\\u003e\\u003c/h3\\u003e\\u003cp\\u003e本篇博文是“Java秒杀系统实战系列文章”的第十三篇，从本篇文章开始我们将进入“秒杀代码优化”环节，本文将首先从数据库级别Sql的优化入手，结合调整秒杀相关的部分核心代码，实现初步的优化！\\u003c/p\\u003e\\u003ch3 id\\u003d\\\"h3_2\\\"\\u003e\\u003cstrong style\\u003d\\\"font-size: medium;\\\"\\u003e内容：\\u003c/strong\\u003e\\u003c/h3\\u003e\\u003cp\\u003e上篇文章我们暴露出了“秒杀接口”在面对高并发请求的场景下所出现的“超卖”、“重复秒杀”等问题，并对相应的问题进行了分析，然后就没有然后了……（事了拂衣去！）\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan id\\u003d\\\"OSC_h3_2\\\"\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e问题既然落在我们的手里，那么身为一名程序猿，那是没有理由回避的。通过分析该“秒杀接口”的核心代码，可以发现在数据库层面，其涉及的Sql我们还是可以动一动手脚的！其调整后的“秒杀核心业务逻辑”的完整源代码如下所示：\\u003c/p\\u003e\\u003cpre\\u003e\\u003ccode\\u003e//商品秒杀核心业务逻辑的处理-mysql的优化\\u003cbr\\u003e@Override\\u003cbr\\u003epublic Boolean killItemV2(Integer killId, Integer userId) throws Exception {\\u003cbr\\u003e    Boolean result\\u003dfalse;\\u003cbr\\u003e\\u003cbr\\u003e    //TODO:判断当前用户是否已经抢购过当前商品\\u003cbr\\u003e    if (itemKillSuccessMapper.countByKillUserId(killId,userId) \\u0026lt;\\u003d 0){\\u003cbr\\u003e        //A  查询待秒杀商品详情\\u003cbr\\u003e        ItemKill itemKill\\u003ditemKillMapper.selectByIdV2(killId);\\u003cbr\\u003e\\u003cbr\\u003e        //TODO:判断是否可以被秒杀canKill\\u003d1?\\u003cbr\\u003e        if (itemKill!\\u003dnull \\u0026amp;\\u0026amp; 1\\u003d\\u003ditemKill.getCanKill() \\u0026amp;\\u0026amp; itemKill.getTotal()\\u0026gt;0){\\u003cbr\\u003e            //B  扣减库存-减一\\u003cbr\\u003e            int res\\u003ditemKillMapper.updateKillItemV2(killId);\\u003cbr\\u003e\\u003cbr\\u003e            //TODO:扣减是否成功?是-生成秒杀成功的订单，同时通知用户秒杀成功的消息\\u003cbr\\u003e            if (res\\u0026gt;0){\\u003cbr\\u003e                commonRecordKillSuccessInfo(itemKill,userId);\\u003cbr\\u003e                result\\u003dtrue;\\u003cbr\\u003e            }\\u003cbr\\u003e        }\\u003cbr\\u003e    }else{\\u003cbr\\u003e        throw new Exception(\\\"您已经抢购过该商品了!\\\");\\u003cbr\\u003e    }\\u003cbr\\u003e    return result;\\u003cbr\\u003e}\\u003c/code\\u003e\\u003c/pre\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e首先是对于 注释A 那里的调整，即在获取“秒杀商品详情”时，我们限定了“可秒杀商品的数量total需要大于0”，其对应的代码为：itemKillMapper.updateKillItemV2(killId);\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74); font-weight: bold;\\\"\\u003e完整的动态Sql\\u003c/span\\u003e如下所示：\\u0026nbsp;\\u0026nbsp;\\u003cbr\\u003e\\u003c/p\\u003e\\u003cpre\\u003e\\u003ccode\\u003e\\u0026lt;!--获取秒杀详情V2--\\u0026gt;\\u003cbr\\u003e\\u0026lt;select id\\u003d\\\"selectByIdV2\\\" resultType\\u003d\\\"com.debug.kill.model.entity.ItemKill\\\"\\u0026gt;\\u003cbr\\u003e  SELECT\\u003cbr\\u003e    a.*,\\u003cbr\\u003e    b.name AS itemName,\\u003cbr\\u003e    (CASE WHEN (now() BETWEEN a.start_time AND a.end_time)\\u003cbr\\u003e      THEN 1\\u003cbr\\u003e     ELSE 0\\u003cbr\\u003e     END)  AS canKill\\u003cbr\\u003e  FROM item_kill AS a LEFT JOIN item AS b ON b.id \\u003d a.item_id\\u003cbr\\u003e  WHERE a.is_active \\u003d 1 AND a.id \\u003d#{id} AND a.total\\u0026gt;0\\u003cbr\\u003e\\u0026lt;/select\\u0026gt;\\u003c/code\\u003e\\u003c/pre\\u003e\\u003cp\\u003e放到\\u003c/p\\u003e\"}', '2560', '0:0:0:0:0:0:0:1', '2019-08-14 17:18:53');
INSERT INTO `sys_log` VALUES ('283', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"content\":\"正文：Java秒杀系统第一篇\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '80', '0:0:0:0:0:0:0:1', '2019-08-14 17:22:02');
INSERT INTO `sys_log` VALUES ('284', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"content\":\"正文：Java秒杀系统第一篇\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '83', '0:0:0:0:0:0:0:1', '2019-08-14 17:23:51');
INSERT INTO `sys_log` VALUES ('285', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":6,\"content\":\"\\u003cp\\u003edd\\u003c/p\\u003e\"}', '66', '0:0:0:0:0:0:0:1', '2019-08-14 17:24:04');
INSERT INTO `sys_log` VALUES ('286', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":3,\"content\":\"dd\"}', '109', '0:0:0:0:0:0:0:1', '2019-08-14 17:24:15');
INSERT INTO `sys_log` VALUES ('287', 'admin', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '11', '64', '0:0:0:0:0:0:0:1', '2019-08-14 17:24:26');
INSERT INTO `sys_log` VALUES ('288', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"content\":\"正文：Java秒杀系统第一篇\\u003cpre\\u003e\\u003ccode\\u003e//商品秒杀核心业务逻辑的处理-mysql的优化\\u003cbr\\u003e@Override\\u003cbr\\u003epublic Boolean killItemV2(Integer killId, Integer userId) throws Exception {\\u003cbr\\u003e    Boolean result\\u003dfalse;\\u003cbr\\u003e\\u003cbr\\u003e    //TODO:判断当前用户是否已经抢购过当前商品\\u003cbr\\u003e    if (itemKillSuccessMapper.countByKillUserId(killId,userId) \\u0026lt;\\u003d 0){\\u003cbr\\u003e        //A  查询待秒杀商品详情\\u003cbr\\u003e        ItemKill itemKill\\u003ditemKillMapper.selectByIdV2(killId);\\u003cbr\\u003e\\u003cbr\\u003e        //TODO:判断是否可以被秒杀canKill\\u003d1?\\u003cbr\\u003e        if (itemKill!\\u003dnull \\u0026amp;\\u0026amp; 1\\u003d\\u003ditemKill.getCanKill() \\u0026amp;\\u0026amp; itemKill.getTotal()\\u0026gt;0){\\u003cbr\\u003e            //B  扣减库存-减一\\u003cbr\\u003e            int res\\u003ditemKillMapper.updateKillItemV2(killId);\\u003cbr\\u003e\\u003cbr\\u003e            //TODO:扣减是否成功?是-生成秒杀成功的订单，同时通知用户秒杀成功的消息\\u003cbr\\u003e            if (res\\u0026gt;0){\\u003cbr\\u003e                commonRecordKillSuccessInfo(itemKill,userId);\\u003cbr\\u003e                result\\u003dtrue;\\u003cbr\\u003e            }\\u003cbr\\u003e        }\\u003cbr\\u003e    }else{\\u003cbr\\u003e        throw new Exception(\\\"您已经抢购过该商品了!\\\");\\u003cbr\\u003e    }\\u003cbr\\u003e    return result;\\u003cbr\\u003e}\\u003c/code\\u003e\\u003c/pre\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"http://img.fightcoding.com/files/fightCoding/2293789954650750.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '84', '0:0:0:0:0:0:0:1', '2019-08-14 22:27:53');
INSERT INTO `sys_log` VALUES ('289', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"content\":\"正文：Java秒杀系统第一篇\\u003cpre\\u003e\\u003ccode\\u003e//商品秒杀核心业务逻辑的处理-mysql的优化\\u003cbr\\u003e@Override\\u003cbr\\u003epublic Boolean killItemV2(Integer killId, Integer userId) throws Exception {\\u003cbr\\u003e    Boolean result\\u003dfalse;\\u003cbr\\u003e\\u003cbr\\u003e    //TODO:判断当前用户是否已经抢购过当前商品\\u003cbr\\u003e    if (itemKillSuccessMapper.countByKillUserId(killId,userId) \\u0026lt;\\u003d 0){\\u003cbr\\u003e        //A  查询待秒杀商品详情\\u003cbr\\u003e        ItemKill itemKill\\u003ditemKillMapper.selectByIdV2(killId);\\u003cbr\\u003e\\u003cbr\\u003e        //TODO:判断是否可以被秒杀canKill\\u003d1?\\u003cbr\\u003e        if (itemKill!\\u003dnull \\u0026amp;\\u0026amp; 1\\u003d\\u003ditemKill.getCanKill() \\u0026amp;\\u0026amp; itemKill.getTotal()\\u0026gt;0){\\u003cbr\\u003e            //B  扣减库存-减一\\u003cbr\\u003e            int res\\u003ditemKillMapper.updateKillItemV2(killId);\\u003cbr\\u003e\\u003cbr\\u003e            //TODO:扣减是否成功?是-生成秒杀成功的订单，同时通知用户秒杀成功的消息\\u003cbr\\u003e            if (res\\u0026gt;0){\\u003cbr\\u003e                commonRecordKillSuccessInfo(itemKill,userId);\\u003cbr\\u003e                result\\u003dtrue;\\u003cbr\\u003e            }\\u003cbr\\u003e        }\\u003cbr\\u003e    }else{\\u003cbr\\u003e        throw new Exception(\\\"您已经抢购过该商品了!\\\");\\u003cbr\\u003e    }\\u003cbr\\u003e    return result;\\u003cbr\\u003e}\\u003c/code\\u003e\\u003c/pre\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"http://img.fightcoding.com/files/fightCoding/d1274e2b8d81443d99dd0c73f5e865ae.jpg\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cpre\\u003e\\u003ccode\\u003e\\u0026lt;!--获取秒杀详情V2--\\u0026gt;\\u003cbr\\u003e\\u0026lt;select id\\u003d\\\"selectByIdV2\\\" resultType\\u003d\\\"com.debug.kill.model.entity.ItemKill\\\"\\u0026gt;\\u003cbr\\u003e  SELECT\\u003cbr\\u003e    a.*,\\u003cbr\\u003e    b.name AS itemName,\\u003cbr\\u003e    (CASE WHEN (now() BETWEEN a.start_time AND a.end_time)\\u003cbr\\u003e      THEN 1\\u003cbr\\u003e     ELSE 0\\u003cbr\\u003e     END)  AS canKill\\u003cbr\\u003e  FROM item_kill AS a LEFT JOIN item AS b ON b.id \\u003d a.item_id\\u003cbr\\u003e  WHERE a.is_active \\u003d 1 AND a.id \\u003d#{id} AND a.total\\u0026gt;0\\u003cbr\\u003e\\u0026lt;/select\\u0026gt;\\u003c/code\\u003e\\u003c/pre\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '61', '0:0:0:0:0:0:0:1', '2019-08-14 22:29:27');
INSERT INTO `sys_log` VALUES ('290', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":5,\"content\":\"\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '100', '0:0:0:0:0:0:0:1', '2019-08-15 10:49:18');
INSERT INTO `sys_log` VALUES ('291', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.admin.SysMenuController.update()', '{\"menuId\":68,\"parentId\":41,\"parentName\":\"博客模块\",\"name\":\"博客列表\",\"url\":\"modules/blog/blogInfo.html\",\"perms\":\"sys:blog:info\",\"type\":1,\"icon\":\"fa fa-binoculars\",\"orderNum\":2}', '50', '0:0:0:0:0:0:0:1', '2019-08-15 14:24:23');
INSERT INTO `sys_log` VALUES ('292', 'admin', '新增课程', 'com.debug.coding.fight.server.controller.admin.CourseController.save()', '{\"name\":\"1\",\"cover\":\"2\",\"target\":\"3\",\"introduction\":\"4\",\"duration\":\"5\",\"userId\":1,\"isFree\":0,\"price\":12,\"status\":2,\"isDiscount\":0,\"memoA\":\"a\",\"memoB\":\"b\",\"isActive\":1,\"orderBy\":15,\"createTime\":\"Aug 15, 2019 5:31:23 PM\",\"typeIds\":[1,2]}', '111', '0:0:0:0:0:0:0:1', '2019-08-15 17:31:24');
INSERT INTO `sys_log` VALUES ('293', 'admin', '新增课程', 'com.debug.coding.fight.server.controller.admin.CourseController.save()', '{\"id\":7,\"name\":\"1\",\"cover\":\"2\",\"target\":\"3\",\"introduction\":\"4\",\"duration\":\"5\",\"userId\":1,\"isFree\":0,\"price\":12,\"status\":2,\"isDiscount\":0,\"memoA\":\"a\",\"memoB\":\"b\",\"isActive\":1,\"orderBy\":7,\"createTime\":\"Aug 15, 2019 5:33:23 PM\",\"typeIds\":[1,3,2]}', '229', '0:0:0:0:0:0:0:1', '2019-08-15 17:33:23');
INSERT INTO `sys_log` VALUES ('294', 'admin', '删除课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '[7]', '4491', '0:0:0:0:0:0:0:1', '2019-08-15 17:38:46');
INSERT INTO `sys_log` VALUES ('295', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":7,\"name\":\"1\",\"cover\":\"2\",\"target\":\"3\",\"introduction\":\"4\",\"duration\":\"5\",\"userId\":1,\"purchaseTotal\":1,\"isFree\":0,\"price\":12,\"status\":1,\"isDiscount\":0,\"discount\":0.8,\"memoA\":\"a\",\"memoB\":\"b\",\"isActive\":1,\"orderBy\":7,\"createTime\":\"Aug 15, 2019 5:33:23 PM\",\"updateTime\":\"Aug 15, 2019 5:51:06 PM\",\"typeIds\":[1,3,2]}', '122', '0:0:0:0:0:0:0:1', '2019-08-15 17:51:07');
INSERT INTO `sys_log` VALUES ('296', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":7,\"name\":\"11\",\"cover\":\"12\",\"target\":\"13\",\"introduction\":\"14\",\"duration\":\"15\",\"userId\":1,\"purchaseTotal\":1,\"isFree\":1,\"price\":16,\"status\":2,\"isDiscount\":0,\"discount\":0.8,\"memoA\":\"a1\",\"memoB\":\"b1\",\"isActive\":1,\"orderBy\":17,\"createTime\":\"Aug 15, 2019 5:33:23 PM\",\"updateTime\":\"Aug 15, 2019 5:52:15 PM\",\"typeIds\":[1,3,2,4,5,6,7,8,9]}', '188', '0:0:0:0:0:0:0:1', '2019-08-15 17:52:16');
INSERT INTO `sys_log` VALUES ('297', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":7,\"name\":\"11\",\"cover\":\"12\",\"target\":\"13\",\"introduction\":\"14\",\"duration\":\"15\",\"userId\":1,\"purchaseTotal\":1,\"isFree\":1,\"price\":16,\"status\":2,\"isDiscount\":0,\"discount\":0.8,\"memoA\":\"a1\",\"memoB\":\"b1\",\"isActive\":1,\"orderBy\":17,\"createTime\":\"Aug 15, 2019 5:33:23 PM\",\"updateTime\":\"Aug 15, 2019 5:52:50 PM\",\"typeIds\":[1]}', '63', '0:0:0:0:0:0:0:1', '2019-08-15 17:52:51');
INSERT INTO `sys_log` VALUES ('298', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '7', '5', '0:0:0:0:0:0:0:1', '2019-08-15 22:04:05');
INSERT INTO `sys_log` VALUES ('299', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '2', '7', '0:0:0:0:0:0:0:1', '2019-08-15 22:04:49');
INSERT INTO `sys_log` VALUES ('300', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '6', '7', '0:0:0:0:0:0:0:1', '2019-08-15 22:11:12');
INSERT INTO `sys_log` VALUES ('301', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '5', '84', '0:0:0:0:0:0:0:1', '2019-08-15 22:11:19');
INSERT INTO `sys_log` VALUES ('302', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.admin.SysMenuController.update()', '{\"menuId\":89,\"parentId\":66,\"parentName\":\"课程模块\",\"name\":\"课程详情\",\"url\":\"modules/course/courseContent.html\",\"perms\":\"sys:course:detail\",\"type\":1,\"icon\":\"fa fa-stop-circle-o\",\"orderNum\":3}', '50', '0:0:0:0:0:0:0:1', '2019-08-15 22:34:27');
INSERT INTO `sys_log` VALUES ('303', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '7', '3', '0:0:0:0:0:0:0:1', '2019-08-15 22:37:26');
INSERT INTO `sys_log` VALUES ('304', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '5', '74', '0:0:0:0:0:0:0:1', '2019-08-15 22:37:53');
INSERT INTO `sys_log` VALUES ('305', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '5', '131', '0:0:0:0:0:0:0:1', '2019-08-15 22:38:09');
INSERT INTO `sys_log` VALUES ('306', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '5', '3634', '0:0:0:0:0:0:0:1', '2019-08-15 22:42:39');
INSERT INTO `sys_log` VALUES ('307', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '7', '7', '0:0:0:0:0:0:0:1', '2019-08-15 22:42:52');
INSERT INTO `sys_log` VALUES ('308', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":7,\"content\":\"\\u003cp\\u003e这是课程详情说明：\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '94', '0:0:0:0:0:0:0:1', '2019-08-15 22:52:07');
INSERT INTO `sys_log` VALUES ('309', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":7,\"content\":\"\\u003cp\\u003e这是课程详情说明：\\u003c/p\\u003e\\u003cp\\u003e第一句\\u003c/p\\u003e\"}', '42', '0:0:0:0:0:0:0:1', '2019-08-15 22:52:18');
INSERT INTO `sys_log` VALUES ('310', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":37,\"parentId\":32,\"courseId\":2,\"type\":2,\"name\":\"1.2 RabbitMQ认识与安装2\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9314/1954072\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"parentName\":\"一 课程整体介绍\"}', '58', '0:0:0:0:0:0:0:1', '2019-08-16 16:00:06');
INSERT INTO `sys_log` VALUES ('311', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":37,\"parentId\":32,\"courseId\":2,\"type\":2,\"name\":\"1.2 RabbitMQ认识与安装\",\"orderBy\":2,\"url\":\"https://edu.csdn.net/course/play/9314/195407\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 4:00:05 PM\",\"parentName\":\"一 课程整体介绍\"}', '70', '0:0:0:0:0:0:0:1', '2019-08-16 16:00:20');
INSERT INTO `sys_log` VALUES ('312', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":36,\"parentId\":32,\"courseId\":2,\"type\":2,\"name\":\"1.1 课程介绍\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/9314/195406\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"parentName\":\"一 课程整体介绍\"}', '44', '0:0:0:0:0:0:0:1', '2019-08-16 16:02:08');
INSERT INTO `sys_log` VALUES ('313', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":38,\"parentId\":32,\"courseId\":2,\"type\":2,\"name\":\"1.3 测试1\",\"orderBy\":3,\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"parentName\":\"一 课程整体介绍\"}', '46', '0:0:0:0:0:0:0:1', '2019-08-16 16:16:20');
INSERT INTO `sys_log` VALUES ('314', 'admin', '删除课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.delete()', '38', '43', '0:0:0:0:0:0:0:1', '2019-08-16 16:16:32');
INSERT INTO `sys_log` VALUES ('315', 'admin', '删除课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.delete()', '32', '3', '0:0:0:0:0:0:0:1', '2019-08-16 16:16:59');
INSERT INTO `sys_log` VALUES ('316', 'admin', '删除课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.delete()', '40', '37', '0:0:0:0:0:0:0:1', '2019-08-16 16:21:44');
INSERT INTO `sys_log` VALUES ('317', 'admin', '设置课时免费', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.free()', '39', '72', '0:0:0:0:0:0:0:1', '2019-08-16 16:31:36');
INSERT INTO `sys_log` VALUES ('318', 'admin', '设置课时免费', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.free()', '39', '47', '0:0:0:0:0:0:0:1', '2019-08-16 16:31:39');
INSERT INTO `sys_log` VALUES ('319', 'admin', '设置课时免费', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.free()', '39', '78', '0:0:0:0:0:0:0:1', '2019-08-16 16:34:08');
INSERT INTO `sys_log` VALUES ('320', 'admin', '删除菜单', 'com.debug.coding.fight.server.controller.admin.SysMenuController.delete()', '75', '71', '0:0:0:0:0:0:0:1', '2019-08-16 17:24:22');
INSERT INTO `sys_log` VALUES ('321', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.admin.SysMenuController.update()', '{\"menuId\":88,\"parentId\":41,\"parentName\":\"博客模块\",\"name\":\"博客详情\",\"url\":\"modules/blog/blogContent.html\",\"perms\":\"sys:blog:content\",\"type\":1,\"icon\":\"fa fa-meetup\",\"orderNum\":3}', '43', '0:0:0:0:0:0:0:1', '2019-08-16 17:24:50');
INSERT INTO `sys_log` VALUES ('322', 'admin', '新增课程', 'com.debug.coding.fight.server.controller.admin.CourseController.save()', '{\"id\":8,\"name\":\"企业权限管理平台（SpringBoot2.0+Shiro+Vue+Mybatis...）\",\"cover\":\"https://img-bss.csdn.net/2019871203812_49184.jpg\",\"target\":\"学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统； \",\"introduction\":\"本课程讲解的是一个真正意义上的、企业级的项目实战，主要介绍了企业级应用系统中后端应用权限的管理，其中主要涵盖了六大核心业务模块、十几张数据库表。\\n其中的核心业务模块主要包括用户模块、部门模块、岗位模块、角色模块、菜单模块和系统日志模块；与此同时，Debug还亲自撸了额外的附属模块，包括字典管理模块、商品分类模块以及考勤管理模块等等，主要是为了更好地巩固相应的技术栈以及企业应用系统业务模块的开发流程！\",\"duration\":\"16.5\",\"userId\":1,\"isFree\":0,\"price\":109,\"status\":1,\"isDiscount\":0,\"memoA\":\"重量级课程\",\"isActive\":1,\"orderBy\":7,\"createTime\":\"Aug 17, 2019 10:08:03 AM\",\"typeIds\":[17,1,10,18,20]}', '359', '0:0:0:0:0:0:0:1', '2019-08-17 10:08:04');
INSERT INTO `sys_log` VALUES ('323', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":27,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.1 课程介绍\",\"orderBy\":0,\"url\":\"https://edu.csdn.net/course/play/25646/308627\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"一 课程整体介绍\"}', '165', '0:0:0:0:0:0:0:1', '2019-08-17 10:24:16');
INSERT INTO `sys_log` VALUES ('324', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":8,\"name\":\"企业权限管理平台（SpringBoot2.0+Shiro+Vue+Mybatis...）\",\"cover\":\"https://img-bss.csdn.net/2019871203812_49184.jpg\",\"target\":\"学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统； \",\"introduction\":\"本课程讲解的是一个真正意义上的、企业级的项目实战，主要介绍了企业级应用系统中后端应用权限的管理，其中主要涵盖了六大核心业务模块、十几张数据库表。\\n其中的核心业务模块主要包括用户模块、部门模块、岗位模块、角色模块、菜单模块和系统日志模块；与此同时，Debug还亲自撸了额外的附属模块，包括字典管理模块、商品分类模块以及考勤管理模块等等，主要是为了更好地巩固相应的技术栈以及企业应用系统业务模块的开发流程！\",\"duration\":\"16.5\",\"userId\":1,\"purchaseTotal\":1,\"isFree\":0,\"price\":159,\"realPrice\":109,\"status\":1,\"isDiscount\":0,\"discount\":0.8,\"memoA\":\"重量级课程\",\"isActive\":1,\"orderBy\":7,\"createTime\":\"Aug 17, 2019 10:08:03 AM\",\"updateTime\":\"Aug 17, 2019 10:33:24 AM\",\"typeIds\":[17,1,10,18,20]}', '296', '0:0:0:0:0:0:0:1', '2019-08-17 10:33:24');
INSERT INTO `sys_log` VALUES ('325', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.admin.SysMenuController.update()', '{\"menuId\":69,\"parentId\":66,\"parentName\":\"课程模块\",\"name\":\"课程列表\",\"url\":\"modules/course/courseInfo.html?courseId\\u003d0\",\"perms\":\"sys:course:info\",\"type\":1,\"icon\":\"fa fa-clone\",\"orderNum\":2}', '52', '0:0:0:0:0:0:0:1', '2019-08-17 11:27:34');
INSERT INTO `sys_log` VALUES ('326', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.admin.SysMenuController.update()', '{\"menuId\":90,\"parentId\":66,\"parentName\":\"课程模块\",\"name\":\"课程课时\",\"url\":\"modules/course/courseLesson.html?courseId\\u003d0\",\"perms\":\"sys:course:lesson\",\"type\":1,\"icon\":\"fa fa-meetup\",\"orderNum\":4}', '44', '0:0:0:0:0:0:0:1', '2019-08-17 11:31:13');
INSERT INTO `sys_log` VALUES ('327', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.admin.SysMenuController.update()', '{\"menuId\":69,\"parentId\":66,\"parentName\":\"课程模块\",\"name\":\"课程列表\",\"url\":\"modules/course/courseInfo.html\",\"perms\":\"sys:course:info\",\"type\":1,\"icon\":\"fa fa-clone\",\"orderNum\":2}', '48', '0:0:0:0:0:0:0:1', '2019-08-17 11:37:35');
INSERT INTO `sys_log` VALUES ('328', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":1,\"name\":\"微服务-分布式项目开发实战(SpringBoot)\",\"orderBy\":10,\"isActive\":1,\"memo\":\"微服务-分布式项目开发实战(SpringBoot)\",\"createTime\":\"Aug 12, 2019 10:46:53 PM\",\"updateTime\":\"Aug 18, 2019 12:01:18 AM\"}', '98', '0:0:0:0:0:0:0:1', '2019-08-18 00:01:18');
INSERT INTO `sys_log` VALUES ('329', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[3]', '156', '0:0:0:0:0:0:0:1', '2019-08-18 00:01:25');
INSERT INTO `sys_log` VALUES ('330', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":11,\"name\":\"SpringBoot技术栈入门到应用\",\"orderBy\":11,\"isActive\":1,\"memo\":\"微服务SpringBoot技术栈入门到应用\",\"createTime\":\"Aug 12, 2019 10:58:15 PM\",\"updateTime\":\"Aug 18, 2019 12:01:50 AM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-18 00:01:51');
INSERT INTO `sys_log` VALUES ('331', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[14,20]', '7', '0:0:0:0:0:0:0:1', '2019-08-18 00:02:34');
INSERT INTO `sys_log` VALUES ('332', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[21]', '197', '0:0:0:0:0:0:0:1', '2019-08-18 00:02:38');
INSERT INTO `sys_log` VALUES ('333', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[19]', '53', '0:0:0:0:0:0:0:1', '2019-08-18 00:02:41');
INSERT INTO `sys_log` VALUES ('334', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[22]', '42', '0:0:0:0:0:0:0:1', '2019-08-18 00:02:45');
INSERT INTO `sys_log` VALUES ('335', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[20]', '2', '0:0:0:0:0:0:0:1', '2019-08-18 00:02:48');
INSERT INTO `sys_log` VALUES ('336', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[17]', '1', '0:0:0:0:0:0:0:1', '2019-08-18 00:03:13');
INSERT INTO `sys_log` VALUES ('337', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[17]', '84', '0:0:0:0:0:0:0:1', '2019-08-18 00:03:44');
INSERT INTO `sys_log` VALUES ('338', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":10,\"name\":\"企业级项目开发实战\",\"orderBy\":12,\"isActive\":1,\"memo\":\"企业级项目开发实战\",\"createTime\":\"Aug 12, 2019 10:57:32 PM\",\"updateTime\":\"Aug 18, 2019 12:03:54 AM\"}', '42', '0:0:0:0:0:0:0:1', '2019-08-18 00:03:54');
INSERT INTO `sys_log` VALUES ('339', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":11,\"name\":\"SpringBoot技术栈入门到应用\",\"orderBy\":12,\"isActive\":1,\"memo\":\"微服务SpringBoot技术栈入门到应用\",\"createTime\":\"Aug 12, 2019 10:58:15 PM\",\"updateTime\":\"Aug 18, 2019 12:04:00 AM\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-18 00:04:00');
INSERT INTO `sys_log` VALUES ('340', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":10,\"name\":\"企业级项目开发实战\",\"orderBy\":11,\"isActive\":1,\"memo\":\"企业级项目开发实战\",\"createTime\":\"Aug 12, 2019 10:57:32 PM\",\"updateTime\":\"Aug 18, 2019 12:04:05 AM\"}', '34', '0:0:0:0:0:0:0:1', '2019-08-18 00:04:06');
INSERT INTO `sys_log` VALUES ('341', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":2,\"name\":\"分布式中间件技术栈\",\"orderBy\":20,\"isActive\":1,\"memo\":\"分布式中间件技术实战：Redis RabbitMQ ZooKeeper RabbitMQ Dubbo Shiro....\",\"createTime\":\"Aug 12, 2019 10:48:18 PM\",\"updateTime\":\"Aug 18, 2019 12:04:33 AM\"}', '42', '0:0:0:0:0:0:0:1', '2019-08-18 00:04:33');
INSERT INTO `sys_log` VALUES ('342', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":4,\"name\":\"消息中间件RabbitMQ\",\"orderBy\":40,\"isActive\":1,\"memo\":\"消息中间件RabbitMQ\",\"createTime\":\"Aug 12, 2019 10:49:49 PM\",\"updateTime\":\"Aug 18, 2019 12:04:42 AM\"}', '89', '0:0:0:0:0:0:0:1', '2019-08-18 00:04:43');
INSERT INTO `sys_log` VALUES ('343', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[2]', '53', '0:0:0:0:0:0:0:1', '2019-08-18 00:05:09');
INSERT INTO `sys_log` VALUES ('344', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":5,\"name\":\"分布式锁技术栈\",\"orderBy\":50,\"isActive\":1,\"memo\":\"分布式锁技术实战：Redis、ZooKeeper、Redisson、数据库级别锁\",\"createTime\":\"Aug 12, 2019 10:50:27 PM\",\"updateTime\":\"Aug 18, 2019 12:05:20 AM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-18 00:05:21');
INSERT INTO `sys_log` VALUES ('345', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":6,\"name\":\"分布式服务调度框架Dubbo实战\",\"orderBy\":60,\"isActive\":1,\"memo\":\"分布式服务调度框架Dubbo技术实战\",\"createTime\":\"Aug 12, 2019 10:50:56 PM\",\"updateTime\":\"Aug 18, 2019 12:05:30 AM\"}', '84', '0:0:0:0:0:0:0:1', '2019-08-18 00:05:31');
INSERT INTO `sys_log` VALUES ('346', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":7,\"name\":\"缓存中间件Redis\\u0026amp;Redisson技术栈\",\"orderBy\":70,\"isActive\":1,\"memo\":\"缓存中间件Redis\\u0026amp;Redisson技术实战\",\"createTime\":\"Aug 12, 2019 10:51:24 PM\",\"updateTime\":\"Aug 18, 2019 12:05:41 AM\"}', '40', '0:0:0:0:0:0:0:1', '2019-08-18 00:05:41');
INSERT INTO `sys_log` VALUES ('347', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":8,\"name\":\"SSM整合~基础开发\",\"orderBy\":80,\"isActive\":1,\"memo\":\"SSM整合基础开发实战：Spring+Springmvc+Mybatis\",\"createTime\":\"Aug 12, 2019 10:51:52 PM\",\"updateTime\":\"Aug 18, 2019 12:05:59 AM\"}', '114', '0:0:0:0:0:0:0:1', '2019-08-18 00:05:59');
INSERT INTO `sys_log` VALUES ('348', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":9,\"name\":\"SSM整合~项目实战\",\"orderBy\":90,\"isActive\":1,\"memo\":\"SSM整合开发项目实战：以实际的项目实战相关技术栈\",\"createTime\":\"Aug 12, 2019 10:52:30 PM\",\"updateTime\":\"Aug 18, 2019 12:06:13 AM\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-18 00:06:14');
INSERT INTO `sys_log` VALUES ('349', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":15,\"name\":\"分布式-高并发技术栈学习与应用\",\"orderBy\":150,\"isActive\":1,\"memo\":\"高并发技术栈学习与应用\",\"createTime\":\"Aug 12, 2019 11:02:10 PM\",\"updateTime\":\"Aug 18, 2019 12:06:42 AM\"}', '44', '0:0:0:0:0:0:0:1', '2019-08-18 00:06:43');
INSERT INTO `sys_log` VALUES ('350', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":13,\"name\":\"前后端分离开发\",\"orderBy\":120,\"isActive\":1,\"memo\":\"前后端分离开发实战\",\"createTime\":\"Aug 12, 2019 11:00:54 PM\",\"updateTime\":\"Aug 18, 2019 12:07:03 AM\"}', '61', '0:0:0:0:0:0:0:1', '2019-08-18 00:07:03');
INSERT INTO `sys_log` VALUES ('351', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":1,\"name\":\"微服务-分布式项目开发实战(基于SpringBoot)\",\"orderBy\":10,\"isActive\":1,\"memo\":\"微服务-分布式项目开发实战(SpringBoot)\",\"createTime\":\"Aug 12, 2019 10:46:53 PM\",\"updateTime\":\"Aug 18, 2019 12:26:24 AM\"}', '105', '0:0:0:0:0:0:0:1', '2019-08-18 00:26:25');
INSERT INTO `sys_log` VALUES ('352', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":13,\"name\":\"前后端分离开发\",\"orderBy\":71,\"isActive\":1,\"memo\":\"前后端分离开发实战\",\"createTime\":\"Aug 12, 2019 11:00:54 PM\",\"updateTime\":\"Aug 18, 2019 12:27:00 AM\"}', '34', '0:0:0:0:0:0:0:1', '2019-08-18 00:27:01');
INSERT INTO `sys_log` VALUES ('353', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":14,\"name\":\"SpringBoot+Vue项目开发实战\",\"orderBy\":72,\"isActive\":1,\"memo\":\"SpringBoot+Vue项目开发实战\",\"createTime\":\"Aug 12, 2019 11:01:16 PM\",\"updateTime\":\"Aug 18, 2019 12:27:07 AM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-18 00:27:07');
INSERT INTO `sys_log` VALUES ('354', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":15,\"name\":\"分布式-高并发技术栈学习与应用\",\"orderBy\":73,\"isActive\":1,\"memo\":\"高并发技术栈学习与应用\",\"createTime\":\"Aug 12, 2019 11:02:10 PM\",\"updateTime\":\"Aug 18, 2019 12:27:14 AM\"}', '93', '0:0:0:0:0:0:0:1', '2019-08-18 00:27:15');
INSERT INTO `sys_log` VALUES ('355', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":16,\"name\":\"秒杀系统技术实战\",\"orderBy\":75,\"isActive\":1,\"memo\":\"秒杀系统技术实战\",\"createTime\":\"Aug 12, 2019 11:03:21 PM\",\"updateTime\":\"Aug 18, 2019 12:27:23 AM\"}', '46', '0:0:0:0:0:0:0:1', '2019-08-18 00:27:23');
INSERT INTO `sys_log` VALUES ('356', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":16,\"name\":\"秒杀系统技术实战\",\"orderBy\":13,\"isActive\":1,\"memo\":\"秒杀系统技术实战\",\"createTime\":\"Aug 12, 2019 11:03:21 PM\",\"updateTime\":\"Aug 18, 2019 12:27:38 AM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-18 00:27:38');
INSERT INTO `sys_log` VALUES ('357', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":11,\"name\":\"SpringBoot技术栈入门到应用\",\"orderBy\":13,\"isActive\":1,\"memo\":\"微服务SpringBoot技术栈入门到应用\",\"createTime\":\"Aug 12, 2019 10:58:15 PM\",\"updateTime\":\"Aug 18, 2019 12:27:46 AM\"}', '32', '0:0:0:0:0:0:0:1', '2019-08-18 00:27:46');
INSERT INTO `sys_log` VALUES ('358', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":16,\"name\":\"秒杀系统技术实战\",\"orderBy\":12,\"isActive\":1,\"memo\":\"秒杀系统技术实战\",\"createTime\":\"Aug 12, 2019 11:03:21 PM\",\"updateTime\":\"Aug 18, 2019 12:27:49 AM\"}', '37', '0:0:0:0:0:0:0:1', '2019-08-18 00:27:50');
INSERT INTO `sys_log` VALUES ('359', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":16,\"name\":\"Java高并发秒杀系统技术实战\",\"orderBy\":12,\"isActive\":1,\"memo\":\"秒杀系统技术实战\",\"createTime\":\"Aug 12, 2019 11:03:21 PM\",\"updateTime\":\"Aug 18, 2019 12:28:01 AM\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-18 00:28:02');
INSERT INTO `sys_log` VALUES ('360', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":14,\"name\":\"SpringBoot+Vue项目开发实战\",\"orderBy\":12,\"isActive\":1,\"memo\":\"SpringBoot+Vue项目开发实战\",\"createTime\":\"Aug 12, 2019 11:01:16 PM\",\"updateTime\":\"Aug 18, 2019 12:28:16 AM\"}', '41', '0:0:0:0:0:0:0:1', '2019-08-18 00:28:16');
INSERT INTO `sys_log` VALUES ('361', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":14,\"name\":\"SpringBoot+Vue项目开发实战\",\"orderBy\":13,\"isActive\":1,\"memo\":\"SpringBoot+Vue项目开发实战\",\"createTime\":\"Aug 12, 2019 11:01:16 PM\",\"updateTime\":\"Aug 18, 2019 12:28:25 AM\"}', '49', '0:0:0:0:0:0:0:1', '2019-08-18 00:28:26');
INSERT INTO `sys_log` VALUES ('362', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":11,\"name\":\"SpringBoot技术栈入门到应用\",\"orderBy\":14,\"isActive\":1,\"memo\":\"微服务SpringBoot技术栈入门到应用\",\"createTime\":\"Aug 12, 2019 10:58:15 PM\",\"updateTime\":\"Aug 18, 2019 12:28:31 AM\"}', '42', '0:0:0:0:0:0:0:1', '2019-08-18 00:28:31');
INSERT INTO `sys_log` VALUES ('363', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":12,\"name\":\"Java基础-进阶-高级技术栈\",\"orderBy\":110,\"isActive\":1,\"memo\":\"Java技术栈开发\",\"createTime\":\"Aug 12, 2019 11:00:43 PM\",\"updateTime\":\"Aug 18, 2019 12:28:55 AM\"}', '44', '0:0:0:0:0:0:0:1', '2019-08-18 00:28:55');
INSERT INTO `sys_log` VALUES ('364', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":12,\"name\":\"Java基础-进阶-高级技术栈\",\"orderBy\":74,\"isActive\":1,\"memo\":\"Java技术栈开发\",\"createTime\":\"Aug 12, 2019 11:00:43 PM\",\"updateTime\":\"Aug 18, 2019 12:29:03 AM\"}', '92', '0:0:0:0:0:0:0:1', '2019-08-18 00:29:03');
INSERT INTO `sys_log` VALUES ('365', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":8,\"name\":\"SSM整合~基础开发\",\"orderBy\":200,\"isActive\":1,\"memo\":\"SSM整合基础开发实战：Spring+Springmvc+Mybatis\",\"createTime\":\"Aug 12, 2019 10:51:52 PM\",\"updateTime\":\"Aug 18, 2019 12:29:19 AM\"}', '49', '0:0:0:0:0:0:0:1', '2019-08-18 00:29:20');
INSERT INTO `sys_log` VALUES ('366', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":9,\"name\":\"SSM整合~项目实战\",\"orderBy\":210,\"isActive\":1,\"memo\":\"SSM整合开发项目实战：以实际的项目实战相关技术栈\",\"createTime\":\"Aug 12, 2019 10:52:30 PM\",\"updateTime\":\"Aug 18, 2019 12:29:24 AM\"}', '37', '0:0:0:0:0:0:0:1', '2019-08-18 00:29:25');
INSERT INTO `sys_log` VALUES ('367', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":10,\"name\":\"企业级权限管理平台(SpringBoot2.0+Shiro+Vue)\",\"orderBy\":10,\"isActive\":1,\"memo\":\"企业级员工角色权限统一管理平台\",\"createTime\":\"Mar 4, 2019 9:37:33 AM\",\"updateTime\":\"Aug 18, 2019 12:31:44 AM\"}', '47', '0:0:0:0:0:0:0:1', '2019-08-18 00:31:44');
INSERT INTO `sys_log` VALUES ('368', 'admin', '删除博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.delete()', '[11]', '22', '0:0:0:0:0:0:0:1', '2019-08-18 00:32:00');
INSERT INTO `sys_log` VALUES ('369', 'admin', '删除博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.delete()', '[11]', '42', '0:0:0:0:0:0:0:1', '2019-08-18 00:32:22');
INSERT INTO `sys_log` VALUES ('370', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":6,\"name\":\"Dubbo中间件\",\"orderBy\":70,\"isActive\":1,\"memo\":\"分布式服务调度Dubbo\",\"createTime\":\"Mar 4, 2019 9:35:52 AM\",\"updateTime\":\"Aug 18, 2019 12:32:28 AM\"}', '51', '0:0:0:0:0:0:0:1', '2019-08-18 00:32:29');
INSERT INTO `sys_log` VALUES ('371', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":6,\"name\":\"分布式服务调度中间件Dubbo\",\"orderBy\":70,\"isActive\":1,\"memo\":\"分布式服务调度Dubbo\",\"createTime\":\"Mar 4, 2019 9:35:52 AM\",\"updateTime\":\"Aug 18, 2019 12:32:50 AM\"}', '41', '0:0:0:0:0:0:0:1', '2019-08-18 00:32:51');
INSERT INTO `sys_log` VALUES ('372', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":12,\"name\":\"微信公众号-小程序开发\",\"orderBy\":80,\"isActive\":1,\"memo\":\"微信公众号技术实战\",\"createTime\":\"Mar 4, 2019 9:37:33 AM\",\"updateTime\":\"Aug 18, 2019 12:33:02 AM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-18 00:33:03');
INSERT INTO `sys_log` VALUES ('373', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":12,\"name\":\"微信公众号-小程序开发\",\"orderBy\":80,\"isActive\":1,\"memo\":\"微信公众号-小程序开发\",\"createTime\":\"Mar 4, 2019 9:37:33 AM\",\"updateTime\":\"Aug 18, 2019 12:33:09 AM\"}', '37', '0:0:0:0:0:0:0:1', '2019-08-18 00:33:10');
INSERT INTO `sys_log` VALUES ('374', 'admin', '删除博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.delete()', '[13]', '39', '0:0:0:0:0:0:0:1', '2019-08-18 00:33:16');
INSERT INTO `sys_log` VALUES ('375', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":16,\"name\":\"权限认证安全框架Shiro\",\"orderBy\":160,\"isActive\":1,\"memo\":\"Shiro权限认证安全框架实战\",\"createTime\":\"Aug 12, 2019 6:27:29 PM\",\"updateTime\":\"Aug 18, 2019 12:33:40 AM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-18 00:33:40');
INSERT INTO `sys_log` VALUES ('376', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":4,\"name\":\"SSM整合基础开发-项目开发实战\",\"orderBy\":110,\"isActive\":1,\"memo\":\"SSM整合基础开发-项目开发实战\",\"createTime\":\"Mar 4, 2019 9:35:52 AM\",\"updateTime\":\"Aug 18, 2019 12:34:04 AM\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-18 00:34:04');
INSERT INTO `sys_log` VALUES ('377', 'admin', '删除博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.delete()', '[7]', '34', '0:0:0:0:0:0:0:1', '2019-08-18 00:34:10');
INSERT INTO `sys_log` VALUES ('378', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":15,\"name\":\"通用化工具类开发\",\"orderBy\":150,\"isActive\":1,\"memo\":\"Java通用化工具类开发实战\",\"createTime\":\"Aug 12, 2019 6:26:08 PM\",\"updateTime\":\"Aug 18, 2019 12:34:36 AM\"}', '100', '0:0:0:0:0:0:0:1', '2019-08-18 00:34:37');
INSERT INTO `sys_log` VALUES ('379', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":16,\"name\":\"权限认证安全框架Shiro\",\"orderBy\":75,\"isActive\":1,\"memo\":\"Shiro权限认证安全框架实战\",\"createTime\":\"Aug 12, 2019 6:27:29 PM\",\"updateTime\":\"Aug 18, 2019 12:34:59 AM\"}', '47', '0:0:0:0:0:0:0:1', '2019-08-18 00:34:59');
INSERT INTO `sys_log` VALUES ('380', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":5,\"name\":\"JavaSE与Java8知识体系\",\"orderBy\":90,\"isActive\":1,\"memo\":\"JavaSE知识体系\",\"createTime\":\"Mar 4, 2019 9:35:52 AM\",\"updateTime\":\"Aug 18, 2019 12:35:12 AM\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-18 00:35:13');
INSERT INTO `sys_log` VALUES ('381', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":17,\"name\":\"JVM技术栈\",\"orderBy\":73,\"isActive\":1,\"memo\":\"JVM技术栈\",\"createTime\":\"Aug 12, 2019 6:30:08 PM\",\"updateTime\":\"Aug 18, 2019 12:35:26 AM\"}', '111', '0:0:0:0:0:0:0:1', '2019-08-18 00:35:27');
INSERT INTO `sys_log` VALUES ('382', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":15,\"name\":\"通用化工具类开发\",\"orderBy\":120,\"isActive\":1,\"memo\":\"Java通用化工具类开发实战\",\"createTime\":\"Aug 12, 2019 6:26:08 PM\",\"updateTime\":\"Aug 18, 2019 12:35:36 AM\"}', '32', '0:0:0:0:0:0:0:1', '2019-08-18 00:35:36');
INSERT INTO `sys_log` VALUES ('383', 'admin', '写博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":9,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-weight: bold; font-size: x-large;\\\"\\u003e基地的宗旨\\u003c/span\\u003e：\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e专注于技术、热衷于分享、最终培养自己的核心竞争力，以便在这个纷繁复杂的世界里谋得一席之地！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: x-large; font-weight: bold;\\\"\\u003e基地的原则\\u003c/span\\u003e：\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e以理论知识为辅、实战技术为主、相信技术改变生活！埋头苦干、踏实沉稳、疯狂撸码、提升自我！\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: x-large; font-weight: bold;\\\"\\u003e加入我们\\u003c/span\\u003e：\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e对技术感兴趣或有志于分享技术的小伙伴可以联系Debug，小伙伴们可以通过博客或者课程形式的发给我们，我们将会以最大化的推广力度为您推广！如果是课程或者专栏的形式，我们将会以 \\u003cspan style\\u003d\\\"color: rgb(249, 150, 59);\\\"\\u003e“有偿”\\u003c/span\\u003e 的方式进行合作！\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-weight: bold; font-size: x-large;\\\"\\u003e项目合作\\u003c/span\\u003e：\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e除此之外，如果需要开发相应的项目、外包或者某个业务模块，也可以联系Debug，我们的技术团队将会竭诚为您服务，其中项目可以包括：企业级项目的标准开发、定制开发、网站商城、小程序等等！！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '95', '0:0:0:0:0:0:0:1', '2019-08-19 15:17:55');
INSERT INTO `sys_log` VALUES ('384', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"title\":\"Java秒杀系统实战系列~整合RabbitMQ实现消息异步发送\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第八篇，在这篇文章中我们将整合消息中间件RabbitMQ，包括添加依赖、加入配置信息以及自定义注入相关操作组件，比如RabbitTemplate等等，最终初步实现消息的发送和接收，并在下一篇章将其与邮件服务整合，实现“用户秒杀成功发送邮件通知消息”的功能！\",\"label\":\"秒杀系统;SpringBoot;RabbitMQ;消息中间件;高并发;异步发送\",\"status\":1,\"isDelete\":0,\"orderBy\":10,\"readTotal\":1,\"memo\":\"Java秒杀系统实战系列~整合RabbitMQ实现消息异步发送\",\"typeIds\":[8,2]}', '1', '0:0:0:0:0:0:0:1', '2019-08-19 22:04:12');
INSERT INTO `sys_log` VALUES ('385', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"title\":\"Java秒杀系统实战系列~整合RabbitMQ实现消息异步发送\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第八篇，在这篇文章中我们将整合消息中间件RabbitMQ，包括添加依赖、加入配置信息以及自定义注入相关操作组件，比如RabbitTemplate等等，最终初步实现消息的发送和接收，并在下一篇章将其与邮件服务整合，实现“用户秒杀成功发送邮件通知消息”的功能！\",\"label\":\"秒杀系统;SpringBoot;RabbitMQ;消息中间件;高并发;异步发送\",\"status\":1,\"isDelete\":0,\"orderBy\":10,\"readTotal\":1,\"memo\":\"Java秒杀系统实战系列~整合RabbitMQ实现消息异步发送\",\"typeIds\":[8,2]}', '0', '0:0:0:0:0:0:0:1', '2019-08-19 22:04:15');
INSERT INTO `sys_log` VALUES ('386', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"title\":\"Java秒杀系统实战系列~整合RabbitMQ实现消息异步发送\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第八篇，在这篇文章中我们将整合消息中间件RabbitMQ，包括添加依赖、加入配置信息以及自定义注入相关操作组件，比如RabbitTemplate等等，最终初步实现消息的发送和接收，并在下一篇章将其与邮件服务整合，实现“用户秒杀成功发送邮件通知消息”的功能！\",\"label\":\"秒杀系统;SpringBoot;高并发;RabbitMQ;消息中间件;异步发送\",\"status\":1,\"userId\":1,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"Aug 19, 2019 10:07:17 PM\",\"readTotal\":1,\"memo\":\"Java秒杀系统实战系列~整合RabbitMQ实现消息异步发送\",\"typeIds\":[8,2]}', '112', '0:0:0:0:0:0:0:1', '2019-08-19 22:07:17');
INSERT INTO `sys_log` VALUES ('387', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":12,\"title\":\"Java秒杀系统实战系列~整合RabbitMQ实现消息异步发送\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第八篇，在这篇文章中我们将整合消息中间件RabbitMQ，包括添加依赖、加入配置信息以及自定义注入相关操作组件，比如RabbitTemplate等等，最终初步实现消息的发送和接收，并在下一篇章将其与邮件服务整合，实现“用户秒杀成功发送邮件通知消息”的功能！\",\"label\":\"秒杀系统;SpringBoot;高并发;RabbitMQ;消息中间件;异步发送\",\"status\":1,\"userId\":1,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"Aug 19, 2019 10:07:52 PM\",\"readTotal\":1,\"memo\":\"Java秒杀系统实战系列~整合RabbitMQ实现消息异步发送\",\"typeIds\":[8,2]}', '116', '0:0:0:0:0:0:0:1', '2019-08-19 22:07:52');
INSERT INTO `sys_log` VALUES ('388', 'admin', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '11', '53', '0:0:0:0:0:0:0:1', '2019-08-19 22:09:03');
INSERT INTO `sys_log` VALUES ('389', 'admin', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '12', '3', '0:0:0:0:0:0:0:1', '2019-08-19 22:22:34');
INSERT INTO `sys_log` VALUES ('390', 'admin', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '12', '231', '0:0:0:0:0:0:0:1', '2019-08-19 22:24:00');
INSERT INTO `sys_log` VALUES ('391', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":8,\"name\":\"企业权限管理平台实战视频教程（SpringBoot2.0+Shiro+Vue+Mybatis...）\",\"cover\":\"https://img-bss.csdn.net/2019871203812_49184.jpg\",\"target\":\"学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统； \",\"introduction\":\"本课程讲解的是一个真正意义上的、企业级的项目实战，主要介绍了企业级应用系统中后端应用权限的管理，其中主要涵盖了六大核心业务模块、十几张数据库表；其中的核心业务模块主要包括用户模块、部门模块、岗位模块、角色模块、菜单模块和系统日志模块；与此同时，Debug还亲自撸了额外的附属模块，包括字典管理模块、商品分类模块以及考勤管理模块等等，更好地巩固相应的技术栈以及企业应用系统业务模块的开发流程！\",\"duration\":\"17.8\",\"userId\":6,\"purchaseTotal\":1,\"isFree\":0,\"price\":169.00,\"realPrice\":99,\"status\":2,\"isDiscount\":0,\"discount\":0.8,\"memoA\":\"企业权限管理平台实战视频教程（SpringBoot2.0+Shiro+Vue+Mybatis...）\",\"isActive\":1,\"orderBy\":1,\"createTime\":\"Aug 17, 2019 10:08:03 AM\",\"updateTime\":\"Aug 20, 2019 5:08:09 PM\",\"typeIds\":[1,18,20,14,10]}', '202', '0:0:0:0:0:0:0:1', '2019-08-20 17:08:10');
INSERT INTO `sys_log` VALUES ('392', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":8,\"content\":\"\\u003cp\\u003e\\u003cb\\u003e核心技术栈列表\\u003c/b\\u003e：\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e值得介绍的是，本课程在技术栈层面涵盖了前端和后端的大部分常用技术，包括Spring Boot、Spring MVC、Mybatis、Mybatis-Plus、Shiro(身份认证与资源授权跟会话等等)、Spring AOP、防止XSS攻击、防止SQL注入攻击、过滤器Filter、验证码Kaptcha、热部署插件Devtools、POI、Vue、LayUI、ElementUI、JQuery、HTML、Bootstrap、Freemarker、一键打包部署运行工具Wagon等等，如下图所示：\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/ea24bfca052f49448f7528155236b068.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cb\\u003e课程内容与收益\\u003c/b\\u003e：\\u003c/p\\u003e\\u003cp\\u003e（1）学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统；\\u003c/p\\u003e\\u003cp\\u003e（2）从这一权限管理平台中，学会如何去对核心的业务模块进行拆分、设计、关联以及代码实战，并掌握如何基于现有的核心业务模块，快速开发项目中需要的其他业务模块，即套路以及规律的学习。\\u003c/p\\u003e\\u003cp\\u003e（3）学习掌握 任意一个业务模块 的前后端开发流程，学会如何从前端撸到后端再到数据库，最终交付出一个完整的功能模块；\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e（4）掌握如何去搭建、重构一些通用的核心处理服务（比如通用的Service、处理工具类等等）、可复用的前端组件；同时，也可以掌握如何实现从需求分析\\u0026nbsp;-\\u0026gt;\\u0026nbsp;数据库设计\\u0026nbsp;-\\u0026gt;\\u0026nbsp;前后端与数据库开发\\u0026nbsp;-\\u0026gt;\\u0026nbsp;一键打包上线部署运行 等“一条龙”的开发流程。\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/88cab316b9004dffbe58987bd9cca23a.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cb\\u003e核心内容介绍\\u003c/b\\u003e：\\u003cbr\\u003e本课程是一门具有很强实践性质的“项目实战”课程，即“\\u003cb\\u003e企业应用员工角色权限管理平台\\u003c/b\\u003e”，主要介绍了当前企业级应用系统中员工、部门、岗位、角色、权限、菜单以及其他实体模块的管理；其中，还重点讲解了如何基于Shiro的资源授权实现员工-角色-操作权限、员工-角色-数据权限的管理；在课程的最后，还介绍了如何实现一键打包上传部署运行项目等等。如下图所示为本权限管理平台的数据库设计图：\\u0026nbsp;\\u0026nbsp;\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/71d441f0aba94971bb322cae05aa89a6.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e以下为项目整体的运行效果截图：\\u0026nbsp;\\u0026nbsp;\\u0026nbsp;\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/13de9ed171974de089197cba6f784b0c.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/97e765b3c4d144fc9de631e2c4cbe6d5.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/63794c713c884171be013485a5d44fa3.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/34f4543eec9c48d98d7a977ec4c53f76.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e值得一提的是，在本课程中，Debug也向各位小伙伴介绍了如何在企业级应用系统业务模块的开发中，前端到后端再到数据库，最后再到服务器的上线部署运行等流程，如下图所示：\\u0026nbsp;\\u0026nbsp;\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/b2aa8fe872f1411390e83bddbdee089f.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '82', '0:0:0:0:0:0:0:1', '2019-08-20 17:11:00');
INSERT INTO `sys_log` VALUES ('393', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '8', '3', '0:0:0:0:0:0:0:1', '2019-08-20 17:11:18');
INSERT INTO `sys_log` VALUES ('394', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '8', '12385', '0:0:0:0:0:0:0:1', '2019-08-20 17:11:21');
INSERT INTO `sys_log` VALUES ('395', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":43,\"parentId\":40,\"courseId\":8,\"type\":2,\"name\":\"第1讲 课程介绍与演示\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/25646/308627\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"parentName\":\"第1章 课程整体介绍\"}', '46', '0:0:0:0:0:0:0:1', '2019-08-20 17:14:45');
INSERT INTO `sys_log` VALUES ('396', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '8', '4381', '0:0:0:0:0:0:0:1', '2019-08-20 17:18:04');
INSERT INTO `sys_log` VALUES ('397', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":8,\"name\":\"企业权限管理平台实战视频教程（SpringBoot2.0+Shiro+Vue+Mybatis...）\",\"cover\":\"https://img-bss.csdn.net/2019871203812_49184.jpg\",\"target\":\"学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统； \",\"introduction\":\"本课程讲解的是一个真正意义上的、企业级的项目实战，主要介绍了企业级应用系统中后端应用权限的管理，其中主要涵盖了六大核心业务模块、十几张数据库表；其中的核心业务模块主要包括用户模块、部门模块、岗位模块、角色模块、菜单模块和系统日志模块；与此同时，Debug还亲自撸了额外的附属模块，包括字典管理模块、商品分类模块以及考勤管理模块等等，更好地巩固相应的技术栈以及企业应用系统业务模块的开发流程！\",\"duration\":\"17.8\",\"userId\":6,\"releaseDate\":\"Aug 20, 2019 12:00:00 AM\",\"purchaseTotal\":1,\"isFree\":0,\"price\":169,\"realPrice\":99,\"status\":2,\"isDiscount\":0,\"discount\":0.8,\"memoA\":\"企业权限管理平台实战视频教程（SpringBoot2.0+Shiro+Vue+Mybatis...）\",\"isActive\":1,\"orderBy\":0,\"createTime\":\"Aug 17, 2019 10:08:03 AM\",\"updateTime\":\"Aug 20, 2019 5:19:29 PM\",\"detail\":\"\\u003cp\\u003e\\u003cb\\u003e核心技术栈列表\\u003c/b\\u003e：\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e值得介绍的是，本课程在技术栈层面涵盖了前端和后端的大部分常用技术，包括Spring Boot、Spring MVC、Mybatis、Mybatis-Plus、Shiro(身份认证与资源授权跟会话等等)、Spring AOP、防止XSS攻击、防止SQL注入攻击、过滤器Filter、验证码Kaptcha、热部署插件Devtools、POI、Vue、LayUI、ElementUI、JQuery、HTML、Bootstrap、Freemarker、一键打包部署运行工具Wagon等等，如下图所示：\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/ea24bfca052f49448f7528155236b068.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cb\\u003e课程内容与收益\\u003c/b\\u003e：\\u003c/p\\u003e\\u003cp\\u003e（1）学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统；\\u003c/p\\u003e\\u003cp\\u003e（2）从这一权限管理平台中，学会如何去对核心的业务模块进行拆分、设计、关联以及代码实战，并掌握如何基于现有的核心业务模块，快速开发项目中需要的其他业务模块，即套路以及规律的学习。\\u003c/p\\u003e\\u003cp\\u003e（3）学习掌握 任意一个业务模块 的前后端开发流程，学会如何从前端撸到后端再到数据库，最终交付出一个完整的功能模块；\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e（4）掌握如何去搭建、重构一些通用的核心处理服务（比如通用的Service、处理工具类等等）、可复用的前端组件；同时，也可以掌握如何实现从需求分析\\u0026nbsp;-\\u0026gt;\\u0026nbsp;数据库设计\\u0026nbsp;-\\u0026gt;\\u0026nbsp;前后端与数据库开发\\u0026nbsp;-\\u0026gt;\\u0026nbsp;一键打包上线部署运行 等“一条龙”的开发流程。\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/88cab316b9004dffbe58987bd9cca23a.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cb\\u003e核心内容介绍\\u003c/b\\u003e：\\u003cbr\\u003e本课程是一门具有很强实践性质的“项目实战”课程，即“\\u003cb\\u003e企业应用员工角色权限管理平台\\u003c/b\\u003e”，主要介绍了当前企业级应用系统中员工、部门、岗位、角色、权限、菜单以及其他实体模块的管理；其中，还重点讲解了如何基于Shiro的资源授权实现员工-角色-操作权限、员工-角色-数据权限的管理；在课程的最后，还介绍了如何实现一键打包上传部署运行项目等等。如下图所示为本权限管理平台的数据库设计图：\\u0026nbsp;\\u0026nbsp;\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/71d441f0aba94971bb322cae05aa89a6.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e以下为项目整体的运行效果截图：\\u0026nbsp;\\u0026nbsp;\\u0026nbsp;\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/13de9ed171974de089197cba6f784b0c.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/97e765b3c4d144fc9de631e2c4cbe6d5.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/63794c713c884171be013485a5d44fa3.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/34f4543eec9c48d98d7a977ec4c53f76.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e值得一提的是，在本课程中，Debug也向各位小伙伴介绍了如何在企业级应用系统业务模块的开发中，前端到后端再到数据库，最后再到服务器的上线部署运行等流程，如下图所示：\\u0026nbsp;\\u0026nbsp;\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://static.roncoo.com/roncoo/course/b2aa8fe872f1411390e83bddbdee089f.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\",\"typeIds\":[1,18,20,14,10]}', '148', '0:0:0:0:0:0:0:1', '2019-08-20 17:19:30');
INSERT INTO `sys_log` VALUES ('398', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":8,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e核心技术栈列表\\u003c/b\\u003e：\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e值得介绍的是，本课程在技术栈层面涵盖了前端和后端的大部分常用技术，包括Spring Boot、Spring MVC、Mybatis、Mybatis-Plus、Shiro(身份认证与资源授权跟会话等等)、Spring AOP、防止XSS攻击、防止SQL注入攻击、过滤器Filter、验证码Kaptcha、热部署插件Devtools、POI、Vue、LayUI、ElementUI、JQuery、HTML、Bootstrap、Freemarker、一键打包部署运行工具Wagon等等，如下图所示：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070402564453.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e课程内容与收益\\u003c/b\\u003e：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（1）学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统；\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（2）从这一权限管理平台中，学会如何去对核心的业务模块进行拆分、设计、关联以及代码实战，并掌握如何基于现有的核心业务模块，快速开发项目中需要的其他业务模块，即套路以及规律的学习。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（3）学习掌握 任意一个业务模块 的前后端开发流程，学会如何从前端撸到后端再到数据库，最终交付出一个完整的功能模块；\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（4）掌握如何去搭建、重构一些通用的核心处理服务（比如通用的Service、处理工具类等等）、可复用的前端组件；同时，也可以掌握如何实现从需求分析\\u0026nbsp;-\\u0026gt;\\u0026nbsp;数据库设计\\u0026nbsp;-\\u0026gt;\\u0026nbsp;前后端与数据库开发\\u0026nbsp;-\\u0026gt;\\u0026nbsp;一键打包上线部署运行 等“一条龙”的开发流程。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070403452052.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e核心内容介绍\\u003c/b\\u003e：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程是一门具有很强实践性质的“项目实战”课程，即“\\u003cb\\u003e企业应用员工角色权限管理平台\\u003c/b\\u003e”，主要介绍了当前企业级应用系统中员工、部门、岗位、角色、权限、菜单以及其他实体模块的管理；其中，还重点讲解了如何基于Shiro的资源授权实现员工-角色-操作权限、员工-角色-数据权限的管理；在课程的最后，还介绍了如何实现一键打包上传部署运行项目等等。如下图所示为本权限管理平台的数据库设计图：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070404285736.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e以下为项目整体的运行效果截图：\\u0026nbsp;\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070404538119.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405002904.png\\\" style\\u003d\\\"max-width: 100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405078322.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405172638.png\\\" style\\u003d\\\"max-width: 100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405289855.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405404509.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405523495.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e值得一提的是，在本课程中，Debug也向各位小伙伴介绍了如何在企业级应用系统业务模块的开发中，前端到后端再到数据库，最后再到服务器的上线部署运行等流程，如下图所示：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070406328884.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '45', '0:0:0:0:0:0:0:1', '2019-08-20 17:38:41');
INSERT INTO `sys_log` VALUES ('399', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":46,\"parentId\":41,\"courseId\":8,\"type\":2,\"name\":\"第2讲 体验MVC的开发流程\",\"orderBy\":2,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"parentName\":\"第2章 微服务项目的搭建\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-21 17:01:59');
INSERT INTO `sys_log` VALUES ('400', 'admin', '删除课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.delete()', '[13]', '183', '113.109.111.193', '2019-08-22 11:48:22');
INSERT INTO `sys_log` VALUES ('401', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":8,\"name\":\"SSM整合~基础开发（Spring+SpringMVC+Mybatis）\",\"orderBy\":200,\"isActive\":1,\"memo\":\"SSM整合基础开发实战：Spring+Springmvc+Mybatis\",\"createTime\":\"Aug 12, 2019 10:51:52 PM\",\"updateTime\":\"Aug 22, 2019 11:48:48 AM\"}', '246', '113.109.111.193', '2019-08-22 11:48:49');
INSERT INTO `sys_log` VALUES ('402', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":9,\"name\":\"SSM整合~项目实战（Spring+SpringMVC+Mybatis）\",\"orderBy\":210,\"isActive\":1,\"memo\":\"SSM整合开发项目实战：以实际的项目实战相关技术栈\",\"createTime\":\"Aug 12, 2019 10:52:30 PM\",\"updateTime\":\"Aug 22, 2019 11:48:56 AM\"}', '230', '113.109.111.193', '2019-08-22 11:48:57');
INSERT INTO `sys_log` VALUES ('403', 'admin', '修改课程分类', 'com.debug.coding.fight.server.controller.admin.CourseTypeController.update()', '{\"id\":16,\"name\":\"Java高并发秒杀系统设计与开发实战\",\"orderBy\":12,\"isActive\":1,\"memo\":\"秒杀系统技术实战\",\"createTime\":\"Aug 12, 2019 11:03:21 PM\",\"updateTime\":\"Aug 22, 2019 11:50:07 AM\"}', '188', '113.109.111.193', '2019-08-22 11:50:07');
INSERT INTO `sys_log` VALUES ('404', 'admin', '删除课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '[7]', '91', '113.109.111.193', '2019-08-22 11:50:41');
INSERT INTO `sys_log` VALUES ('405', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":8,\"name\":\"企业权限管理平台（SpringBoot2.0+Shiro+Vue+Mybatis）\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/375999870621613162.png\",\"target\":\"学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统； \",\"introduction\":\"本课程讲解的是一个真正意义上的、企业级的项目实战，主要介绍了企业级应用系统中后端应用权限的管理，其中主要涵盖了六大核心业务模块、十几张数据库表；其中的核心业务模块主要包括用户模块、部门模块、岗位模块、角色模块、菜单模块和系统日志模块；与此同时，Debug还亲自撸了额外的附属模块，包括字典管理模块、商品分类模块以及考勤管理模块等等，更好地巩固相应的技术栈以及企业应用系统业务模块的开发流程！\",\"duration\":\"17.8\",\"userId\":6,\"releaseDate\":\"Aug 20, 2019 12:00:00 AM\",\"purchaseTotal\":8,\"isFree\":0,\"price\":169,\"realPrice\":99,\"status\":2,\"isDiscount\":0,\"discount\":0.8,\"memoA\":\"企业权限管理平台实战视频教程（SpringBoot2.0+Shiro+Vue+Mybatis...）\",\"isActive\":1,\"orderBy\":5,\"createTime\":\"Aug 17, 2019 10:08:03 AM\",\"updateTime\":\"Aug 22, 2019 11:53:13 AM\",\"detail\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e核心技术栈列表\\u003c/b\\u003e：\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e值得介绍的是，本课程在技术栈层面涵盖了前端和后端的大部分常用技术，包括Spring Boot、Spring MVC、Mybatis、Mybatis-Plus、Shiro(身份认证与资源授权跟会话等等)、Spring AOP、防止XSS攻击、防止SQL注入攻击、过滤器Filter、验证码Kaptcha、热部署插件Devtools、POI、Vue、LayUI、ElementUI、JQuery、HTML、Bootstrap、Freemarker、一键打包部署运行工具Wagon等等，如下图所示：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070402564453.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e课程内容与收益\\u003c/b\\u003e：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（1）学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统；\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（2）从这一权限管理平台中，学会如何去对核心的业务模块进行拆分、设计、关联以及代码实战，并掌握如何基于现有的核心业务模块，快速开发项目中需要的其他业务模块，即套路以及规律的学习。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（3）学习掌握 任意一个业务模块 的前后端开发流程，学会如何从前端撸到后端再到数据库，最终交付出一个完整的功能模块；\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（4）掌握如何去搭建、重构一些通用的核心处理服务（比如通用的Service、处理工具类等等）、可复用的前端组件；同时，也可以掌握如何实现从需求分析\\u0026nbsp;-\\u0026gt;\\u0026nbsp;数据库设计\\u0026nbsp;-\\u0026gt;\\u0026nbsp;前后端与数据库开发\\u0026nbsp;-\\u0026gt;\\u0026nbsp;一键打包上线部署运行 等“一条龙”的开发流程。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070403452052.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e核心内容介绍\\u003c/b\\u003e：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程是一门具有很强实践性质的“项目实战”课程，即“\\u003cb\\u003e企业应用员工角色权限管理平台\\u003c/b\\u003e”，主要介绍了当前企业级应用系统中员工、部门、岗位、角色、权限、菜单以及其他实体模块的管理；其中，还重点讲解了如何基于Shiro的资源授权实现员工-角色-操作权限、员工-角色-数据权限的管理；在课程的最后，还介绍了如何实现一键打包上传部署运行项目等等。如下图所示为本权限管理平台的数据库设计图：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070404285736.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e以下为项目整体的运行效果截图：\\u0026nbsp;\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070404538119.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405002904.png\\\" style\\u003d\\\"max-width: 100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405078322.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405172638.png\\\" style\\u003d\\\"max-width: 100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405289855.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405404509.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405523495.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e值得一提的是，在本课程中，Debug也向各位小伙伴介绍了如何在企业级应用系统业务模块的开发中，前端到后端再到数据库，最后再到服务器的上线部署运行等流程，如下图所示：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070406328884.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\",\"typeIds\":[18,1,10,14,20]}', '1083', '113.109.111.193', '2019-08-22 11:53:14');
INSERT INTO `sys_log` VALUES ('406', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":6,\"name\":\"Java商城秒杀系统设计与开发实战（SpringBoot版）\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000766674862186.png\",\"target\":\"学习完本课程之后，各位小伙伴将可以掌握如何基于Spring Boot构建一个“秒杀系统”或者“高并发业务系统”，掌握 “秒杀系统”在构建的过程中需要哪些技术，包括前端和后端；  学会如何用Jmeter压力测试高并发业务的处理逻辑并对其结果进行分析，掌握Redis、ZooKeeper、Redisson在秒杀系统-高并发业务场景下的作用与实际的代码实战； \",\"introduction\":\"本课程是一门具有很强实践性质的“项目实战”课程，俗称“Java商城秒杀系统”，主要介绍了当前一些电商平台或者商城在举办一些商品秒杀、抢购活动时所涉及的相关业务流程，其中，主要包括“秒杀活动列表的展示”、“秒杀活动详情的获取”、“用户登录认证服务”、“高并发秒杀-抢购业务”、“秒杀成功订单的生成”以及“邮件通知服务”等等\",\"duration\":\"8.5\",\"userId\":6,\"releaseDate\":\"Jan 20, 2019 12:00:00 AM\",\"purchaseTotal\":22,\"isFree\":0,\"price\":159,\"realPrice\":79,\"status\":2,\"level\":\"C10012\",\"isDiscount\":0,\"discount\":0,\"memoA\":\"Java商城秒杀系统设计与开发实战（SpringBoot版）\",\"isActive\":1,\"orderBy\":10,\"createTime\":\"Mar 6, 2019 10:14:59 AM\",\"updateTime\":\"Aug 22, 2019 11:56:29 AM\",\"detail\":\"\\\"SSM整合进阶项目实战-个人博客系统开发\\\"，属于中级课程，适合于具备了一定java基础以及Spring,SpringMVC跟Mybatis核心框架的基础要点。本课程将更深入的基于SSM整合更多的第三方框架并实现一套比较完整的个人博客系统，其中第三方框架包括shiro，lucene，jsoup，poi，druid等等。将更好的提升个人开发企业级应用的能力以及更深入的掌握SSM项目的开发。\\r\\n\\r\\n1、其中课程将从四大模块展开讲解，分别是：\\r\\n\\r\\n一系统整体功能介绍：其中包括系统架构的整体搭建以及项目包目录结构的规范化搭建\\r\\n\\r\\n\\r\\n二系统整体业务模块开发：此模块才是系统的核心模块，其中包括系统涉及到的各大业务模块的实战开发，如博客类型模块、博客模块、评论模块、友情链接模块、博主信息模块、以及登录安全认证模块等的实战开发；在这一模块中涉及的技术有很多，包括shiro实现登录安全认证、lucene实现全文信息检索、springmvc实现图片等附件的上传存储、ueditor的整合实现图片的上传存储等等\\r\\n\\r\\n\\r\\n三系统管理模块：这一模块主要是为了辅助系统能更高效率的运行以及重构开发一些工具类入密码工具类。其中值得一提的是在这里采用了Spring的事件驱动模型（核心组件为ApplicationEvent以及ApplicationListener）来实现业务服务模块的异步通信（起到解耦的作用！）\\r\\n\\r\\n\\r\\n四前端模块开发：这是最后的一大模块的实战。前端模块，顾名思义当然是为了更好的展示系统的整体效果，在这里值得一提的是全文信息检索lucene、爬虫框架jsoup的应用以及通用下载工具的开发，这些应用框架以及工具类均可以在其他的JavaWeb应用中使用，具有很好的可重用性！\\r\\n\\r\\n\\r\\n整体来说，这个系统具有很强的实战性，对于职场萌新以及追求SSM实战的人来讲均能很好的练手！当然啦，此系统也可以作为课程或者毕业设计的参考！\\r\\n\\r\\n\\r\\n2、系统环境要求：\\r\\n\\r\\nwindows下开发，IDE采用Eclipse，数据库采用Mysql5.6，数据库管理工具采用Navicat，模拟浏览器请求工具采用Postman\\r\\n\\r\\n\\r\\n3、推荐学习资料：\\r\\n\\r\\nSSM的整合入门学习资料 可以参考我的另一门视频课程：https://www.roncoo.com/course/view/bfb8b956c9b94e7e90b91c0d43e82757（SSM整合开发实战之POI导入导出Excel）。而此系统的源码数据库以及mybatis逆向工程可在最后的两节视频中的资料下载中进行下载！\\r\\n\\r\\n\\r\\n4、学后技能提升：若是能坚持将视频教程看完，并配合系统源码的Debug实战，吃透整套系统源码，相信将能提升个人开发企业级JavaWeb应用的能力以及更深入的掌握SSM项目的开发，甚至能够独立以SSM作为和新框架搭建JavaWeb企业级的应用！\\r\\n\\r\\n\\r\\n\",\"typeIds\":[16,15]}', '660', '113.109.111.193', '2019-08-22 11:56:30');
INSERT INTO `sys_log` VALUES ('407', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":5,\"name\":\"SpringBoot实战视频教程-从菜鸟到小牛\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000641077127046.jpg\",\"target\":\"给予需要入门SpringBoot的童鞋以及微服务项目SpringBoot开发者实战指导，以实际的业务场景为出发点实战目前微服务项目中涉及的常见业务模块，解决一些典型的问题。相信学习完本套课程后，诸位童鞋将对微服务项目、SpringBoot的开发有更为深入的理解！\",\"introduction\":\"本课程由浅入深实战SpringBoot的技术体系，几乎涵盖了目前微服务项目中常见的业务模块与典型的问题实战。基于SpingBoot整合第三方依赖实战解决常见的模块与问题，如Redis，RabbitMQ,Mybatis,Poi,发送邮件，上传文件等等，学完之后，基于SpringBoot独立自主开发一个jar或者war的服务或者项目将变得得心应手。\",\"duration\":\"15.6\",\"userId\":6,\"releaseDate\":\"Aug 15, 2019 12:00:00 AM\",\"purchaseTotal\":42,\"isFree\":0,\"price\":109,\"realPrice\":59,\"status\":2,\"level\":\"C10011\",\"isDiscount\":0,\"discount\":0,\"memoA\":\"SpringBoot;Mybatis;多模块项目构建;lombok;多环境配置;发送邮件;Thymeleaf;上传文件;定时器;跨域配置;poi;导入导出excel;Redis;缓存中间件;RabbitMQ;消息中间件\",\"isActive\":1,\"orderBy\":15,\"createTime\":\"Mar 6, 2019 10:09:31 AM\",\"updateTime\":\"Aug 22, 2019 12:01:51 PM\",\"detail\":\"\\\"SSM整合开发实战之POI导入导出Excel\\\"是一门专为初学者、职场萌新、SSM入门学习者、POI导入导出Excel需求者以及追求实战者量身定做的，顾名思义，该课程的核心是如何基于SSM和新框架，用java poi实现excel的导入导出。在课程的学习过程中，你将学到如何基于maven搭建SSM的项目，并基于此整合第三方框架poi实现业务数据以excel的形式导入导出，在本课程中，也介绍了如何基于SSM项目实现目前企业级应用采用mvc三层模式来开发实现自己的业务模块，而在本课程的最后，也介绍了如果基于非maven的方式来整合实现此项目！并最终提供这两种整合方式的系统源码与数据库\",\"typeIds\":[11]}', '584', '113.109.111.193', '2019-08-22 12:01:52');
INSERT INTO `sys_log` VALUES ('408', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":4,\"name\":\"RabbitMQ实战视频教程\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000704566549609.png\",\"target\":\"本课程将带领大家认识、理解并实战消息中间件RabbitMQ，在学习完本课程后，将能更好的理解消息中间件的作用以及应用场景，进一步巩固RabbitMQ各个知识点以及在SpringBoot整合项目中的实际应用！在学完之后，你会发现，其实RabbitMQ也就那么一回事！\",\"introduction\":\"本课程首先将带领大家拜读RabbitMQ官网的技术开发手册，之后会将学到的知识深入的实战到实际的各种应用场景中，从而加深知识点的理解，其中包括如何实现单一队列多个消费者监听消费、业务服务模块解耦通信、抢单高并发方案的解决、登录成功异步写日志、异步发送邮件、死信队列实战以及实现用户下单超时未支付自动失效等等。\",\"duration\":\"8.5\",\"userId\":6,\"releaseDate\":\"Apr 1, 2019 12:00:00 AM\",\"purchaseTotal\":32,\"isFree\":0,\"price\":119,\"realPrice\":69,\"status\":2,\"level\":\"C10012\",\"isDiscount\":0,\"discount\":0,\"memoA\":\"RabbitMQ;消息中间件;异步发送;消息通信;服务解耦;确认消费;高并发;限流;死信队列;SpringBoot;中间件\",\"isActive\":1,\"orderBy\":20,\"createTime\":\"Mar 6, 2019 10:06:03 AM\",\"updateTime\":\"Aug 22, 2019 12:00:00 AM\",\"detail\":\"“如何发布服务/接口；如何调用别人服务/接口”的场景在当前互联网应用中并不少见，传统的调用方式就有rmi以及基于soap的webservice等方式。而在当前微服务、分布式时代，更多的则有spring cloud以及dubbo+zookeeper等方式，相对而言，sc更适用于大型体系的互联网应用，而针对微型、小而简的独立服务或者项目而言，dubbo算是应用相当广泛的方式了 ！\\r\\n\\r\\n本课程讲述了当前微服务项目、分布式系统下接口与接口之前、服务与服务之间、项目与项目之间的调度/交互，采用的是dubbo加zookeeper的方式来实战。\\r\\n\\r\\n内容主要包括dubbo的认识与官网开发demo的实战，dubbo服务的开发与发布注册,dubbo服务的订阅与调用,dubbo服务调度之间接口的鉴权以及基于dubbo协议跟http协议以实际的业务场景实战服务与服务之间的调度等等！\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436340780807.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436349410194.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436358369931.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436364539729.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436373937382.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436379796192.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436389420832.png\\r\\n\\r\\n课程课时目录：\\r\\n1课程课时整体介绍\\r\\n2 Dubbo架构剖析与生产消费者开发实战\\r\\n3 SpringBoot整合Dubbo实战分布式服务调度-前言\\r\\n4 SpringBoot整合Dubbo实战独立项目mvc开发服务一\\r\\n5 SpringBoot整合Dubbo实战独立项目mvc开发服务二\\r\\n6 SpringBoot整合Dubbo开发接口服务与发布注册一\\r\\n7 SpringBoot整合Dubbo开发接口服务与发布注册二\\r\\n8 SpringBoot整合Dubbo开发接口服务与发布注册三\\r\\n9 搭建独立SpringBoot微服务项目并整合Dubbo与Zookeeper\\r\\n10 Dubbo服务调用实战一-基于Dubbo协议的调用一\\r\\n11 Dubbo服务调用实战一-基于Dubbo协议的调用二\\r\\n12 Dubbo服务调用实战二-基于Http协议的Rest Api调用一\\r\\n13 Dubbo服务调用实战二-基于Http协议的Rest Api调用二\\r\\n14 Dubbo服务调用实战二-基于Http协议的Rest Api调用三\\r\\n15 Dubbo服务调用实战三-基于Dubbo协议实现基本业务模块的管理\\r\\n16 Dubbo服务调用实战场景-微信公众平台接口实战一\\r\\n17 Dubbo服务调用实战场景-微信公众平台接口实战二\\r\\n18 Dubbo服务调用实战场景-微信公众平台接口实战三\\r\\n19 Dubbo服务接口调用认证-Token机制实战一之创建token\\r\\n20 Dubbo服务接口调用认证-Token机制实战二之存储token\\r\\n21 Dubbo服务接口调用认证-Token机制实战三之验证token\\r\\n22 Dubbo服务接口调用认证-Token机制实战四之缓存token\\r\\n23 Dubbo服务接口调用认证-Token机制实战总结\\r\\n24课程总结\\r\\n \\r\\n总之，本课程介绍的相关知识点在当前互联网项目中将具备很强的参考性与学习性，在企业内部/外部大部分项目中都有设计，加上dubbo项目如今已经重归apache开源基金组织的怀抱，所以，此时不学dubbo，更待何时！！\\r\\n\",\"typeIds\":[4]}', '349', '113.109.111.193', '2019-08-22 12:06:29');
INSERT INTO `sys_log` VALUES ('409', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":4,\"name\":\"RabbitMQ实战视频教程2\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000704566549609.png\",\"target\":\"本课程将带领大家认识、理解并实战消息中间件RabbitMQ，在学习完本课程后，将能更好的理解消息中间件的作用以及应用场景，进一步巩固RabbitMQ各个知识点以及在SpringBoot整合项目中的实际应用！在学完之后，你会发现，其实RabbitMQ也就那么一回事！\",\"introduction\":\"本课程首先将带领大家拜读RabbitMQ官网的技术开发手册，之后会将学到的知识深入的实战到实际的各种应用场景中，从而加深知识点的理解，其中包括如何实现单一队列多个消费者监听消费、业务服务模块解耦通信、抢单高并发方案的解决、登录成功异步写日志、异步发送邮件、死信队列实战以及实现用户下单超时未支付自动失效等等。\",\"duration\":\"8.5\",\"userId\":6,\"releaseDate\":\"Apr 1, 2019 12:00:00 AM\",\"purchaseTotal\":32,\"isFree\":0,\"price\":119,\"realPrice\":69,\"status\":2,\"level\":\"C10012\",\"isDiscount\":0,\"discount\":0,\"memoA\":\"RabbitMQ;消息中间件;异步发送;消息通信;服务解耦;确认消费;高并发;限流;死信队列;SpringBoot;中间件\",\"isActive\":1,\"orderBy\":20,\"createTime\":\"Mar 6, 2019 10:06:03 AM\",\"updateTime\":\"Aug 22, 2019 12:06:35 PM\",\"detail\":\"“如何发布服务/接口；如何调用别人服务/接口”的场景在当前互联网应用中并不少见，传统的调用方式就有rmi以及基于soap的webservice等方式。而在当前微服务、分布式时代，更多的则有spring cloud以及dubbo+zookeeper等方式，相对而言，sc更适用于大型体系的互联网应用，而针对微型、小而简的独立服务或者项目而言，dubbo算是应用相当广泛的方式了 ！\\r\\n\\r\\n本课程讲述了当前微服务项目、分布式系统下接口与接口之前、服务与服务之间、项目与项目之间的调度/交互，采用的是dubbo加zookeeper的方式来实战。\\r\\n\\r\\n内容主要包括dubbo的认识与官网开发demo的实战，dubbo服务的开发与发布注册,dubbo服务的订阅与调用,dubbo服务调度之间接口的鉴权以及基于dubbo协议跟http协议以实际的业务场景实战服务与服务之间的调度等等！\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436340780807.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436349410194.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436358369931.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436364539729.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436373937382.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436379796192.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436389420832.png\\r\\n\\r\\n课程课时目录：\\r\\n1课程课时整体介绍\\r\\n2 Dubbo架构剖析与生产消费者开发实战\\r\\n3 SpringBoot整合Dubbo实战分布式服务调度-前言\\r\\n4 SpringBoot整合Dubbo实战独立项目mvc开发服务一\\r\\n5 SpringBoot整合Dubbo实战独立项目mvc开发服务二\\r\\n6 SpringBoot整合Dubbo开发接口服务与发布注册一\\r\\n7 SpringBoot整合Dubbo开发接口服务与发布注册二\\r\\n8 SpringBoot整合Dubbo开发接口服务与发布注册三\\r\\n9 搭建独立SpringBoot微服务项目并整合Dubbo与Zookeeper\\r\\n10 Dubbo服务调用实战一-基于Dubbo协议的调用一\\r\\n11 Dubbo服务调用实战一-基于Dubbo协议的调用二\\r\\n12 Dubbo服务调用实战二-基于Http协议的Rest Api调用一\\r\\n13 Dubbo服务调用实战二-基于Http协议的Rest Api调用二\\r\\n14 Dubbo服务调用实战二-基于Http协议的Rest Api调用三\\r\\n15 Dubbo服务调用实战三-基于Dubbo协议实现基本业务模块的管理\\r\\n16 Dubbo服务调用实战场景-微信公众平台接口实战一\\r\\n17 Dubbo服务调用实战场景-微信公众平台接口实战二\\r\\n18 Dubbo服务调用实战场景-微信公众平台接口实战三\\r\\n19 Dubbo服务接口调用认证-Token机制实战一之创建token\\r\\n20 Dubbo服务接口调用认证-Token机制实战二之存储token\\r\\n21 Dubbo服务接口调用认证-Token机制实战三之验证token\\r\\n22 Dubbo服务接口调用认证-Token机制实战四之缓存token\\r\\n23 Dubbo服务接口调用认证-Token机制实战总结\\r\\n24课程总结\\r\\n \\r\\n总之，本课程介绍的相关知识点在当前互联网项目中将具备很强的参考性与学习性，在企业内部/外部大部分项目中都有设计，加上dubbo项目如今已经重归apache开源基金组织的怀抱，所以，此时不学dubbo，更待何时！！\\r\\n\",\"typeIds\":[4]}', '603', '113.109.111.193', '2019-08-22 12:06:36');
INSERT INTO `sys_log` VALUES ('410', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":8,\"name\":\"企业权限管理平台（SpringBoot2.0+Shiro+Vue+Mybatis）\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/375999870621613162.png\",\"target\":\"学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统； \",\"introduction\":\"本课程讲解的是一个真正意义上的、企业级的项目实战，主要介绍了企业级应用系统中后端应用权限的管理，其中主要涵盖了六大核心业务模块、十几张数据库表；其中的核心业务模块主要包括用户模块、部门模块、岗位模块、角色模块、菜单模块和系统日志模块；与此同时，Debug还亲自撸了额外的附属模块，包括字典管理模块、商品分类模块以及考勤管理模块等等，更好地巩固相应的技术栈以及企业应用系统业务模块的开发流程！\",\"duration\":\"17.8\",\"userId\":6,\"releaseDate\":\"Aug 20, 2019 12:00:00 AM\",\"purchaseTotal\":8,\"isFree\":0,\"price\":169,\"realPrice\":99,\"status\":2,\"isDiscount\":0,\"discount\":0.8,\"memoA\":\"权限管理;权限管理平台;SpringBoot;SpringBoot2.0;Shiro;Vue;Mybatis;Spring;角色管理;用户管理;数据管理;微服务\",\"isActive\":1,\"orderBy\":5,\"createTime\":\"Aug 17, 2019 10:08:03 AM\",\"updateTime\":\"Aug 22, 2019 12:09:11 PM\",\"detail\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e核心技术栈列表\\u003c/b\\u003e：\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e值得介绍的是，本课程在技术栈层面涵盖了前端和后端的大部分常用技术，包括Spring Boot、Spring MVC、Mybatis、Mybatis-Plus、Shiro(身份认证与资源授权跟会话等等)、Spring AOP、防止XSS攻击、防止SQL注入攻击、过滤器Filter、验证码Kaptcha、热部署插件Devtools、POI、Vue、LayUI、ElementUI、JQuery、HTML、Bootstrap、Freemarker、一键打包部署运行工具Wagon等等，如下图所示：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070402564453.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e课程内容与收益\\u003c/b\\u003e：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（1）学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统；\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（2）从这一权限管理平台中，学会如何去对核心的业务模块进行拆分、设计、关联以及代码实战，并掌握如何基于现有的核心业务模块，快速开发项目中需要的其他业务模块，即套路以及规律的学习。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（3）学习掌握 任意一个业务模块 的前后端开发流程，学会如何从前端撸到后端再到数据库，最终交付出一个完整的功能模块；\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（4）掌握如何去搭建、重构一些通用的核心处理服务（比如通用的Service、处理工具类等等）、可复用的前端组件；同时，也可以掌握如何实现从需求分析\\u0026nbsp;-\\u0026gt;\\u0026nbsp;数据库设计\\u0026nbsp;-\\u0026gt;\\u0026nbsp;前后端与数据库开发\\u0026nbsp;-\\u0026gt;\\u0026nbsp;一键打包上线部署运行 等“一条龙”的开发流程。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070403452052.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e核心内容介绍\\u003c/b\\u003e：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程是一门具有很强实践性质的“项目实战”课程，即“\\u003cb\\u003e企业应用员工角色权限管理平台\\u003c/b\\u003e”，主要介绍了当前企业级应用系统中员工、部门、岗位、角色、权限、菜单以及其他实体模块的管理；其中，还重点讲解了如何基于Shiro的资源授权实现员工-角色-操作权限、员工-角色-数据权限的管理；在课程的最后，还介绍了如何实现一键打包上传部署运行项目等等。如下图所示为本权限管理平台的数据库设计图：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070404285736.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e以下为项目整体的运行效果截图：\\u0026nbsp;\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070404538119.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405002904.png\\\" style\\u003d\\\"max-width: 100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405078322.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405172638.png\\\" style\\u003d\\\"max-width: 100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405289855.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405404509.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405523495.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e值得一提的是，在本课程中，Debug也向各位小伙伴介绍了如何在企业级应用系统业务模块的开发中，前端到后端再到数据库，最后再到服务器的上线部署运行等流程，如下图所示：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070406328884.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\",\"typeIds\":[18,1,10,14,20]}', '879', '113.109.111.193', '2019-08-22 12:09:12');
INSERT INTO `sys_log` VALUES ('411', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":6,\"name\":\"Java商城秒杀系统设计与开发实战（SpringBoot版）\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000766674862186.png\",\"target\":\"学习完本课程之后，各位小伙伴将可以掌握如何基于Spring Boot构建一个“秒杀系统”或者“高并发业务系统”，掌握 “秒杀系统”在构建的过程中需要哪些技术，包括前端和后端；  学会如何用Jmeter压力测试高并发业务的处理逻辑并对其结果进行分析，掌握Redis、ZooKeeper、Redisson在秒杀系统-高并发业务场景下的作用与实际的代码实战； \",\"introduction\":\"本课程是一门具有很强实践性质的“项目实战”课程，俗称“Java商城秒杀系统”，主要介绍了当前一些电商平台或者商城在举办一些商品秒杀、抢购活动时所涉及的相关业务流程，其中，主要包括“秒杀活动列表的展示”、“秒杀活动详情的获取”、“用户登录认证服务”、“高并发秒杀-抢购业务”、“秒杀成功订单的生成”以及“邮件通知服务”等等\",\"duration\":\"8.5\",\"userId\":6,\"releaseDate\":\"Jan 20, 2019 12:00:00 AM\",\"purchaseTotal\":22,\"isFree\":0,\"price\":159,\"realPrice\":79,\"status\":2,\"level\":\"C10012\",\"isDiscount\":0,\"discount\":0,\"memoA\":\"秒杀系统;高并发;SpringBoot;Java高并发;Redis;Redisson;ZooKeeper;RabbitMQ;商城平台;微服务\",\"isActive\":1,\"orderBy\":10,\"createTime\":\"Mar 6, 2019 10:14:59 AM\",\"updateTime\":\"Aug 22, 2019 12:10:42 PM\",\"detail\":\"\\\"SSM整合进阶项目实战-个人博客系统开发\\\"，属于中级课程，适合于具备了一定java基础以及Spring,SpringMVC跟Mybatis核心框架的基础要点。本课程将更深入的基于SSM整合更多的第三方框架并实现一套比较完整的个人博客系统，其中第三方框架包括shiro，lucene，jsoup，poi，druid等等。将更好的提升个人开发企业级应用的能力以及更深入的掌握SSM项目的开发。\\r\\n\\r\\n1、其中课程将从四大模块展开讲解，分别是：\\r\\n\\r\\n一系统整体功能介绍：其中包括系统架构的整体搭建以及项目包目录结构的规范化搭建\\r\\n\\r\\n\\r\\n二系统整体业务模块开发：此模块才是系统的核心模块，其中包括系统涉及到的各大业务模块的实战开发，如博客类型模块、博客模块、评论模块、友情链接模块、博主信息模块、以及登录安全认证模块等的实战开发；在这一模块中涉及的技术有很多，包括shiro实现登录安全认证、lucene实现全文信息检索、springmvc实现图片等附件的上传存储、ueditor的整合实现图片的上传存储等等\\r\\n\\r\\n\\r\\n三系统管理模块：这一模块主要是为了辅助系统能更高效率的运行以及重构开发一些工具类入密码工具类。其中值得一提的是在这里采用了Spring的事件驱动模型（核心组件为ApplicationEvent以及ApplicationListener）来实现业务服务模块的异步通信（起到解耦的作用！）\\r\\n\\r\\n\\r\\n四前端模块开发：这是最后的一大模块的实战。前端模块，顾名思义当然是为了更好的展示系统的整体效果，在这里值得一提的是全文信息检索lucene、爬虫框架jsoup的应用以及通用下载工具的开发，这些应用框架以及工具类均可以在其他的JavaWeb应用中使用，具有很好的可重用性！\\r\\n\\r\\n\\r\\n整体来说，这个系统具有很强的实战性，对于职场萌新以及追求SSM实战的人来讲均能很好的练手！当然啦，此系统也可以作为课程或者毕业设计的参考！\\r\\n\\r\\n\\r\\n2、系统环境要求：\\r\\n\\r\\nwindows下开发，IDE采用Eclipse，数据库采用Mysql5.6，数据库管理工具采用Navicat，模拟浏览器请求工具采用Postman\\r\\n\\r\\n\\r\\n3、推荐学习资料：\\r\\n\\r\\nSSM的整合入门学习资料 可以参考我的另一门视频课程：https://www.roncoo.com/course/view/bfb8b956c9b94e7e90b91c0d43e82757（SSM整合开发实战之POI导入导出Excel）。而此系统的源码数据库以及mybatis逆向工程可在最后的两节视频中的资料下载中进行下载！\\r\\n\\r\\n\\r\\n4、学后技能提升：若是能坚持将视频教程看完，并配合系统源码的Debug实战，吃透整套系统源码，相信将能提升个人开发企业级JavaWeb应用的能力以及更深入的掌握SSM项目的开发，甚至能够独立以SSM作为和新框架搭建JavaWeb企业级的应用！\\r\\n\\r\\n\\r\\n\",\"typeIds\":[16,15]}', '647', '113.109.111.193', '2019-08-22 12:10:43');
INSERT INTO `sys_log` VALUES ('412', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":3,\"name\":\"分布式锁实战视频教程（基于SpringBoot）\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000173911615261.png\",\"target\":\"掌握微服务、分布式系统的相关中间件实战实现分布式锁；基于微服务实现抢单/秒杀系统的高并发\",\"introduction\":\"本课程将介绍分布式架构、微服务项目下分布式锁的实现方式，包括数据库级别锁、基于Redis的原子操作、基于Zookeeper的实现、基于Redisson的实现等方式。在实战完各种方式后，本课程也分享介绍了两个很实用的实际业务场景：“重复提交”、“CRM系统销售人员抢单”（抢单系统抢单），更进一步的巩固了分布式锁的理解！\",\"duration\":\"7.8\",\"userId\":6,\"releaseDate\":\"Jan 1, 2019 12:00:00 AM\",\"purchaseTotal\":27,\"isFree\":0,\"price\":109,\"realPrice\":59,\"status\":2,\"level\":\"C10012\",\"isDiscount\":0,\"discount\":0,\"memoA\":\"分布式锁;SpringBoot;Redis;Redisson;RabbitMQ;Zookeeper;秒杀;CRM抢单;重复提交;乐观锁;悲观锁\",\"isActive\":1,\"orderBy\":25,\"createTime\":\"Mar 6, 2019 10:01:56 AM\",\"updateTime\":\"Aug 22, 2019 12:14:12 PM\",\"detail\":\"“在某个时刻高并发多线程访问共享资源”的场景在当前互联网应用中并不少见，在单体应用时代，更多的是采用synchronized等jdk自带的方式来控制“共享资源的访问”，即加同步锁。但在分布式系统时代，服务-应用独立部署或者集群部署的情况下，jdk自带的方式却显得力不从心，“分布式锁”的出现便解决了这个难题。\\r\\n\\r\\n本课程将介绍分布式架构下、微服务项目分布式锁的实现方式，包括数据库级别锁、基于Redis的原子操作、基于Zookeeper的实现、基于Redisson的实现等方式。\\r\\nhttps://s11.51cto.com//images/20181104/1541322961631096.png\\r\\n\\r\\n在实战完各种方式后，我也分享介绍了两个很实用的实际业务场景：“重复提交”、“CRM系统销售人员抢单”（抢单系统抢单），将之前所学到的分布式锁实战实现方式进行了充分的利用，更进一步的巩固了分布式锁的理解！\\r\\nhttps://s11.51cto.com//images/20181104/1541322954455505.jpg\\r\\n\\r\\nhttps://s11.51cto.com//images/20181104/1541322988343751.png\\r\\n\\r\\n以下是本课程涉及的相关知识要点\\r\\n\\r\\n课程课时目录：\\r\\n1课程课时整体介绍\\r\\n2微服务项目的构建\\r\\n3重现分布式锁的高并发场景\\r\\n4分布式锁实现-数据库级别乐观锁\\r\\n5分布式锁实现-数据库级别悲观锁\\r\\n6分布式锁实现-基于Redis实现分布式锁一\\r\\n7分布式锁实现-基于Redis实现分布式锁二\\r\\n8分布式锁实现-基于Zookeeper实战分布式锁一\\r\\n9分布式锁实现-基于Zookeeper实战分布式锁二\\r\\n10分布式锁实现-基于Redisson实战分布式锁\\r\\n11分布式锁实战场景-重复提交一\\r\\n12分布式锁实战场景-重复提交二\\r\\n13分布式锁实战场景-CRM系统销售人员抢单一\\r\\n14分布式锁实战场景-CRM系统销售人员抢单二\\r\\n15分布式锁实战场景-CRM系统销售人员抢单三\\r\\n16分布式锁实战场景-CRM系统销售人员抢单四\\r\\n17分布式锁实战场景番外篇-RabbitMQ的高并发限流作用一\\r\\n18分布式锁实战场景番外篇-RabbitMQ的高并发限流作用二\\r\\n19实战场景总结\\r\\n20课程总结与建议\",\"typeIds\":[5,15]}', '615', '113.109.111.193', '2019-08-22 12:14:13');
INSERT INTO `sys_log` VALUES ('413', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":2,\"name\":\"分布式服务调度中间件Dubbo实战视频教程\",\"cover\":\"http://test-img.fightjava.com/files/fightCoding/201811816282204_54516.png\",\"target\":\"掌握如何使用dubbo发布服务,如何调用其他项目的服务以及在当前微服务项目、分布式场景的实战\",\"introduction\":\"本课程讲述了当前微服务项目、分布式系统架构下接口与接口之前、服务与服务之间、项目与项目之间的调度/交互，采用dubbo加zookeeper的方式来实战。课程内容主要包括dubbo的认识与官网开发demo的实战，dubbo服务的开发与发布注册,订阅与调用,接口调度的鉴权以及基于dubbo协议跟http协议以实际的业务场景进行实战等等！\",\"duration\":\"8.3\",\"userId\":6,\"releaseDate\":\"Mar 1, 2019 12:00:00 AM\",\"purchaseTotal\":22,\"isFree\":0,\"price\":119,\"realPrice\":69,\"status\":2,\"level\":\"C10012\",\"isDiscount\":0,\"discount\":0,\"memoA\":\"分布式;微服务;Dubbo;服务调度;发布与订阅;接口鉴权;中间件;分布式服务调度;Rest Api;RPC协议;微信公众平台接口\",\"isActive\":1,\"orderBy\":30,\"createTime\":\"Mar 6, 2019 9:58:30 AM\",\"updateTime\":\"Aug 22, 2019 12:17:56 PM\",\"detail\":\"\\\"RabbitMQ实战系列\\\"是一门初中级课程，适用于消息中间件学习者、RabbitMQ实战者以及SpringBoot整合RabbitMQ实战需求者。\\r\\n本课程将首先带领大家拜读RabbitMQ官网的技术开发手册，并用其提供的参考代码来入门，之后会将所学到的知识深入的实战到实际的各种应用场景中，从而加深知识点的理解，\\r\\n其中包括如何实现单一队列多个消费者监听消费、业务服务模块解耦通信、抢单高并发方案的解决、登录成功异步写日志、异步发送邮件、如何实现死信队列以及实现用户下单超时未支付自动失效等等。\\r\\n学习完本课程后，将能更好的理解消息中间件的作用以及应用场景，进一步巩固RabbitMQ各个知识点以及在SpringBoot整合项目中的实际应用！\\r\\n课程课时：\\r\\n第一章\\r\\n1-1：课程课时整体介绍\\r\\n1-2：RabbitMQ认识与安装\\r\\n1-3：RabbitMQ官网拜读-HelloWorld\\r\\n1-4：RabbitMQ官网拜读-生产者消费者以及队列初步认识\\r\\n1-5：RabbitMQ官网拜读-交换机详解之FanoutExchange实战\\r\\n1-6：RabbitMQ官网拜读-交换机详解之DirectExchange+路由实战\\r\\n1-7：RabbitMQ官网拜读-交换机详解之TopicExchange发布订阅模式匹配实战\\r\\n \\r\\n第二章\\r\\n2-1:RabbitMQ实战案例-SpringBoot整合RabbitMQ之整合配置篇一\\r\\n2-2:RabbitMQ实战案例-SpringBoot整合RabbitMQ之整合配置篇二\\r\\n2-3:RabbitMQ实战案例-SpringBoot整合RabbitMQ之Spring事件驱动模型\\r\\n2-4:RabbitMQ实战案例-发送接受消息实战之创建队列交换机路由及绑定\\r\\n2-5:RabbitMQ实战案例-发送接受消息实战之RabbitTemplate发送消息\\r\\n2-6:RabbitMQ实战案例-发送接受消息实战之@RabbitListener接受消息\\r\\n2-7:RabbitMQ实战案例-用户商城抢单并发实战一\\r\\n2-8:RabbitMQ实战案例-用户商城抢单并发实战二\\r\\n2-9:RabbitMQ实战案例-消息确认机制及并发量配置之SimpleMessageListenerContainer实战\\r\\n2-10:RabbitMQ实战案例-消息确认机制ChannelAwareMessageListener实战一\\r\\n2-11:RabbitMQ实战案例-消息确认机制实战之用户商城下单\\r\\n2-12:RabbitMQ实战案例-业务服务模块解耦实战\\r\\n2-13:RabbitMQ实战案例-基于DirectExchange+RoutingKey异步写日志\\r\\n2-14:RabbitMQ实战案例-基于DirectExchange+RoutingKey异步发送邮件\\r\\n2-15:RabbitMQ实战插曲-死信队列DLX,DLK,TTL认识\\r\\n2-16:RabbitMQ实战案例-死信队列消息延迟分发实战\\r\\n2-17:RabbitMQ实战案例-死信队列之用户下单超时没支付自动失效实战一\\r\\n2-18:RabbitMQ实战案例-死信队列之用户下单超时没支付自动失效实战二\\r\\n2-19:RabbitMQ实战案例-死信队列番外篇之动态设置TTL\\r\\n2-20:总结与建议\",\"typeIds\":[6]}', '647', '113.109.111.193', '2019-08-22 12:17:57');
INSERT INTO `sys_log` VALUES ('414', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":4,\"name\":\"RabbitMQ实战视频教程\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000704566549609.png\",\"target\":\"本课程将带领大家认识、理解并实战消息中间件RabbitMQ，在学习完本课程后，将能更好的理解消息中间件的作用以及应用场景，进一步巩固RabbitMQ各个知识点以及在SpringBoot整合项目中的实际应用！在学完之后，你会发现，其实RabbitMQ也就那么一回事！\",\"introduction\":\"本课程首先将带领大家拜读RabbitMQ官网的技术开发手册，之后会将学到的知识深入的实战到实际的各种应用场景中，从而加深知识点的理解，其中包括如何实现单一队列多个消费者监听消费、业务服务模块解耦通信、抢单高并发方案的解决、登录成功异步写日志、异步发送邮件、死信队列实战以及实现用户下单超时未支付自动失效等等。\",\"duration\":\"8.5\",\"userId\":6,\"releaseDate\":\"Apr 1, 2019 12:00:00 AM\",\"purchaseTotal\":32,\"isFree\":0,\"price\":119,\"realPrice\":69,\"status\":2,\"level\":\"C10012\",\"isDiscount\":0,\"discount\":0,\"memoA\":\"RabbitMQ;消息中间件;异步发送;消息通信;服务解耦;确认消费;高并发;限流;死信队列;SpringBoot;中间件\",\"isActive\":1,\"orderBy\":20,\"createTime\":\"Mar 6, 2019 10:06:03 AM\",\"updateTime\":\"Aug 22, 2019 12:18:03 PM\",\"detail\":\"“如何发布服务/接口；如何调用别人服务/接口”的场景在当前互联网应用中并不少见，传统的调用方式就有rmi以及基于soap的webservice等方式。而在当前微服务、分布式时代，更多的则有spring cloud以及dubbo+zookeeper等方式，相对而言，sc更适用于大型体系的互联网应用，而针对微型、小而简的独立服务或者项目而言，dubbo算是应用相当广泛的方式了 ！\\r\\n\\r\\n本课程讲述了当前微服务项目、分布式系统下接口与接口之前、服务与服务之间、项目与项目之间的调度/交互，采用的是dubbo加zookeeper的方式来实战。\\r\\n\\r\\n内容主要包括dubbo的认识与官网开发demo的实战，dubbo服务的开发与发布注册,dubbo服务的订阅与调用,dubbo服务调度之间接口的鉴权以及基于dubbo协议跟http协议以实际的业务场景实战服务与服务之间的调度等等！\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436340780807.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436349410194.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436358369931.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436364539729.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436373937382.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436379796192.png\\r\\n\\r\\nhttps://s11.51cto.com//images/20181210/1544436389420832.png\\r\\n\\r\\n课程课时目录：\\r\\n1课程课时整体介绍\\r\\n2 Dubbo架构剖析与生产消费者开发实战\\r\\n3 SpringBoot整合Dubbo实战分布式服务调度-前言\\r\\n4 SpringBoot整合Dubbo实战独立项目mvc开发服务一\\r\\n5 SpringBoot整合Dubbo实战独立项目mvc开发服务二\\r\\n6 SpringBoot整合Dubbo开发接口服务与发布注册一\\r\\n7 SpringBoot整合Dubbo开发接口服务与发布注册二\\r\\n8 SpringBoot整合Dubbo开发接口服务与发布注册三\\r\\n9 搭建独立SpringBoot微服务项目并整合Dubbo与Zookeeper\\r\\n10 Dubbo服务调用实战一-基于Dubbo协议的调用一\\r\\n11 Dubbo服务调用实战一-基于Dubbo协议的调用二\\r\\n12 Dubbo服务调用实战二-基于Http协议的Rest Api调用一\\r\\n13 Dubbo服务调用实战二-基于Http协议的Rest Api调用二\\r\\n14 Dubbo服务调用实战二-基于Http协议的Rest Api调用三\\r\\n15 Dubbo服务调用实战三-基于Dubbo协议实现基本业务模块的管理\\r\\n16 Dubbo服务调用实战场景-微信公众平台接口实战一\\r\\n17 Dubbo服务调用实战场景-微信公众平台接口实战二\\r\\n18 Dubbo服务调用实战场景-微信公众平台接口实战三\\r\\n19 Dubbo服务接口调用认证-Token机制实战一之创建token\\r\\n20 Dubbo服务接口调用认证-Token机制实战二之存储token\\r\\n21 Dubbo服务接口调用认证-Token机制实战三之验证token\\r\\n22 Dubbo服务接口调用认证-Token机制实战四之缓存token\\r\\n23 Dubbo服务接口调用认证-Token机制实战总结\\r\\n24课程总结\\r\\n \\r\\n总之，本课程介绍的相关知识点在当前互联网项目中将具备很强的参考性与学习性，在企业内部/外部大部分项目中都有设计，加上dubbo项目如今已经重归apache开源基金组织的怀抱，所以，此时不学dubbo，更待何时！！\\r\\n\",\"typeIds\":[4]}', '528', '113.109.111.193', '2019-08-22 12:18:04');
INSERT INTO `sys_log` VALUES ('415', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":1,\"name\":\"SSM整合开发项目之个人博客系统实战视频教程\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000565177469758.png\",\"target\":\"实战完本课程，将更好的提升个人开发企业级应用的能力以及更深入的掌握SSM项目的开发，课件中将提供系统整套源码以及数据库的下载！ \",\"introduction\":\"本课程属于中级课程，适合于具备了一定Java基础以及Spring,SpringMVC和Mybatis核心框架的基础要点，将更深入的基于SSM（Spring+SpringMVC+Mybatis）整合更多的第三方框架并实现一套比较完整的个人博客系统，其中第三方框架包括Shiro，Lucene，Jsoup，Poi，Druid等等，将更好的提升个人开发企业级应用的能力以及更深入的掌握SSM项目的开发\",\"duration\":\"9.5\",\"userId\":6,\"releaseDate\":\"Feb 1, 2019 12:00:00 AM\",\"purchaseTotal\":17,\"isFree\":0,\"price\":189,\"realPrice\":109,\"status\":2,\"level\":\"C10011\",\"isDiscount\":0,\"discount\":0,\"memoA\":\"Spring;SpringMVC;Mybatis;个人博客系统;SSM整合;SSM项目;毕业设计;Java毕业设计;企业项目开发;管理平台\",\"isActive\":1,\"orderBy\":35,\"createTime\":\"Mar 6, 2019 9:52:49 AM\",\"updateTime\":\"Aug 22, 2019 12:22:03 PM\",\"detail\":\"本课程以实际业务场景为出发点、实战撸码为主、理论概念为辅，零基础、“不废话”一步一个脚印讲解当前微服务项目或分布式系统下Springboot的各种应用场景及其涉及的各个核心要点！课程涉及到的要点如下图所示：https://s11.51cto.com//images/20180930/1538276521613176.png\\r\\n即知识要点包括：\\r\\n1、微服务项目构建-单模块与多模块\\r\\n2、整合Mybatis实现CRUD与多数据源实战；\\r\\n3、日志框架整合，项目多环境配置，lombok实战，配置文件变量与对象映射，Validator校验器与自定义注解实战\\r\\n4、开发通用的发送邮件服务，包括简单文本、图片、文档等附件的邮件以及采用Thymeleaf或Freemarker模板动态渲染的HTML邮件\\r\\n5、开发通用的上传文件服务组件，通用的下载文件服务组件，以及借助FileUtils操作前端上传的文件到实际的服务器目录服务\\r\\n6、定时任务@Scheduled、前后端分离时跨域配置、全局异常处理实战\\r\\n7、Poi导入导出Excel，Poi分多个Sheet导入导出Excel并开发通用的导出导入服务\\r\\n8、数据缓存Redis实战，包括StringRedisTemplate缓存员工信息，缓存穿透与缓存雪崩的解决方案实战，RedisTemplate哈希散列存储实战\\r\\n9、消息异步通信篇，包括消息驱动模型ApplicationEvent \\u0026 Listener的实战业务模块解耦、企业级系统或者微服务项目中如何实现异步发送邮箱激活注册账号\\r\\n10、消息异步通信篇RabbitMQ的整合实战实现业务模块异步解耦、消息确认机制实战、并发量配置实战等并用来实现典型的商城用户下单业务场景！\",\"typeIds\":[9,18,20]}', '844', '113.109.111.193', '2019-08-22 12:22:04');
INSERT INTO `sys_log` VALUES ('416', 'admin', '新增课程', 'com.debug.coding.fight.server.controller.admin.CourseController.save()', '{\"id\":9,\"name\":\"SSM整合开发实战之Poi导入导出Excel视频教程\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000453494587009.png\",\"target\":\"1、让初学者或者职场萌新快速掌握如何基于SSM整合第三方框架并采用mvc三层开发模式实现自己的业务模块！  2、如何采用POI实现目前java web应用中业务模块数据以Excel的形式导入导出 \",\"introduction\":\"本课程将给各位小伙伴分享如何基于SSM（Spring+SpringMVC+Mybatis）实现POI导入导出Excel，并讲解目前企业级JavaWeb应用MVC三层模式的开发流程，可让初学者或者职场萌新掌握如何基于SSM整合第三方框架，并采用MVC三层开发模式实现自己的业务模块！\",\"duration\":\"2\",\"userId\":1,\"isFree\":0,\"price\":69,\"realPrice\":35,\"status\":2,\"isDiscount\":0,\"memoA\":\"Spring;SpringMVC;Mybatis;POI;导入导出Excel;Excel导入导出;SSM整合;Java;SSM开发\",\"isActive\":1,\"orderBy\":40,\"createTime\":\"Aug 22, 2019 12:25:03 PM\",\"typeIds\":[12,8]}', '695', '113.109.111.193', '2019-08-22 12:25:04');
INSERT INTO `sys_log` VALUES ('417', 'admin', '新增课程', 'com.debug.coding.fight.server.controller.admin.CourseController.save()', '{\"id\":10,\"name\":\"SSM整合开发实战之导入导出CSV文件视频教程\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000367612326036.png\",\"target\":\"本课程将给大家分享如何基于SSM实现CSV文件的导入导出，并讲解目前企业级JavaWeb应用mvc三层模式的开发流程，可让初学者或者职场萌新掌握如何基于Spring+SpringMVC+Mybatis整合第三方框架并采用mvc三层开发模式实现自己的业务模块！\",\"introduction\":\"本课程将给大家分享如何基于SSM（Spring+SpringMVC+Mybatis）实现CSV文件的导入导出，并讲解目前企业级JavaWeb应用MVC三层模式的开发流程，可让初学者或者职场萌新掌握如何基于Spring+SpingMVC+Mybatis整合第三方框架，并采用MVC三层开发模式实现自己的业务模块！  \",\"duration\":\"1.1\",\"userId\":1,\"isFree\":0,\"price\":69,\"realPrice\":35,\"status\":2,\"isDiscount\":0,\"memoA\":\"Spring;SpringMVC;Mybatis;CSV;导入导出CSV文件;CSV导入导出;SSM整合;Java;SSM开发\",\"isActive\":1,\"orderBy\":45,\"createTime\":\"Aug 22, 2019 12:27:44 PM\",\"typeIds\":[12,9]}', '644', '113.109.111.193', '2019-08-22 12:27:45');
INSERT INTO `sys_log` VALUES ('418', 'admin', '修改课程', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":2,\"name\":\"分布式服务调度中间件Dubbo实战视频教程\",\"cover\":\"http://img.fightjava.com/files/fightCoding/course/20190822/376000291910459083.jpg\",\"target\":\"掌握如何使用dubbo发布服务,如何调用其他项目的服务以及在当前微服务项目、分布式场景的实战\",\"introduction\":\"本课程讲述了当前微服务项目、分布式系统架构下接口与接口之前、服务与服务之间、项目与项目之间的调度/交互，采用dubbo加zookeeper的方式来实战。课程内容主要包括dubbo的认识与官网开发demo的实战，dubbo服务的开发与发布注册,订阅与调用,接口调度的鉴权以及基于dubbo协议跟http协议以实际的业务场景进行实战等等！\",\"duration\":\"8.3\",\"userId\":6,\"releaseDate\":\"Mar 1, 2019 12:00:00 AM\",\"purchaseTotal\":22,\"isFree\":0,\"price\":119,\"realPrice\":69,\"status\":2,\"level\":\"C10012\",\"isDiscount\":0,\"discount\":0,\"memoA\":\"分布式;微服务;Dubbo;服务调度;发布与订阅;接口鉴权;中间件;分布式服务调度;Rest Api;RPC协议;微信公众平台接口\",\"isActive\":1,\"orderBy\":30,\"createTime\":\"Mar 6, 2019 9:58:30 AM\",\"updateTime\":\"Aug 22, 2019 12:28:42 PM\",\"detail\":\"\\\"RabbitMQ实战系列\\\"是一门初中级课程，适用于消息中间件学习者、RabbitMQ实战者以及SpringBoot整合RabbitMQ实战需求者。\\r\\n本课程将首先带领大家拜读RabbitMQ官网的技术开发手册，并用其提供的参考代码来入门，之后会将所学到的知识深入的实战到实际的各种应用场景中，从而加深知识点的理解，\\r\\n其中包括如何实现单一队列多个消费者监听消费、业务服务模块解耦通信、抢单高并发方案的解决、登录成功异步写日志、异步发送邮件、如何实现死信队列以及实现用户下单超时未支付自动失效等等。\\r\\n学习完本课程后，将能更好的理解消息中间件的作用以及应用场景，进一步巩固RabbitMQ各个知识点以及在SpringBoot整合项目中的实际应用！\\r\\n课程课时：\\r\\n第一章\\r\\n1-1：课程课时整体介绍\\r\\n1-2：RabbitMQ认识与安装\\r\\n1-3：RabbitMQ官网拜读-HelloWorld\\r\\n1-4：RabbitMQ官网拜读-生产者消费者以及队列初步认识\\r\\n1-5：RabbitMQ官网拜读-交换机详解之FanoutExchange实战\\r\\n1-6：RabbitMQ官网拜读-交换机详解之DirectExchange+路由实战\\r\\n1-7：RabbitMQ官网拜读-交换机详解之TopicExchange发布订阅模式匹配实战\\r\\n \\r\\n第二章\\r\\n2-1:RabbitMQ实战案例-SpringBoot整合RabbitMQ之整合配置篇一\\r\\n2-2:RabbitMQ实战案例-SpringBoot整合RabbitMQ之整合配置篇二\\r\\n2-3:RabbitMQ实战案例-SpringBoot整合RabbitMQ之Spring事件驱动模型\\r\\n2-4:RabbitMQ实战案例-发送接受消息实战之创建队列交换机路由及绑定\\r\\n2-5:RabbitMQ实战案例-发送接受消息实战之RabbitTemplate发送消息\\r\\n2-6:RabbitMQ实战案例-发送接受消息实战之@RabbitListener接受消息\\r\\n2-7:RabbitMQ实战案例-用户商城抢单并发实战一\\r\\n2-8:RabbitMQ实战案例-用户商城抢单并发实战二\\r\\n2-9:RabbitMQ实战案例-消息确认机制及并发量配置之SimpleMessageListenerContainer实战\\r\\n2-10:RabbitMQ实战案例-消息确认机制ChannelAwareMessageListener实战一\\r\\n2-11:RabbitMQ实战案例-消息确认机制实战之用户商城下单\\r\\n2-12:RabbitMQ实战案例-业务服务模块解耦实战\\r\\n2-13:RabbitMQ实战案例-基于DirectExchange+RoutingKey异步写日志\\r\\n2-14:RabbitMQ实战案例-基于DirectExchange+RoutingKey异步发送邮件\\r\\n2-15:RabbitMQ实战插曲-死信队列DLX,DLK,TTL认识\\r\\n2-16:RabbitMQ实战案例-死信队列消息延迟分发实战\\r\\n2-17:RabbitMQ实战案例-死信队列之用户下单超时没支付自动失效实战一\\r\\n2-18:RabbitMQ实战案例-死信队列之用户下单超时没支付自动失效实战二\\r\\n2-19:RabbitMQ实战案例-死信队列番外篇之动态设置TTL\\r\\n2-20:总结与建议\",\"typeIds\":[6]}', '547', '113.109.111.193', '2019-08-22 12:28:43');
INSERT INTO `sys_log` VALUES ('419', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '10', '89', '113.109.111.193', '2019-08-22 14:26:04');
INSERT INTO `sys_log` VALUES ('420', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":10,\"content\":\"\\u003ch4\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e\\u003c/h4\\u003e\\u003ch4\\u003e初学者，SSM整合开发实战者，CSV导入导出需求者，JavaWeb应用开发学习者，SSM实战学习者\\u003c/h4\\u003e\\u003ch4\\u003e\\u003cspan style\\u003d\\\"font-weight: bold; font-size: large;\\\"\\u003e详情介绍：\\u003c/span\\u003e\\u003c/h4\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程将给大家分享如何基于SSM实现CSV文件的导入导出，并讲解目前企业级JavaWeb应用mvc三层模式的开发流程，可让初学者或者职场萌新掌握如何基于Spring+SpringMVC+Mybatis整合第三方框架并采用mvc三层开发模式实现自己的业务模块！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e学完本课程，学员还能掌握目前企业级JavaWeb应用 业务模块的开发流程以及可以采用这套系统的源码轻松的去整合实战其他的第三方框架并实现自己的业务逻辑！\\u003c/span\\u003e\\u003c/p\\u003e\"}', '178', '113.109.111.193', '2019-08-22 14:30:28');
INSERT INTO `sys_log` VALUES ('421', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":10,\"content\":\"\\u003ch4\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e\\u003c/h4\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e初学者，SSM整合开发实战者，CSV导入导出需求者，JavaWeb应用开发学习者，SSM实战学习者\\u003c/span\\u003e\\u003c/p\\u003e\\u003ch4\\u003e\\u003cspan style\\u003d\\\"font-weight: bold; font-size: large;\\\"\\u003e详情介绍：\\u003c/span\\u003e\\u003c/h4\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程将给大家分享如何基于SSM实现CSV文件的导入导出，并讲解目前企业级JavaWeb应用mvc三层模式的开发流程，可让初学者或者职场萌新掌握如何基于Spring+SpringMVC+Mybatis整合第三方框架并采用mvc三层开发模式实现自己的业务模块！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e学完本课程，学员还能掌握目前企业级JavaWeb应用 业务模块的开发流程以及可以采用这套系统的源码轻松的去整合实战其他的第三方框架并实现自己的业务逻辑！\\u003c/span\\u003e\\u003c/p\\u003e\"}', '153', '113.109.111.193', '2019-08-22 14:31:37');
INSERT INTO `sys_log` VALUES ('422', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":10,\"content\":\"\\u003ch4\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e\\u003cbr\\u003e初学者，SSM整合开发实战者，CSV导入导出需求者，JavaWeb应用开发学习者，SSM实战学习者\\u003cbr\\u003e\\u003cbr\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e\\u003cbr\\u003e本课程将给大家分享如何基于SSM实现CSV文件的导入导出，并讲解目前企业级JavaWeb应用mvc三层模式的开发流程，可让初学者或者职场萌新掌握如何基于Spring+SpringMVC+Mybatis整合第三方框架并采用mvc三层开发模式实现自己的业务模块！\\u003cbr\\u003e学完本课程，学员还能掌握目前企业级JavaWeb应用 业务模块的开发流程以及可以采用这套系统的源码轻松的去整合实战其他的第三方框架并实现自己的业务逻辑！\\u003cbr\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003c/h4\\u003e\"}', '158', '113.109.111.193', '2019-08-22 14:32:09');
INSERT INTO `sys_log` VALUES ('423', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":10,\"content\":\"\\u003ch4\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e\\u003cbr\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e初学者，SSM整合开发实战者，CSV导入导出需求者，JavaWeb应用开发学习者，SSM实战学习者\\u003c/span\\u003e\\u003c/p\\u003e\\u003cbr\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e\\u003cbr\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程将给大家分享如何基于SSM实现CSV文件的导入导出，并讲解目前企业级JavaWeb应用mvc三层模式的开发流程，可让初学者或者职场萌新掌握如何基于Spring+SpringMVC+Mybatis整合第三方框架并采用mvc三层开发模式实现自己的业务模块！\\u003cbr\\u003e学完本课程，学员还能掌握目前企业级JavaWeb应用 业务模块的开发流程以及可以采用这套系统的源码轻松的去整合实战其他的第三方框架并实现自己的业务逻辑！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003c/h4\\u003e\"}', '137', '113.109.111.193', '2019-08-22 14:32:36');
INSERT INTO `sys_log` VALUES ('424', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":10,\"content\":\"\\u003ch4\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程将给大家分享如何基于SSM实现CSV文件的导入导出，并讲解目前企业级JavaWeb应用mvc三层模式的开发流程，可让初学者或者职场萌新掌握如何基于Spring+SpringMVC+Mybatis整合第三方框架并采用mvc三层开发模式实现自己的业务模块！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cbr\\u003e学完本课程，学员还能掌握目前企业级JavaWeb应用 业务模块的开发流程以及可以采用这套系统的源码轻松的去整合实战其他的第三方框架并实现自己的业务逻辑！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003c/h4\\u003e\"}', '157', '113.109.111.193', '2019-08-22 14:33:29');
INSERT INTO `sys_log` VALUES ('425', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":10,\"content\":\"\\u003ch4\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003c/h4\\u003e\"}', '154', '113.109.111.193', '2019-08-22 14:34:30');
INSERT INTO `sys_log` VALUES ('426', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":10,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程将给大家分享如何基于SSM实现CSV文件的导入导出，并讲解目前企业级JavaWeb应用mvc三层模式的开发流程，可让初学者或者职场萌新掌握如何基于Spring+SpringMVC+Mybatis整合第三方框架并采用mvc三层开发模式实现自己的业务模块！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cbr\\u003e学完本课程，学员还能掌握目前企业级JavaWeb应用 业务模块的开发流程以及可以采用这套系统的源码轻松的去整合实战其他的第三方框架并实现自己的业务逻辑！\\u003c/span\\u003e\\u003c/p\\u003e\"}', '80', '0:0:0:0:0:0:0:1', '2019-08-22 14:37:28');
INSERT INTO `sys_log` VALUES ('427', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":10,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程将给大家分享如何基于SSM实现CSV文件的导入导出，并讲解目前企业级JavaWeb应用mvc三层模式的开发流程，可让初学者或者职场萌新掌握如何基于Spring+SpringMVC+Mybatis整合第三方框架并采用mvc三层开发模式实现自己的业务模块！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e学完本课程，学员还能掌握目前企业级JavaWeb应用 业务模块的开发流程以及可以采用这套系统的源码轻松的去整合实战其他的第三方框架并实现自己的业务逻辑！\\u003c/span\\u003e\\u003c/p\\u003e\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-22 14:37:41');
INSERT INTO `sys_log` VALUES ('428', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":10,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e本课程将给大家分享如何基于SSM实现CSV文件的导入导出，并讲解目前企业级JavaWeb应用mvc三层模式的开发流程，可让初学者或者职场萌新掌握如何基于Spring+SpringMVC+Mybatis整合第三方框架并采用mvc三层开发模式实现自己的业务模块！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e学完本课程，学员还能掌握目前企业级JavaWeb应用 业务模块的开发流程以及可以采用这套系统的源码轻松的去整合实战其他的第三方框架并实现自己的业务逻辑！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e初学者，SSM整合开发实战者，CSV导入导出需求者，JavaWeb应用开发学习者，SSM实战学习者\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\"}', '180', '113.109.111.193', '2019-08-22 14:42:03');
INSERT INTO `sys_log` VALUES ('429', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":57,\"parentId\":51,\"courseId\":10,\"type\":2,\"name\":\"1.6 整合前端框架EasyUI\",\"orderBy\":6,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第一章 SSM整合开发实战之导入导出CSV文件\"}', '136', '113.109.111.193', '2019-08-22 14:53:48');
INSERT INTO `sys_log` VALUES ('430', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '10', '180', '113.109.111.193', '2019-08-22 14:54:32');
INSERT INTO `sys_log` VALUES ('431', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":9,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium; font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程是一门专为初学者、职场萌新、SSM入门学习者、POI导入导出Excel需求者以及追求实战者量身定做的，顾名思义，该课程的核心是如何基于SSM和新框架，用Java POI实现Excel的导入导出。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e在课程的学习过程中，你将学到如何基于Maven搭建SSM的项目，并基于此整合第三方框架POI实现业务数据以Excel的形式导入导出，在本课程中，也介绍了如何基于SSM项目实现目前企业级应用采用MVC三层模式来开发实现自己的业务模块，而在本课程的最后，也介绍了如果基于非Maven的方式来整合实现此项目，并最终提供这两种整合方式的系统源码与数据库！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e学完本课程，学员还能掌握目前企业级JavaWeb应用 业务模块的开发流程以及可以采用这套系统的源码轻松的去整合实战其他的第三方框架并实现自己的业务逻辑！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e初学者、职场萌新、SSM入门学习者、POI导入导出Excel需求者、追求实战者\\u003c/span\\u003e\\u003c/p\\u003e\"}', '185', '113.109.111.193', '2019-08-22 14:59:54');
INSERT INTO `sys_log` VALUES ('432', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":60,\"parentId\":59,\"courseId\":9,\"type\":2,\"name\":\"1.1 课程整体介绍\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/8894/183782\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第一章 SSM整合开发实战之POI导入导出Excel\"}', '135', '113.109.111.193', '2019-08-22 15:02:30');
INSERT INTO `sys_log` VALUES ('433', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '9', '178', '113.109.111.193', '2019-08-22 15:06:12');
INSERT INTO `sys_log` VALUES ('434', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":8,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e核心技术栈列表\\u003c/b\\u003e：\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e值得介绍的是，本课程在技术栈层面涵盖了前端和后端的大部分常用技术，包括Spring Boot、Spring MVC、Mybatis、Mybatis-Plus、Shiro(身份认证与资源授权跟会话等等)、Spring AOP、防止XSS攻击、防止SQL注入攻击、过滤器Filter、验证码Kaptcha、热部署插件Devtools、POI、Vue、LayUI、ElementUI、JQuery、HTML、Bootstrap、Freemarker、一键打包部署运行工具Wagon等等，如下图所示：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070402564453.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e课程内容与收益\\u003c/b\\u003e：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（1）学习完本课程之后，各位小伙伴将可以掌握企业应用系统权限管理平台的设计思想、流程，并掌握如何去构建一套最基本的、可付诸企业应用的权限系统；\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（2）从这一权限管理平台中，学会如何去对核心的业务模块进行拆分、设计、关联以及代码实战，并掌握如何基于现有的核心业务模块，快速开发项目中需要的其他业务模块，即套路以及规律的学习。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（3）学习掌握 任意一个业务模块 的前后端开发流程，学会如何从前端撸到后端再到数据库，最终交付出一个完整的功能模块；\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（4）掌握如何去搭建、重构一些通用的核心处理服务（比如通用的Service、处理工具类等等）、可复用的前端组件；同时，也可以掌握如何实现从需求分析\\u0026nbsp;-\\u0026gt;\\u0026nbsp;数据库设计\\u0026nbsp;-\\u0026gt;\\u0026nbsp;前后端与数据库开发\\u0026nbsp;-\\u0026gt;\\u0026nbsp;一键打包上线部署运行 等“一条龙”的开发流程。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070403452052.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: large;\\\"\\u003e\\u003cb\\u003e核心内容介绍\\u003c/b\\u003e：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程是一门具有很强实践性质的“项目实战”课程，即“\\u003cb\\u003e企业应用员工角色权限管理平台\\u003c/b\\u003e”，主要介绍了当前企业级应用系统中员工、部门、岗位、角色、权限、菜单以及其他实体模块的管理；其中，还重点讲解了如何基于Shiro的资源授权实现员工-角色-操作权限、员工-角色-数据权限的管理；在课程的最后，还介绍了如何实现一键打包上传部署运行项目等等。如下图所示为本权限管理平台的数据库设计图：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070404285736.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e以下为项目整体的运行效果截图：\\u0026nbsp;\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070404538119.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405002904.png\\\" style\\u003d\\\"max-width: 100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405078322.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405172638.png\\\" style\\u003d\\\"max-width: 100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405289855.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405404509.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070405523495.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e值得一提的是，在本课程中，Debug也向各位小伙伴介绍了如何在企业级应用系统业务模块的开发中，前端到后端再到数据库，最后再到服务器的上线部署运行等流程，如下图所示：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201908070406328884.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '203', '113.109.111.193', '2019-08-22 15:10:52');
INSERT INTO `sys_log` VALUES ('435', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":43,\"parentId\":40,\"courseId\":8,\"type\":2,\"name\":\"1.1 课程介绍与演示\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/25646/308627\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"updateTime\":\"Aug 20, 2019 5:14:45 PM\",\"parentName\":\"第1章 课程整体介绍\"}', '165', '113.109.111.193', '2019-08-22 15:13:09');
INSERT INTO `sys_log` VALUES ('436', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":44,\"parentId\":40,\"courseId\":8,\"type\":2,\"name\":\"1.2 核心技术列表\",\"orderBy\":2,\"url\":\"https://edu.csdn.net/course/play/25646/308628\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"parentName\":\"第1章 课程整体介绍\"}', '153', '113.109.111.193', '2019-08-22 15:13:18');
INSERT INTO `sys_log` VALUES ('437', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":65,\"parentId\":40,\"courseId\":8,\"type\":2,\"name\":\"1.3 课程要求与收益\",\"orderBy\":3,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 课程整体介绍\"}', '152', '113.109.111.193', '2019-08-22 15:13:52');
INSERT INTO `sys_log` VALUES ('438', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":45,\"parentId\":41,\"courseId\":8,\"type\":2,\"name\":\"2.1 SpringBoot搭建多模块项目\",\"orderBy\":1,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"parentName\":\"第2章 微服务项目的搭建\"}', '194', '113.109.111.193', '2019-08-22 15:14:46');
INSERT INTO `sys_log` VALUES ('439', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":46,\"parentId\":41,\"courseId\":8,\"type\":2,\"name\":\"2.2 体验MVC的开发流程\",\"orderBy\":2,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"updateTime\":\"Aug 21, 2019 5:01:59 PM\",\"parentName\":\"第2章 微服务项目的搭建\"}', '157', '113.109.111.193', '2019-08-22 15:15:01');
INSERT INTO `sys_log` VALUES ('440', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":47,\"parentId\":41,\"courseId\":8,\"type\":2,\"name\":\"2.3 引入热部署工具Devtools\",\"orderBy\":3,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"parentName\":\"第2章 微服务项目的搭建\"}', '151', '113.109.111.193', '2019-08-22 15:15:13');
INSERT INTO `sys_log` VALUES ('441', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":67,\"parentId\":41,\"courseId\":8,\"type\":2,\"name\":\"2.4 数据库详细设计与Mybatis逆向工程\",\"orderBy\":4,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第2章 微服务项目的搭建\"}', '151', '113.109.111.193', '2019-08-22 15:15:41');
INSERT INTO `sys_log` VALUES ('442', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":48,\"parentId\":42,\"courseId\":8,\"type\":2,\"name\":\"3.1 前端提交登录请求\",\"orderBy\":1,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"parentName\":\"第3章 用户登录模块\"}', '158', '113.109.111.193', '2019-08-22 15:17:44');
INSERT INTO `sys_log` VALUES ('443', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":49,\"parentId\":42,\"courseId\":8,\"type\":2,\"name\":\"3.2 Controller接收并处理登录请求\",\"orderBy\":2,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"parentName\":\"第3章 用户登录模块\"}', '156', '113.109.111.193', '2019-08-22 15:17:54');
INSERT INTO `sys_log` VALUES ('444', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":50,\"parentId\":42,\"courseId\":8,\"type\":2,\"name\":\"3.3 整合Shiro实现完整的用户登录一\",\"orderBy\":3,\"url\":\"https://www.roncoo.com/view/1159028108916490242\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"parentName\":\"第3章 用户登录模块\"}', '151', '113.109.111.193', '2019-08-22 15:18:40');
INSERT INTO `sys_log` VALUES ('445', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":68,\"parentId\":42,\"courseId\":8,\"type\":2,\"name\":\"3.4 整合Shiro实现完整的用户登录二\",\"orderBy\":4,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第3章 用户登录模块\"}', '165', '113.109.111.193', '2019-08-22 15:21:05');
INSERT INTO `sys_log` VALUES ('446', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":71,\"parentId\":0,\"courseId\":8,\"type\":1,\"name\":\"第4章 主页模块\",\"orderBy\":4,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '29', '0:0:0:0:0:0:0:1', '2019-08-22 15:23:46');
INSERT INTO `sys_log` VALUES ('447', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":83,\"parentId\":72,\"courseId\":8,\"type\":2,\"name\":\"5.1 jqgrid页面布局与数据库表介绍\",\"orderBy\":1,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第5章 岗位模块\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 15:33:40');
INSERT INTO `sys_log` VALUES ('448', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":6,\"content\":\"\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '52', '0:0:0:0:0:0:0:1', '2019-08-22 16:04:58');
INSERT INTO `sys_log` VALUES ('449', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":6,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e本课程是一门具有很强实践性质的“项目实战”课程，俗称“Java商城秒杀系统”，主要介绍了当前一些电商平台或者商城在举办一些商品秒杀、抢购活动时所涉及的相关业务流程，其中，主要包括“秒杀活动列表的展示”、“秒杀活动详情的获取”、“用户登录认证服务”、“高并发秒杀-抢购业务”、“秒杀成功订单的生成”以及“邮件通知服务”等等，如下图所示：\\u0026nbsp;\\u003c/span\\u003e\\u0026nbsp;\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201907030743388775.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e其中，该“秒杀系统”所对应的整体业务流程图如下图所示：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201907030744225540.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e从该整体业务流程图中可以看出，该秒杀系统业务的梳理debug自认为还是比较清楚的。而值得一提的是，本“秒杀系统”涉及的相关技术栈还是比较新颖、主流的，特别是在如今微服务、分布式系统架构横行的时代，本系统涉及的相关技术栈还是很值得各位小伙伴学习的！如下图所示：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201907030745139190.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e除此之外，由于本课程属于“项目实战”性质的课程，故而学完本课程后，其整体的收益相对于“单一技术栈”的学习收益将会更多！如下图所示：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://img-bss.csdn.net/201907030745435683.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e课程收益：\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e（1）学习完本课程之后，各位小伙伴将可以掌握如何基于Spring Boot构建一个“秒杀系统”或者“高并发业务系统”，掌握 “秒杀系统”在构建的过程中需要哪些技术，包括前端和后端；\\u0026nbsp;\\u003cbr\\u003e（2）学会如何用Jmeter压力测试高并发业务的处理逻辑并对其结果进行分析，掌握Redis、ZooKeeper、Redisson在秒杀系统-高并发业务场景下的作用与实际的代码实战；\\u0026nbsp;\\u003cbr\\u003e（3）掌握高并发业务场景下分布式唯一ID的生成方式以及如何在数据库Mysql层面做优化；\\u0026nbsp;\\u003cbr\\u003e（4）掌握高并发业务场景下消息中间件RabbitMQ异步通信、接口限流的作用，面试必备\\u0026nbsp;\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '54', '0:0:0:0:0:0:0:1', '2019-08-22 16:08:20');
INSERT INTO `sys_log` VALUES ('450', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":141,\"parentId\":136,\"courseId\":6,\"type\":2,\"name\":\"1.1 课程整体介绍\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/25258/296062\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 课程整体介绍\"}', '31', '0:0:0:0:0:0:0:1', '2019-08-22 16:26:58');
INSERT INTO `sys_log` VALUES ('451', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":142,\"parentId\":136,\"courseId\":6,\"type\":2,\"name\":\"1.2 核心技术列表\",\"orderBy\":2,\"url\":\"https://edu.csdn.net/course/play/25258/296063\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 课程整体介绍\"}', '32', '0:0:0:0:0:0:0:1', '2019-08-22 16:27:12');
INSERT INTO `sys_log` VALUES ('452', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":144,\"parentId\":136,\"courseId\":6,\"type\":2,\"name\":\"1.4 系统的整体演示\",\"orderBy\":4,\"url\":\"https://edu.csdn.net/course/play/25258/296065\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 课程整体介绍\"}', '30', '0:0:0:0:0:0:0:1', '2019-08-22 16:27:23');
INSERT INTO `sys_log` VALUES ('453', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '6', '74', '0:0:0:0:0:0:0:1', '2019-08-22 16:35:21');
INSERT INTO `sys_log` VALUES ('454', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":5,\"content\":\"\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '43', '0:0:0:0:0:0:0:1', '2019-08-22 16:36:08');
INSERT INTO `sys_log` VALUES ('455', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":5,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e课程目标：\\u003c/span\\u003e给予需要入门SpringBoot的童鞋以及微服务项目SpringBoot开发者实战指导，以实际的业务场景为出发点实战目前微服务项目中涉及的常见业务模块，解决一些典型的问题。相信学习完本套课程后，诸位童鞋将对微服务项目、SpringBoot的开发有更为深入的理解！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e本课程以实际业务场景为出发点、实战撸码为主、理论概念为辅，零基础、“不废话”一步一个脚印讲解当前微服务项目或分布式系统下Springboot的各种应用场景及其涉及的各个核心要点！课程涉及到的要点如下图所示：\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20180930/1538276521613176.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e即本课程的主要知识要点包括：\\u003cbr\\u003e（1）微服务项目构建-单模块与多模块\\u003cbr\\u003e（2）整合\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003eMybatis\\u003c/span\\u003e实现CRUD与多数据源实战；\\u003cbr\\u003e（3）日志框架整合，项目多环境配置，\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003elombok\\u003c/span\\u003e实战，配置文件变量与对象映射，Validator校验器与自定义注解实战\\u003cbr\\u003e（4）开发通用的发送邮件服务，包括简单文本、图片、文档等附件的邮件以及采用\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003eThymeleaf\\u003c/span\\u003e或Freemarker模板动态渲染的HTML邮件\\u003cbr\\u003e（5）开发通用的\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003e上传文件服务\\u003c/span\\u003e组件，通用的下载文件服务组件，以及借助FileUtils操作前端上传的文件到实际的服务器目录服务\\u003cbr\\u003e（6）\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003e定时任务\\u003c/span\\u003e@Scheduled、前后端分离时跨域配置、全局异常处理实战\\u003cbr\\u003e（7）\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003ePoi导入导出Excel\\u003c/span\\u003e，Poi分多个Sheet导入导出Excel并开发通用的导出导入服务\\u003cbr\\u003e（8）数据缓存\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003eRedis\\u003c/span\\u003e实战，包括StringRedisTemplate缓存员工信息，缓存穿透与缓存雪崩的解决方案实战，RedisTemplate哈希散列存储实战\\u003cbr\\u003e（9）消息异步通信篇，包括消息驱动模型ApplicationEvent \\u0026amp; Listener的实战业务模块解耦、企业级系统或者微服务项目中如何实现异步发送邮箱激活注册账号\\u003cbr\\u003e（10）消息异步通信篇\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003eRabbitMQ\\u003c/span\\u003e的整合实战实现业务模块异步解耦、消息确认机制实战、并发量配置实战等并用来实现典型的商城用户下单业务场景！\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e......\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium; font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003eSpringBoot初学者，SpringBoot需求者，微服务开发者，分布式系统学习者，Java进阶\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '52', '0:0:0:0:0:0:0:1', '2019-08-22 16:41:00');
INSERT INTO `sys_log` VALUES ('456', 'admin', '设置课时免费', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.free()', '148', '38', '0:0:0:0:0:0:0:1', '2019-08-22 16:44:30');
INSERT INTO `sys_log` VALUES ('457', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":148,\"parentId\":137,\"courseId\":6,\"type\":2,\"name\":\"2.4 秒杀系统整体业务流程介绍\",\"orderBy\":4,\"url\":\"https://edu.csdn.net/course/play/25258/296074\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 4:44:30 PM\",\"parentName\":\"第2章 微服务项目的搭建\"}', '83', '0:0:0:0:0:0:0:1', '2019-08-22 16:44:37');
INSERT INTO `sys_log` VALUES ('458', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":160,\"parentId\":138,\"courseId\":6,\"type\":2,\"name\":\"3.11 死信队列失效超时未支付的订单二\",\"orderBy\":11,\"url\":\"https://edu.csdn.net/course/play/25258/296092\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第3章 秒杀业务代码实战\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 16:44:54');
INSERT INTO `sys_log` VALUES ('459', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":167,\"parentId\":139,\"courseId\":6,\"type\":2,\"name\":\"4.3 基于Redisson的分布式锁优化抢单逻辑\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/25258/296078\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第4章 秒杀逻辑优化\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 16:45:07');
INSERT INTO `sys_log` VALUES ('460', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":173,\"parentId\":0,\"courseId\":5,\"type\":1,\"name\":\"第1章 SpringBoot基础技术栈入门\",\"orderBy\":1,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '23', '0:0:0:0:0:0:0:1', '2019-08-22 16:50:49');
INSERT INTO `sys_log` VALUES ('461', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":192,\"parentId\":189,\"courseId\":5,\"type\":2,\"name\":\"2.3 常见问题解决与发送带HTML文本邮件\",\"orderBy\":3,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第2章 发送邮件服务实战\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-22 16:52:27');
INSERT INTO `sys_log` VALUES ('462', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":194,\"parentId\":0,\"courseId\":5,\"type\":1,\"name\":\"第3章 上传文件服务实战\",\"orderBy\":3,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '21', '0:0:0:0:0:0:0:1', '2019-08-22 16:53:41');
INSERT INTO `sys_log` VALUES ('463', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":199,\"parentId\":0,\"courseId\":5,\"type\":1,\"name\":\"第4章 番外实战之其他技术栈\",\"orderBy\":4,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '21', '0:0:0:0:0:0:0:1', '2019-08-22 16:56:12');
INSERT INTO `sys_log` VALUES ('464', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":216,\"parentId\":0,\"courseId\":5,\"type\":1,\"name\":\"第7章 消息中间件RabbitMQ实战篇\",\"orderBy\":7,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '21', '0:0:0:0:0:0:0:1', '2019-08-22 17:03:38');
INSERT INTO `sys_log` VALUES ('465', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":174,\"parentId\":173,\"courseId\":5,\"type\":2,\"name\":\"1.1 课程课时整体介绍\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/9619/204983\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 SpringBoot基础技术栈入门\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 17:08:04');
INSERT INTO `sys_log` VALUES ('466', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":178,\"parentId\":173,\"courseId\":5,\"type\":2,\"name\":\"1.5 构建多模块项目实战三\",\"orderBy\":5,\"url\":\"https://edu.csdn.net/course/play/9619/204987\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 SpringBoot基础技术栈入门\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 17:08:21');
INSERT INTO `sys_log` VALUES ('467', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":180,\"parentId\":173,\"courseId\":5,\"type\":2,\"name\":\"1.7 SpringBoot整合Mybatis之JavaWeb应用MVC三层模式开发流程实战一\",\"orderBy\":7,\"url\":\"https://edu.csdn.net/course/play/9619/204989\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 SpringBoot基础技术栈入门\"}', '45', '0:0:0:0:0:0:0:1', '2019-08-22 17:08:39');
INSERT INTO `sys_log` VALUES ('468', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":181,\"parentId\":173,\"courseId\":5,\"type\":2,\"name\":\"1.8 SpringBoot整合Mybatis之JavaWeb应用MVC三层模式开发流程实战二\",\"orderBy\":8,\"url\":\"https://edu.csdn.net/course/play/9619/204990\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 SpringBoot基础技术栈入门\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-22 17:08:55');
INSERT INTO `sys_log` VALUES ('469', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":186,\"parentId\":173,\"courseId\":5,\"type\":2,\"name\":\"1.13 多数据源实战之配置篇\",\"orderBy\":13,\"url\":\"https://edu.csdn.net/course/play/9619/204995\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 SpringBoot基础技术栈入门\"}', '29', '0:0:0:0:0:0:0:1', '2019-08-22 17:09:05');
INSERT INTO `sys_log` VALUES ('470', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":192,\"parentId\":189,\"courseId\":5,\"type\":2,\"name\":\"2.3 常见问题解决与发送带HTML文本邮件\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9619/205000\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 4:52:26 PM\",\"parentName\":\"第2章 发送邮件服务实战\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 17:09:28');
INSERT INTO `sys_log` VALUES ('471', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":195,\"parentId\":194,\"courseId\":5,\"type\":2,\"name\":\"3.1 开发通用的上传文件服务\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/9619/205002\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第3章 上传文件服务实战\"}', '38', '0:0:0:0:0:0:0:1', '2019-08-22 17:09:45');
INSERT INTO `sys_log` VALUES ('472', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":222,\"parentId\":216,\"courseId\":5,\"type\":2,\"name\":\"7.6 RabbitMQ消息确认机制与并发量配置实战之商城用户下单一\",\"orderBy\":6,\"url\":\"https://edu.csdn.net/course/play/9619/205025\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第7章 消息中间件RabbitMQ实战篇\"}', '36', '0:0:0:0:0:0:0:1', '2019-08-22 17:09:58');
INSERT INTO `sys_log` VALUES ('473', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '5', '48', '0:0:0:0:0:0:0:1', '2019-08-22 17:10:12');
INSERT INTO `sys_log` VALUES ('474', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":4,\"content\":\"\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '40', '0:0:0:0:0:0:0:1', '2019-08-22 17:10:57');
INSERT INTO `sys_log` VALUES ('475', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":4,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e课程目标：\\u003c/span\\u003e本课程将带领大家认识、理解并实战消息中间件RabbitMQ。在学习完本课程后，各位小伙伴将能更好的理解消息中间件的作用以及应用场景，进一步巩固RabbitMQ各个知识点以及在SpringBoot整合项目中的实际应用，在学完之后，你会发现，其实RabbitMQ也就那么一回事！！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium; font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\\"RabbitMQ实战系列\\\"是一门初中级课程，适用于消息中间件学习者、RabbitMQ实战者以及SpringBoot整合RabbitMQ实战需求者，\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程将首先带领大家拜读RabbitMQ官网的技术开发手册，并用其提供的参考代码来入门，之后会将所学到的知识深入的实战到实际的各种应用场景中，从而加深知识点的理解。\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e其中包括如何实现单一队列多个消费者监听消费、业务服务模块解耦通信、抢单高并发方案的解决、登录成功异步写日志、异步发送邮件、如何实现死信队列以及实现用户下单超时未支付自动失效等等。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e学习完本课程后，将能更好的理解消息中间件的作用以及应用场景，进一步巩固RabbitMQ各个知识点以及在SpringBoot整合项目中的实际应用！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e课程收益：\\u003c/span\\u003e\\u003cbr\\u003e（1）由浅入深理解消息中间件RabbitMQ的各大专用名词、作用以及在项目中的使用\\u0026nbsp;\\u003cbr\\u003e（2）采用RabbitMQ实战解决企业级应用或微服务项目中常见的业务模块与典型的问题\\u0026nbsp;\\u003cbr\\u003e（3）基于SpringBoot整合RabbitMQ实战业务模块解耦、异步通信、死信队列实战与高并发场景的解决方案等等\\u0026nbsp;\\u003c/span\\u003e\\u0026nbsp;\\u0026nbsp;\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e消息中间件学习者、RabbitMQ实战者以及SpringBoot整合RabbitMQ实战需求者\\u0026nbsp;\\u0026nbsp;\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '50', '0:0:0:0:0:0:0:1', '2019-08-22 17:16:42');
INSERT INTO `sys_log` VALUES ('476', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":228,\"parentId\":0,\"courseId\":4,\"type\":1,\"name\":\"第2章 SpringBoot整合RabbitMQ实战\",\"orderBy\":2,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '26', '0:0:0:0:0:0:0:1', '2019-08-22 17:24:44');
INSERT INTO `sys_log` VALUES ('477', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":230,\"parentId\":227,\"courseId\":4,\"type\":2,\"name\":\"1.2 认识与安装RabbitMQ\",\"orderBy\":2,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 Rabbitmq官网拜读\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-22 17:25:49');
INSERT INTO `sys_log` VALUES ('478', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":247,\"parentId\":228,\"courseId\":4,\"type\":2,\"name\":\"2.12 业务服务模块解耦实战\",\"orderBy\":12,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第2章 SpringBoot整合RabbitMQ实战\"}', '32', '0:0:0:0:0:0:0:1', '2019-08-22 17:32:10');
INSERT INTO `sys_log` VALUES ('479', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":229,\"parentId\":227,\"courseId\":4,\"type\":2,\"name\":\"1.1 课程课时整体介绍\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/9314/195406\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 Rabbitmq官网拜读\"}', '250', '0:0:0:0:0:0:0:1', '2019-08-22 17:34:53');
INSERT INTO `sys_log` VALUES ('480', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":231,\"parentId\":227,\"courseId\":4,\"type\":2,\"name\":\"1.3 RabbitMQ官网拜读之HelloWorld实战\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9314/195408\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 Rabbitmq官网拜读\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 17:35:02');
INSERT INTO `sys_log` VALUES ('481', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":236,\"parentId\":228,\"courseId\":4,\"type\":2,\"name\":\"2.1 SpringBoot整合RabbitMQ之整合配置篇一\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/9314/195413\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第2章 SpringBoot整合RabbitMQ实战\"}', '32', '0:0:0:0:0:0:0:1', '2019-08-22 17:35:11');
INSERT INTO `sys_log` VALUES ('482', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":243,\"parentId\":228,\"courseId\":4,\"type\":2,\"name\":\"2.8 用户商城抢单并发实战二\",\"orderBy\":8,\"url\":\"https://edu.csdn.net/course/play/9314/195420\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第2章 SpringBoot整合RabbitMQ实战\"}', '35', '0:0:0:0:0:0:0:1', '2019-08-22 17:35:23');
INSERT INTO `sys_log` VALUES ('483', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '4', '52', '0:0:0:0:0:0:0:1', '2019-08-22 17:35:37');
INSERT INTO `sys_log` VALUES ('484', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":3,\"content\":\"\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '32', '0:0:0:0:0:0:0:1', '2019-08-22 18:21:50');
INSERT INTO `sys_log` VALUES ('485', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":3,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-weight: bold; font-size: medium;\\\"\\u003e课程目标：\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e掌握微服务、分布式系统的相关中间件实战实现分布式锁；基于微服务实现抢单/秒杀系统的高并发\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-weight: bold; font-size: medium;\\\"\\u003e详情介绍：\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e“在某个时刻高并发多线程访问共享资源”的场景在当前互联网应用中并不少见，在单体应用时代，更多的是采用synchronized等jdk自带的方式来控制“共享资源的访问”，即加同步锁。但在分布式系统时代，服务-应用独立部署或者集群部署的情况下，jdk自带的方式却显得力不从心，“分布式锁”的出现便解决了这个难题。\\u003c/span\\u003e\\u003cbr\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181104/1541322961631096.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程将介绍分布式架构下、微服务项目分布式锁的实现方式，包括数据库级别锁、基于Redis的原子操作、基于Zookeeper的实现、基于Redisson的实现等方式。\\u003cbr\\u003e\\u003cbr\\u003e在实战完各种方式后，我也分享介绍了两个很实用的实际业务场景：“重复提交”、“CRM系统销售人员抢单”（抢单系统抢单），将之前所学到的分布式锁实战实现方式进行了充分的利用，更进一步的巩固了分布式锁的理解！\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181104/1541322954455505.jpg\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181104/1541322988343751.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e分布式系统开发者；分布式锁实战者；Redis/Zookeeper/抢单系统学习者；微服务开发者\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '50', '0:0:0:0:0:0:0:1', '2019-08-22 18:24:39');
INSERT INTO `sys_log` VALUES ('486', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":39,\"parentId\":0,\"courseId\":3,\"type\":1,\"name\":\"第1章 课程整体介绍\",\"orderBy\":1,\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 4:34:08 PM\",\"parentName\":\"一级菜单\"}', '84', '113.109.111.193', '2019-08-22 19:59:09');
INSERT INTO `sys_log` VALUES ('487', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":39,\"parentId\":0,\"courseId\":3,\"type\":1,\"name\":\"第1章 课程整体介绍\",\"orderBy\":1,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 4:34:08 PM\",\"parentName\":\"一级菜单\"}', '82', '113.109.111.193', '2019-08-22 19:59:13');
INSERT INTO `sys_log` VALUES ('488', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":256,\"parentId\":0,\"courseId\":3,\"type\":1,\"name\":\"第2章 分布式锁几种实现方式\",\"orderBy\":2,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '47', '0:0:0:0:0:0:0:1', '2019-08-22 20:09:54');
INSERT INTO `sys_log` VALUES ('489', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":268,\"parentId\":256,\"courseId\":3,\"type\":2,\"name\":\"2.7 基于Redisson实战实现分布式锁\",\"orderBy\":7,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第2章 分布式锁几种实现方式\"}', '34', '0:0:0:0:0:0:0:1', '2019-08-22 20:14:28');
INSERT INTO `sys_log` VALUES ('490', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":266,\"parentId\":256,\"courseId\":3,\"type\":2,\"name\":\"2.5 基于Zookeeper实战实现分布式锁一\",\"orderBy\":5,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第2章 分布式锁几种实现方式\"}', '32', '0:0:0:0:0:0:0:1', '2019-08-22 20:14:46');
INSERT INTO `sys_log` VALUES ('491', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":267,\"parentId\":256,\"courseId\":3,\"type\":2,\"name\":\"2.6 基于Zookeeper实战实现分布式锁二\",\"orderBy\":6,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第2章 分布式锁几种实现方式\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 20:14:55');
INSERT INTO `sys_log` VALUES ('492', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":259,\"parentId\":39,\"courseId\":3,\"type\":2,\"name\":\"1.1 课程课时整体介绍\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/9986/212504\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 课程整体介绍\"}', '40', '0:0:0:0:0:0:0:1', '2019-08-22 20:19:09');
INSERT INTO `sys_log` VALUES ('493', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":261,\"parentId\":39,\"courseId\":3,\"type\":2,\"name\":\"1.3 重现分布式锁的高并发场景\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9986/212506\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 课程整体介绍\"}', '34', '0:0:0:0:0:0:0:1', '2019-08-22 20:19:23');
INSERT INTO `sys_log` VALUES ('494', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":264,\"parentId\":256,\"courseId\":3,\"type\":2,\"name\":\"2.3 基于Redis实现分布式锁一\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9986/212509\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第2章 分布式锁几种实现方式\"}', '40', '0:0:0:0:0:0:0:1', '2019-08-22 20:19:35');
INSERT INTO `sys_log` VALUES ('495', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":267,\"parentId\":256,\"courseId\":3,\"type\":2,\"name\":\"2.6 基于Zookeeper实战实现分布式锁二\",\"orderBy\":6,\"url\":\"https://edu.csdn.net/course/play/9986/212512\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:14:54 PM\",\"parentName\":\"第2章 分布式锁几种实现方式\"}', '34', '0:0:0:0:0:0:0:1', '2019-08-22 20:19:50');
INSERT INTO `sys_log` VALUES ('496', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":271,\"parentId\":257,\"courseId\":3,\"type\":2,\"name\":\"3.3 典型业务场景实战之CRM系统销售人员抢单一\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9986/212516\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第3章 分布式锁实战之典型业务场景\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-22 20:20:11');
INSERT INTO `sys_log` VALUES ('497', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":2,\"content\":\"\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '39', '0:0:0:0:0:0:0:1', '2019-08-22 20:21:10');
INSERT INTO `sys_log` VALUES ('498', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":2,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e课程目标：\\u003c/span\\u003e掌握如何使用Dubbo发布服务,如何调用其他项目的服务以及在当前微服务项目、分布式场景的实战\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e“如何发布服务/接口；如何调用别人服务/接口”的场景在当前互联网应用中并不少见，传统的调用方式就有RMI以及基于SOAP的Webservice等方式。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e而在当前微服务、分布式时代，更多的则有SpringCloud以及Dubbo+Zookeeper等方式，相对而言，sc更适用于大型体系的互联网应用，而针对微型、小而简的独立服务或者项目而言，Dubbo算是应用相当广泛的方式了 ！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181210/1544436340780807.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181210/1544436349410194.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181210/1544436358369931.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181210/1544436364539729.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181210/1544436373937382.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181210/1544436379796192.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181210/1544436389420832.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e总之，本课程介绍的相关知识点在当前互联网项目中将具备很强的参考性与学习性，在企业内部/外部大部分项目中都有设计，加上Dubbo项目如今已经重归Apache开源基金组织的怀抱，\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74); font-weight: bold;\\\"\\u003e所以，此时不学Dubbo，更待何时！！\\u003c/span\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003eDubbo学习实战者,微服务分布式系统实战者，SpringBoot整合Dubbo,Java学习者\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003c/p\\u003e\"}', '61', '0:0:0:0:0:0:0:1', '2019-08-22 20:26:38');
INSERT INTO `sys_log` VALUES ('499', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":32,\"parentId\":0,\"courseId\":2,\"type\":1,\"name\":\"第1章 课程课时整体介绍\",\"orderBy\":1,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '21', '0:0:0:0:0:0:0:1', '2019-08-22 20:31:01');
INSERT INTO `sys_log` VALUES ('500', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":33,\"parentId\":0,\"courseId\":2,\"type\":1,\"name\":\"第2章 SpringBoot整合Dubbo开发实战\",\"orderBy\":2,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '21', '0:0:0:0:0:0:0:1', '2019-08-22 20:33:27');
INSERT INTO `sys_log` VALUES ('501', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":34,\"parentId\":0,\"courseId\":2,\"type\":1,\"name\":\"第3章 Dubbo服务调用实战\",\"orderBy\":3,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '20', '0:0:0:0:0:0:0:1', '2019-08-22 20:33:48');
INSERT INTO `sys_log` VALUES ('502', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":35,\"parentId\":0,\"courseId\":2,\"type\":1,\"name\":\"第4章 Dubbo服务调用之典型业务场景实战\",\"orderBy\":4,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '21', '0:0:0:0:0:0:0:1', '2019-08-22 20:34:37');
INSERT INTO `sys_log` VALUES ('503', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":279,\"parentId\":0,\"courseId\":2,\"type\":2,\"name\":\"第5章 Dubbo服务调用之接口认证实战\",\"orderBy\":5,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '21', '0:0:0:0:0:0:0:1', '2019-08-22 20:37:42');
INSERT INTO `sys_log` VALUES ('504', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":36,\"parentId\":32,\"courseId\":2,\"type\":2,\"name\":\"1.1 课程课时整体介绍\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/10382/221762\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 4:02:07 PM\",\"parentName\":\"第1章 课程课时整体介绍\"}', '31', '0:0:0:0:0:0:0:1', '2019-08-22 20:38:37');
INSERT INTO `sys_log` VALUES ('505', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":37,\"parentId\":32,\"courseId\":2,\"type\":2,\"name\":\"1.2 Dubbo架构剖析与生产消费者开发实战\",\"orderBy\":2,\"url\":\"https://edu.csdn.net/course/play/9314/195407\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 4:00:05 PM\",\"parentName\":\"第1章 课程课时整体介绍\"}', '41', '0:0:0:0:0:0:0:1', '2019-08-22 20:39:00');
INSERT INTO `sys_log` VALUES ('506', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":279,\"parentId\":0,\"courseId\":2,\"type\":1,\"name\":\"第5章 Dubbo服务调用之接口认证实战\",\"orderBy\":5,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:37:42 PM\",\"parentName\":\"一级菜单\"}', '24', '0:0:0:0:0:0:0:1', '2019-08-22 20:47:26');
INSERT INTO `sys_log` VALUES ('507', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":286,\"parentId\":33,\"courseId\":2,\"type\":2,\"name\":\"2.6 SpringBoot整合Dubbo开发接口服务与发布注册三\",\"orderBy\":6,\"url\":\"https://edu.csdn.net/course/play/10382/221769\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第2章 SpringBoot整合Dubbo开发实战\"}', '35', '0:0:0:0:0:0:0:1', '2019-08-22 20:50:38');
INSERT INTO `sys_log` VALUES ('508', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":291,\"parentId\":34,\"courseId\":2,\"type\":2,\"name\":\"3.4 基于Http协议的Rest Api调用二\",\"orderBy\":4,\"url\":\"https://edu.csdn.net/course/play/10382/221772\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第3章 Dubbo服务调用实战\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 20:50:49');
INSERT INTO `sys_log` VALUES ('509', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":291,\"parentId\":34,\"courseId\":2,\"type\":2,\"name\":\"3.4 基于Http协议的Rest Api调用二\",\"orderBy\":4,\"url\":\"https://edu.csdn.net/course/play/10382/221774\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:50:48 PM\",\"parentName\":\"第3章 Dubbo服务调用实战\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 20:51:27');
INSERT INTO `sys_log` VALUES ('510', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":289,\"parentId\":34,\"courseId\":2,\"type\":2,\"name\":\"3.2 基于Dubbo协议的调用二\",\"orderBy\":2,\"url\":\"https://edu.csdn.net/course/play/10382/221772\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第3章 Dubbo服务调用实战\"}', '40', '0:0:0:0:0:0:0:1', '2019-08-22 20:51:49');
INSERT INTO `sys_log` VALUES ('511', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":299,\"parentId\":279,\"courseId\":2,\"type\":2,\"name\":\"5.3 Token机制实战三之验证Token\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/10382/221782\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第5章 Dubbo服务调用之接口认证实战\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 20:52:15');
INSERT INTO `sys_log` VALUES ('512', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '2', '67', '0:0:0:0:0:0:0:1', '2019-08-22 20:52:24');
INSERT INTO `sys_log` VALUES ('513', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":1,\"content\":\"\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 20:52:59');
INSERT INTO `sys_log` VALUES ('514', 'admin', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":1,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程适合于具备了一定Java基础以及Spring,SpringMVC跟Mybatis核心框架的基础要点、本课程将更深入的基于SSM整合更多的第三方框架并实现一套比较完整的个人博客系统，其中第三方框架包括Shiro，Lucene，Jsoup，Poi，Druid等等，学完本课程，将能更好的提升个人开发企业级应用的能力以及更深入的掌握SSM项目的开发。\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e其中课程将从以下四大模块展开讲解，\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（1）系统整体功能介绍：其中包括系统架构的整体搭建以及项目包目录结构的规范化搭建\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（2）系统整体业务模块开发：此模块才是系统的核心模块，其中包括系统涉及到的各大业务模块的实战开发，如博客类型模块、博客模块、评论模块、友情链接模块、博主信息模块、以及登录安全认证模块等的实战开发；在这一模块中涉及的技术有很多，包括shiro实现登录安全认证、lucene实现全文信息检索、springmvc实现图片等附件的上传存储、ueditor的整合实现图片的上传存储等等\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（3）系统管理模块：这一模块主要是为了辅助系统能更高效率的运行以及重构开发一些工具类入密码工具类。其中值得一提的是在这里采用了Spring的事件驱动模型（核心组件为ApplicationEvent以及ApplicationListener）来实现业务服务模块的异步通信（起到解耦的作用！）\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（4）前端模块开发：这是最后的一大模块的实战。前端模块，顾名思义当然是为了更好的展示系统的整体效果，在这里值得一提的是全文信息检索lucene、爬虫框架jsoup的应用以及通用下载工具的开发，这些应用框架以及工具类均可以在其他的JavaWeb应用中使用，具有很好的可重用性！\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u0026nbsp; \\u0026nbsp; 整体来说，这个系统具有很强的实战性，对于职场萌新以及追求SSM实战的人来讲均能很好的练手！当然啦，此系统也可以作为课程或者毕业设计的参考！\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u0026nbsp; \\u0026nbsp;\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e 系统环境要求：\\u003c/span\\u003ewindows下开发，IDE采用Eclipse，数据库采用Mysql5.6，数据库管理工具采用Navicat，模拟浏览器请求工具采用Postman\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u0026nbsp; \\u0026nbsp; \\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e推荐学习资料：\\u003c/span\\u003e\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003eSSM的整合入门学习资料 可以参考我的另一门视频课程：\\u003c/span\\u003e\\u003ca href\\u003d\\\"http://www.fightjava.com/web/index/course/detail/9\\\" style\\u003d\\\"font-size: medium; background-color: rgb(255, 255, 255);\\\"\\u003ehttp://www.fightjava.com/web/index/course/detail/9\\u003c/a\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e（SSM整合开发实战之POI导入导出Excel）。而此系统的源码数据库以及mybatis逆向工程可在最后的两节视频中的资料下载中进行下载！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u0026nbsp; \\u0026nbsp; \\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e学后技能提升：\\u003c/span\\u003e若是能坚持将视频教程看完，并配合系统源码的Debug实战，吃透整套系统源码，相信将能提升个人开发企业级JavaWeb应用的能力以及更深入的掌握SSM项目的开发，甚至能够独立以SSM作为和新框架搭建JavaWeb企业级的应用！\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '53', '0:0:0:0:0:0:0:1', '2019-08-22 21:00:23');
INSERT INTO `sys_log` VALUES ('515', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":25,\"parentId\":0,\"courseId\":1,\"type\":1,\"name\":\"第1章 系统整体功能介绍\",\"orderBy\":1,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:06 AM\",\"parentName\":\"一级菜单\"}', '20', '0:0:0:0:0:0:0:1', '2019-08-22 21:01:15');
INSERT INTO `sys_log` VALUES ('516', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":26,\"parentId\":0,\"courseId\":1,\"type\":1,\"name\":\"第2章 系统整体业务模块开发\",\"orderBy\":2,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:06 AM\",\"parentName\":\"一级菜单\"}', '48', '0:0:0:0:0:0:0:1', '2019-08-22 21:01:29');
INSERT INTO `sys_log` VALUES ('517', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":304,\"parentId\":0,\"courseId\":1,\"type\":2,\"name\":\"第4章 前端模块与课程总结\",\"orderBy\":4,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"一级菜单\"}', '25', '0:0:0:0:0:0:0:1', '2019-08-22 21:02:18');
INSERT INTO `sys_log` VALUES ('518', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":27,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.1 系统整体功能演示\",\"orderBy\":0,\"url\":\"https://edu.csdn.net/course/play/9139/190537\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '34', '0:0:0:0:0:0:0:1', '2019-08-22 21:02:44');
INSERT INTO `sys_log` VALUES ('519', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":27,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.1 系统整体功能演示\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/9139/190537\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '35', '0:0:0:0:0:0:0:1', '2019-08-22 21:02:50');
INSERT INTO `sys_log` VALUES ('520', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":28,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.2 基于SSM核心框架搭建系统整体架构\",\"orderBy\":2,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '35', '0:0:0:0:0:0:0:1', '2019-08-22 21:03:06');
INSERT INTO `sys_log` VALUES ('521', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":28,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.2 基于SSM核心框架搭建系统整体架构\",\"orderBy\":2,\"url\":\"https://edu.csdn.net/course/play/9139/190538\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '35', '0:0:0:0:0:0:0:1', '2019-08-22 21:03:17');
INSERT INTO `sys_log` VALUES ('522', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":29,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.3 基于MVC开发模式构建项目目录结构\",\"orderBy\":3,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '34', '0:0:0:0:0:0:0:1', '2019-08-22 21:03:33');
INSERT INTO `sys_log` VALUES ('523', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":29,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.3 基于MVC开发模式构建项目目录结构\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9139/190539\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '52', '0:0:0:0:0:0:0:1', '2019-08-22 21:04:00');
INSERT INTO `sys_log` VALUES ('524', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":305,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.4 系统前后端开发流程介绍\",\"orderBy\":4,\"url\":\"https://edu.csdn.net/course/play/9139/190540\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '249', '0:0:0:0:0:0:0:1', '2019-08-22 21:04:10');
INSERT INTO `sys_log` VALUES ('525', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":30,\"parentId\":26,\"courseId\":1,\"type\":2,\"name\":\"2.1 整合Shiro实现登录安全认证一\",\"orderBy\":1,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"parentName\":\"第2章 系统整体业务模块开发\"}', '35', '0:0:0:0:0:0:0:1', '2019-08-22 21:04:46');
INSERT INTO `sys_log` VALUES ('526', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":31,\"parentId\":26,\"courseId\":1,\"type\":2,\"name\":\"2.2 整合Shiro实现登录安全认证二\",\"orderBy\":2,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"parentName\":\"第2章 系统整体业务模块开发\"}', '33', '0:0:0:0:0:0:0:1', '2019-08-22 21:05:04');
INSERT INTO `sys_log` VALUES ('527', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":304,\"parentId\":0,\"courseId\":1,\"type\":1,\"name\":\"第4章 前端模块与课程总结\",\"orderBy\":4,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 9:02:17 PM\",\"parentName\":\"一级菜单\"}', '28', '0:0:0:0:0:0:0:1', '2019-08-22 21:10:22');
INSERT INTO `sys_log` VALUES ('528', 'admin', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":327,\"parentId\":304,\"courseId\":1,\"type\":2,\"name\":\"4.4 首页实战开发-右侧分类栏目列表\",\"orderBy\":4,\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第4章 前端模块与课程总结\"}', '34', '0:0:0:0:0:0:0:1', '2019-08-22 21:11:23');
INSERT INTO `sys_log` VALUES ('529', 'admin', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '1', '45', '0:0:0:0:0:0:0:1', '2019-08-22 21:13:06');
INSERT INTO `sys_log` VALUES ('530', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.admin.SysMenuController.update()', '{\"menuId\":42,\"parentId\":41,\"parentName\":\"博客模块\",\"name\":\"博客专题\",\"url\":\"modules/blog/blogType.html\",\"perms\":\"sys:blog:type\",\"type\":1,\"icon\":\"fa fa-envelope-open\",\"orderNum\":0}', '65', '0:0:0:0:0:0:0:1', '2019-08-23 10:16:24');
INSERT INTO `sys_log` VALUES ('531', 'admin', '修改菜单', 'com.debug.coding.fight.server.controller.admin.SysMenuController.update()', '{\"menuId\":67,\"parentId\":66,\"parentName\":\"课程模块\",\"name\":\"课程专题\",\"url\":\"modules/course/courseType.html\",\"perms\":\"sys:course:type\",\"type\":1,\"icon\":\"fa fa-arrows\",\"orderNum\":0}', '34', '0:0:0:0:0:0:0:1', '2019-08-23 10:16:33');
INSERT INTO `sys_log` VALUES ('532', 'admin', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":1,\"name\":\"Spring Boot技术栈-入门到应用\",\"orderBy\":30,\"isActive\":1,\"memo\":\"Spring Boot实战\",\"createTime\":\"Mar 4, 2019 9:35:52 AM\",\"updateTime\":\"Aug 23, 2019 10:39:43 AM\"}', '96', '0:0:0:0:0:0:0:1', '2019-08-23 10:39:44');
INSERT INTO `sys_log` VALUES ('533', 'admin', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":13,\"title\":\"Java秒杀系统(一)：Java商城秒杀系统设计与实战视频教程(SpringBoot版)重磅发布\",\"digest\":\"历经一个多月的时间，Debug亲自录制的“Java商城秒杀系统的设计与实战视频教程（SpringBoot版）”终于完成了！在本课程中，Debug真正的将之前所讲解的相关技术融入到了本课程中，即本课程所介绍的是一个真正意义上的项目，主要介绍了商城平台举办商品秒杀活动期间所涉及的相关业务！\",\"label\":\"秒杀系统;Java;Spring Boot;高并发;Redis;ZooKeeper;Redisson;RabbitMQ;微服务\",\"status\":1,\"userId\":1,\"isDelete\":0,\"orderBy\":1,\"createTime\":\"Aug 23, 2019 11:48:37 AM\",\"readTotal\":1,\"typeIds\":[8]}', '650', '113.109.111.193', '2019-08-23 11:48:38');
INSERT INTO `sys_log` VALUES ('534', 'admin', '删除博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '[9]', '102', '113.109.111.193', '2019-08-23 11:49:00');
INSERT INTO `sys_log` VALUES ('535', 'admin', '删除博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '[12,11,5,6,3,4]', '92', '113.109.111.193', '2019-08-23 11:49:51');
INSERT INTO `sys_log` VALUES ('536', 'admin', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '13', '142', '113.109.111.193', '2019-08-23 11:58:29');
INSERT INTO `sys_log` VALUES ('537', 'admin', '修改用户', 'com.debug.coding.fight.server.controller.admin.SysUserController.update()', '{\"userId\":6,\"username\":\"linsen\",\"name\":\"修罗debug\",\"password\":\"linsen\",\"salt\":\"q8WwxUma2bqO4voBMNK4\",\"email\":\"linsen@126.com\",\"mobile\":\"15627284602\",\"status\":1,\"roleIdList\":[16],\"createTime\":\"Jul 17, 2019 3:19:52 PM\",\"deptId\":1,\"deptName\":\"集团总部\",\"postIdList\":[4,1]}', '330', '113.109.111.193', '2019-08-23 14:16:47');
INSERT INTO `sys_log` VALUES ('538', 'admin', '修改用户', 'com.debug.coding.fight.server.controller.admin.SysUserController.update()', '{\"userId\":6,\"username\":\"debug\",\"name\":\"修罗debug\",\"password\":\"85b51e719034cf3ec4e242cb8f171de65105eb10efa0412fb673be512ca23f48\",\"salt\":\"q8WwxUma2bqO4voBMNK4\",\"email\":\"linsen@126.com\",\"mobile\":\"15627284602\",\"status\":1,\"roleIdList\":[16],\"createTime\":\"Jul 17, 2019 3:19:52 PM\",\"deptId\":1,\"deptName\":\"集团总部\",\"postIdList\":[4,1]}', '861', '113.109.111.193', '2019-08-23 14:17:00');
INSERT INTO `sys_log` VALUES ('539', 'admin', '新增角色', 'com.debug.coding.fight.server.controller.admin.SysRoleController.save()', '{\"roleId\":17,\"roleName\":\"系统管理员\",\"remark\":\"系统超级管理员\",\"menuIdList\":[1,2,15,16,17,18,60,3,19,20,21,22,4,23,24,25,26,29,48,31,32,33,34,35,36,37,38,39,40,49,50,51,52,53,41,42,82,83,84,68,85,86,87,88,91,92,93,54,55,66,67,69,89,90,70,71,72,73,79,80,81,74,76,77,78],\"deptIdList\":[1,2,6,23,25,26,24,27,28,7,8,9,3,4,5,10,11,12,13,21],\"createTime\":\"Aug 23, 2019 2:17:47 PM\"}', '8971', '113.109.111.193', '2019-08-23 14:17:57');
INSERT INTO `sys_log` VALUES ('540', 'admin', '修改用户', 'com.debug.coding.fight.server.controller.admin.SysUserController.update()', '{\"userId\":6,\"username\":\"debug\",\"name\":\"修罗debug\",\"salt\":\"q8WwxUma2bqO4voBMNK4\",\"email\":\"linsen@126.com\",\"mobile\":\"15627284602\",\"status\":1,\"roleIdList\":[17],\"createTime\":\"Jul 17, 2019 3:19:52 PM\",\"deptId\":1,\"deptName\":\"集团总部\",\"postIdList\":[4,1]}', '850', '113.109.111.193', '2019-08-23 14:18:18');
INSERT INTO `sys_log` VALUES ('541', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":14,\"title\":\"Java秒杀系统(二)：构建SpringBoot多模块项目\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第二篇，在本篇博文中，我们将主要分享介绍如何采用开发工具IDEA和Maven，以现如今主流的开发框架：SpringBoot+SpringMVC+Mybatis+分布式中间件构建一个多模块的项目，即“秒杀系统”！\",\"label\":\"SpringBoot;Spring;SpringMVC;Mybatis;IDEA;maven;构建多模块项目;中间件;分布式;秒杀;秒杀系统;微服务\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":2,\"createTime\":\"Aug 23, 2019 2:21:28 PM\",\"readTotal\":1,\"typeIds\":[8]}', '610', '113.109.111.193', '2019-08-23 14:21:29');
INSERT INTO `sys_log` VALUES ('542', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '14', '157', '113.109.111.193', '2019-08-23 14:27:31');
INSERT INTO `sys_log` VALUES ('543', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":15,\"title\":\"Java秒杀系统(三)：整体业务流程介绍与数据库设计\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第三篇，本篇博文我们将主要介绍秒杀系统的整体业务流程，并根据相应的业务流程进行数据库设计，最终采用Mybatis逆向工程生成相应的实体类Entity、操作Sql的接口Mapper以及写动态Sql的配置文件Mapper.xml\",\"label\":\"数据库;数据库设计;mysql;业务系统;秒杀;秒杀系统;高并发;分布式;mybatis;springboot;spring boot;java\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":3,\"createTime\":\"Aug 23, 2019 2:30:44 PM\",\"readTotal\":1,\"typeIds\":[8]}', '594', '113.109.111.193', '2019-08-23 14:30:45');
INSERT INTO `sys_log` VALUES ('544', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":16,\"title\":\"Java秒杀系统(三)：待秒杀商品列表与详情功能开发\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第四篇，从这篇文章开始我们将进入该秒杀系统相关业务模块的代码实战！本篇博文将首先从最简单的业务模块入手，即如何实现“获取待秒杀商品的列表以及查看待秒杀的商品详情”功能！\",\"label\":\"商品列表;商品详情;秒杀;秒杀系统;spring boot;spring;mybatis;mysql;高并发;redis;rabbitmq\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":4,\"createTime\":\"Aug 23, 2019 2:31:56 PM\",\"readTotal\":1,\"typeIds\":[8]}', '539', '113.109.111.193', '2019-08-23 14:31:57');
INSERT INTO `sys_log` VALUES ('545', 'debug', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":16,\"title\":\"Java秒杀系统(四)：待秒杀商品列表与详情功能开发\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第四篇，从这篇文章开始我们将进入该秒杀系统相关业务模块的代码实战！本篇博文将首先从最简单的业务模块入手，即如何实现“获取待秒杀商品的列表以及查看待秒杀的商品详情”功能！\",\"label\":\"商品列表;商品详情;秒杀;秒杀系统;spring boot;spring;mybatis;mysql;高并发;redis;rabbitmq\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":4,\"createTime\":\"Aug 23, 2019 2:31:56 PM\",\"updateTime\":\"Aug 23, 2019 2:32:12 PM\",\"readTotal\":1,\"userName\":\"修罗debug\",\"typeIds\":[8]}', '586', '113.109.111.193', '2019-08-23 14:32:13');
INSERT INTO `sys_log` VALUES ('546', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '15', '154', '113.109.111.193', '2019-08-23 14:37:07');
INSERT INTO `sys_log` VALUES ('547', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '16', '154', '113.109.111.193', '2019-08-23 14:45:28');
INSERT INTO `sys_log` VALUES ('548', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":17,\"title\":\"Java秒杀系统(五)：整合Shiro实现用户登录认证\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第五篇，在本篇博文中，我们将整合权限认证-授权框架Shiro，实现用户的登陆认证功能，主要用于：要求用户在抢购商品或者秒杀商品时，限制用户进行登陆！并对于特定的url（比如抢购请求对应的url）进行过滤（即当用户访问指定的url时，需要要求用户进行登陆）\",\"label\":\"shiro;java;秒杀系统;spring boot;用户登录;身份认证;认证授权\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":5,\"createTime\":\"Aug 23, 2019 2:47:37 PM\",\"readTotal\":1,\"typeIds\":[8]}', '596', '113.109.111.193', '2019-08-23 14:47:38');
INSERT INTO `sys_log` VALUES ('549', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":18,\"title\":\"Java秒杀系统(六)：商品秒杀代码实战\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第六篇，本篇博文我们将进入整个秒杀系统核心功能模块的代码开发，即“商品秒杀”功能模块的代码实战。\",\"label\":\"秒杀;秒杀系统;spring boot;java;高并发;代码实战\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":6,\"createTime\":\"Aug 23, 2019 2:48:44 PM\",\"readTotal\":1,\"typeIds\":[8]}', '594', '113.109.111.193', '2019-08-23 14:48:45');
INSERT INTO `sys_log` VALUES ('550', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":19,\"title\":\"Java秒杀系统(七)：分布式唯一ID生成订单编号\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第七篇，在本博文中我们将重点介绍 “在高并发，如秒杀的业务场景下如何生成全局唯一、趋势递增的订单编号”，我们将介绍两种方法，一种是传统的采用随机数生成的方式，另外一种是采用当前比较流行的“分布式唯一ID生成算法-雪花算法”来实现\",\"label\":\"分布式;雪花算法;snowflake;高并发;分布式唯一ID;java;秒杀系统;全局id;全局唯一;订单编号;随机数生成算法\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":7,\"createTime\":\"Aug 23, 2019 2:50:48 PM\",\"readTotal\":1,\"typeIds\":[8]}', '595', '113.109.111.193', '2019-08-23 14:50:49');
INSERT INTO `sys_log` VALUES ('551', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '17', '213', '113.109.111.193', '2019-08-23 14:55:02');
INSERT INTO `sys_log` VALUES ('552', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '18', '138', '113.109.111.193', '2019-08-23 15:09:09');
INSERT INTO `sys_log` VALUES ('553', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '19', '263', '113.109.111.193', '2019-08-23 15:15:14');
INSERT INTO `sys_log` VALUES ('554', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":20,\"title\":\"Java秒杀系统(八)：整合RabbitMQ实现消息异步发送\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第八篇，在这篇文章中我们将整合消息中间件RabbitMQ，包括添加依赖、加入配置信息以及自定义注入相关操作组件，比如RabbitTemplate等等，最终初步实现消息的发送和接收，并在下一篇章将其与邮件服务整合，实现“用户秒杀成功发送邮件通知消息”的功能！\",\"label\":\"rabbitmq;秒杀系统;消息中间件;异步发送;中间件;分布式中间件;分布式;高并发\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":7,\"createTime\":\"Aug 23, 2019 3:20:55 PM\",\"readTotal\":1,\"typeIds\":[8]}', '590', '113.109.111.193', '2019-08-23 15:20:56');
INSERT INTO `sys_log` VALUES ('555', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":21,\"title\":\"Java秒杀系统(九)：开发通用的发送邮件服务\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第九篇，在这篇文章中我们将继续完善秒杀系统中的核心处理逻辑，即“用户秒杀~抢单”的业务逻辑！本文我们将基于JavaMail服务，开发一个通用的发送邮件服务，用于发送邮件通知消息，并与上一篇章中已经实现的RabbitMQ异步发送消息的逻辑进行整合，彻底实现“用户秒杀成功后，异步发送邮件通知消息给到用户邮箱，告知用户尽快进行付款”的功能！\",\"label\":\"发送邮件;javamail;邮件;秒杀系统;高并发;java;异步发送;thymeleaf\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":9,\"createTime\":\"Aug 23, 2019 3:21:58 PM\",\"readTotal\":1,\"typeIds\":[8]}', '538', '113.109.111.193', '2019-08-23 15:21:59');
INSERT INTO `sys_log` VALUES ('556', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":22,\"title\":\"Java秒杀系统(十)：RabbitMQ死信队列处理超时未支付的订单\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第十篇，本篇博文我们将采用RabbitMQ的死信队列的方式处理“用户秒杀成功生成订单后，却迟迟没有支付”的情况，一起来见识一下RabbitMQ死信队列在实际业务环境下的强大之处！\",\"label\":\"rabbitmq;死信队列;rabbitmq死信队列;超时未支付订单;支付;java;秒杀系统;高并发\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"Aug 23, 2019 3:22:57 PM\",\"readTotal\":1,\"typeIds\":[8]}', '577', '113.109.111.193', '2019-08-23 15:22:58');
INSERT INTO `sys_log` VALUES ('557', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":23,\"title\":\"Java秒杀系统(十一)：定时任务补充处理超时未支付的订单\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第十一篇，本篇博文我们将借助定时任务调度组件来辅助“失效超时未支付的订单记录”的处理，用以解决上篇博文中采用“RabbitMQ死信队列失效处理超时未支付的订单”的瑕疵！\",\"label\":\"定时任务;多线程;线程池;java;秒杀系统;秒杀;高并发;超时未支付;支付订单;rabbitmq\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":11,\"createTime\":\"Aug 23, 2019 3:24:05 PM\",\"readTotal\":1,\"typeIds\":[8]}', '587', '113.109.111.193', '2019-08-23 15:24:06');
INSERT INTO `sys_log` VALUES ('558', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '20', '255', '113.109.111.193', '2019-08-23 15:29:03');
INSERT INTO `sys_log` VALUES ('559', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '21', '136', '113.109.111.193', '2019-08-23 15:35:03');
INSERT INTO `sys_log` VALUES ('560', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '22', '255', '113.109.111.193', '2019-08-23 15:41:07');
INSERT INTO `sys_log` VALUES ('561', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '23', '163', '113.109.111.193', '2019-08-23 15:44:49');
INSERT INTO `sys_log` VALUES ('562', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":24,\"title\":\"Java秒杀系统(十二)：JMeter压力测试重现秒杀场景中超卖等问题\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第十二篇，本篇博文我们将借助压力测试工具Jmeter重现秒杀场景（高并发场景）下出现的各种典型的问题，其中最为经典的当属“商品库存超卖”的问题，在本文我们重现这种问题，并对问题进行分析！\",\"label\":\"jmeter;压力测试;java;秒杀系统;高并发;超卖问题;spring boot;多线程\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":12,\"createTime\":\"Aug 23, 2019 4:01:22 PM\",\"readTotal\":1,\"memo\":\"\",\"typeIds\":[8]}', '587', '113.109.111.193', '2019-08-23 16:01:23');
INSERT INTO `sys_log` VALUES ('563', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":25,\"title\":\"Java秒杀系统(十三)：数据库级别Sql的优化与代码的调整\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第十三篇，从本篇文章开始我们将进入“秒杀代码优化”环节，本文将首先从数据库级别Sql的优化入手，结合调整秒杀相关的部分核心代码，实现初步的优化！\",\"label\":\"数据库;mysql;数据库优化;java;秒杀系统;spring boot;代码优化;mysql优化\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":13,\"createTime\":\"Aug 23, 2019 4:02:16 PM\",\"readTotal\":1,\"typeIds\":[8]}', '542', '113.109.111.193', '2019-08-23 16:02:17');
INSERT INTO `sys_log` VALUES ('564', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":26,\"title\":\"Java秒杀系统(十四)：基于Redis的原子操作优化秒杀逻辑\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第十四篇，本文将借助缓存中间件Redis的“单线程”特性及其原子操作一同优化“秒杀系统中秒杀的核心业务逻辑”，彻底初步解决“库存超卖”、“重复秒杀”等问题。\",\"label\":\"redis;秒杀优化;redis原子操作;java;秒杀系统;高并发;spring boot;优化秒杀逻辑;库存超卖;重复秒杀\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":14,\"createTime\":\"Aug 23, 2019 4:03:30 PM\",\"readTotal\":1,\"typeIds\":[8]}', '584', '113.109.111.193', '2019-08-23 16:03:31');
INSERT INTO `sys_log` VALUES ('565', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":27,\"title\":\"Java秒杀系统(十五)：基于Redisson的分布式锁优化秒杀逻辑\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第十五篇，本文我们将借助综合中间件Redisson优化“秒杀系统中秒杀的核心业务逻辑”，解决Redis的原子操作在优化秒杀逻辑过程中出现的部分瑕疵。\",\"label\":\"redisson;秒杀优化;库存超卖;重复秒杀;秒杀;秒杀系统;分布式锁;高并发;多线程;并发安全;spring boot\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":15,\"createTime\":\"Aug 23, 2019 4:04:38 PM\",\"readTotal\":1,\"typeIds\":[8]}', '584', '113.109.111.193', '2019-08-23 16:04:39');
INSERT INTO `sys_log` VALUES ('566', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":28,\"title\":\"Java秒杀系统(十六)：基于ZooKeeper的分布式锁优化秒杀逻辑\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第十六篇，本文我们将继续秒杀系统的优化之路，采用统一协调调度中心中间件ZooKeeper控制秒杀系统中高并发多线程对于共享资源~代码块的并发访问所出现的并发安全问题，即用ZooKeeper实现一种分布式锁！\",\"label\":\"分布式锁;zookeeper;java;秒杀系统;库存超卖;重复秒杀;高并发;spring boot;秒杀优化\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":16,\"createTime\":\"Aug 23, 2019 4:06:00 PM\",\"readTotal\":1,\"typeIds\":[8]}', '605', '113.109.111.193', '2019-08-23 16:06:01');
INSERT INTO `sys_log` VALUES ('567', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '24', '153', '113.109.111.193', '2019-08-23 16:13:25');
INSERT INTO `sys_log` VALUES ('568', 'debug', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":24,\"title\":\"Java秒杀系统(十二):JMeter压力测试重现秒杀场景中超卖等问题\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第十二篇，本篇博文我们将借助压力测试工具Jmeter重现秒杀场景（高并发场景）下出现的各种典型的问题，其中最为经典的当属“商品库存超卖”的问题，在本文我们重现这种问题，并对问题进行分析！\",\"label\":\"jmeter;压力测试;java;秒杀系统;高并发;超卖问题;spring boot;多线程\",\"releaseDate\":\"Aug 23, 2019 4:13:25 PM\",\"status\":2,\"userId\":6,\"isDelete\":0,\"orderBy\":12,\"createTime\":\"Aug 23, 2019 4:01:22 PM\",\"updateTime\":\"Aug 23, 2019 4:18:20 PM\",\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cstrong\\u003e摘要：\\u003c/strong\\u003e本篇博文是“Java秒杀系统实战系列文章”的第十二篇，本篇博文我们将借助压力测试工具Jmeter重现秒杀场景（高并发场景）下出现的各种典型的问题，其中最为经典的当属“商品库存超卖”的问题，在本文我们重现这种问题，并对问题进行分析！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cstrong\\u003e内容：\\u003c/strong\\u003e一个正规的、声称能承受高并发请求的系统的背后应该经历了一些不为人知的经历，这个秒杀系统也是如此，一般而言，这些经历都是比较残酷的，在本文中我们将重现出这样的经历！即采用压力测试工具Jmeter压测这个秒杀系统的“秒杀接口”！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan id\\u003d\\\"OSC_h3_2\\\" style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e在进入秒杀压测环节前，我们将之前的“接收前端用户的秒杀请求对应的控制器方法”复制一份，用于给JMeter压测使用，即在KillController中复制出一个新的“执行秒杀请求”的方法，其代码如下所示：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cpre\\u003e\\u003ccode\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e//商品秒杀核心业务逻辑-用于压力测试\\u003cbr\\u003e@RequestMapping(value \\u003d prefix+\\\"/execute/lock\\\",method \\u003d RequestMethod.POST,consumes \\u003d MediaType.APPLICATION_JSON_UTF8_VALUE)\\u003cbr\\u003e@ResponseBody\\u003cbr\\u003epublic BaseResponse executeLock(@RequestBody @Validated KillDto dto, BindingResult result){\\u003cbr\\u003e  if (result.hasErrors() || dto.getKillId()\\u0026lt;\\u003d0){\\u003cbr\\u003e      return new BaseResponse(StatusCode.InvalidParams);\\u003cbr\\u003e  }\\u003cbr\\u003e  BaseResponse response\\u003dnew BaseResponse(StatusCode.Success);\\u003cbr\\u003e  try {\\u003cbr\\u003e      //不加分布式锁的前提\\u003cbr\\u003e      Boolean res\\u003dkillService.killItem(dto.getKillId(),dto.getUserId());\\u003cbr\\u003e      if (!res){\\u003cbr\\u003e          return new BaseResponse(StatusCode.Fail.getCode(),\\\"不加分布式锁-哈哈~商品已抢购完毕或者不在抢购时间段哦!\\\");\\u003cbr\\u003e      }\\u003cbr\\u003e  }catch (Exception e){\\u003cbr\\u003e      response\\u003dnew BaseResponse(StatusCode.Fail.getCode(),e.getMessage());\\u003cbr\\u003e  }\\u003cbr\\u003e  return response;\\u003cbr\\u003e}\\u003c/span\\u003e\\u003c/code\\u003e\\u003c/pre\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e之后，我们便可以开心的进入玩耍环节。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e(1) 双击JMeter的启动脚本jmeter.sh，进入JMeter的主界面，新建一个测试计划，然后在该测试计划下新建一个线程组（设定1秒并发1000个线程，后续还可以调整线程数），紧接着是新建HTTP请求项以及CSV数据文件的读取配置等等，如下图所示：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://oscimg.oschina.net/oscnet/9dd27d0af72599764b64e544e652dc5c9e4.jpg\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e其中，userId参数用于模拟参与秒杀~抢购的用户，其取值将来源于上图中的“CSV数据文件设置”选项的文件，在这里Debug设定了10个用户，如下图所示：\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://oscimg.oschina.net/oscnet/51c8698e82b3f69db984c350d16ea8595b4.jpg\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e值得一提的，“HTTP消息头管理器”选项是必需的，用于指定提交的数据的数据格式，即Content-Type的取值为application/json（因为我们的后端接口设置的就是 consumes \\u003d MediaType.APPLICATION_JSON_UTF8_VALUE）。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e在开始之前，我们设定了killId\\u003d3的商品作为秒杀~抢购的对象，并在数据表中设定其“可抢购数量/库存”的值total为6，如下图所示：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://oscimg.oschina.net/oscnet/95755a2d747a76c6bec54a26a954aebf010.jpg\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e(2) 万事俱备只欠东风，下面我们点击JMeter主界面的启动，即可发起“1秒内并发1000个线程”的请求，而这1000个线程对应的用户的Id，即userId将随机从上述的CSV文件中读取。在出现结果之前，我们先从理论的角度上进行分析：10个用户抢购库存只有6个的书籍，那么理论上结果应该是“库存变为0，被抢购完毕，然后在item_kill_success表中会有6条，而且也应该仅有6条秒杀成功的订单记录”！\\u0026nbsp;然而，理论归理论，现实还是很残酷的！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e(3) 点击JMeter的启动按钮，此时可以观察控制台的输出信息以及数据库表item_kill和item_kill_success，会发现一连串“惨不忍睹”的数据记录，如下图所示：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://oscimg.oschina.net/oscnet/a86b3a1fd732b32aa1b30f828eb792edb88.jpg\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e对于初次接触“高并发秒杀业务场景”的童鞋可能会感觉到惊讶，“明明经过Postman测试过了呀，为啥还会出现这种情况！”，有点百思不得其解！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e然鹅呢，Debug想说的是“事出必有因”，而出现这种情况，单单抱怨是屁用都木有的，还得去源头进行分析，即从代码的层次进行分析！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e(4) 我们再次来回顾一下所写的“秒杀接口”的核心逻辑，如下图所示：\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"https://oscimg.oschina.net/oscnet/c1dba3ac2139958d2fc2a4e4d469a9a34ed.jpg\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003eA\\u003c/span\\u003e \\u003c/span\\u003e当用户在前端界面疯狂的点击“抢购”按钮时，我们上面接口将会接收到“汹涌潮水般”的用户秒杀请求，首次秒杀，很多用户都是第一次秒杀该商品，故而A流程大部分用户都将通过考核；\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003eB\\u003c/span\\u003e \\u003c/span\\u003e同时，由于B流程的逻辑是判断是否可抢，而很明显，大家都是第一次来抢的，这个商品也没那么快被抢完，故而B流程大家也将通过考核；\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold; color: rgb(194, 79, 74);\\\"\\u003eC\\u003c/span\\u003e 到了C流程，就需要扣减库存了，由于库存的扣减在这里只是单纯的“减一”的操作，故而在C这个流程，很多人将可以成功减一；\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold; color: rgb(194, 79, 74);\\\"\\u003eD\\u003c/span\\u003e 最后大家势如破竹，赶紧到了D流程，D流程是用于“生成秒杀成功的订单”，记录用户秒杀过的商品的痕迹，同时也是为了服务于A流程；这个时候的D已经不做什么判断了（大家可以看到核心的判断其实在于A流程，这也就是问题出现的致命根源），大家就直接插入一条成功的记录了。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e因此，最终就出现了“库存超卖”、“同一个用户可以抢到多次”等各种莫名其妙的问题；\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e通过上面的分析，其实Debug已经指出来了，问题产生的根源在于高并发的情况下D流程的处理并没有为A流程的处理赢得足够的时间，即“生成一条秒杀成功后的订单记录” 并没有及时的为 “判断用户是否已经秒杀过了~是否已经有对应的订单记录了” 的流程很好的服务！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e那么在下面的篇章中，我们将从各个角度进行优化，包括数据库级别Sql的优化、代码逻辑的优化、分布式锁的引入等等（当然这些是从开发的层面来讲的，其实还有运维的层面也可以优化，比如Nginx的负载均衡、中间件的集群部署提高高可用等等）！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cstrong style\\u003d\\\"font-size: medium;\\\"\\u003e补充：\\u003c/strong\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e1、目前，这一秒杀系统的整体构建与代码实战已经全部完成了，该秒杀系统对应的视频教程的链接地址为：\\u003ca href\\u003d\\\"http://www.fightjava.com/web/index/course/detail/6\\\"\\u003ehttp://www.fightjava.com/web/index/course/detail/6\\u003c/a\\u003e，可以点击链接进行试看以及学习，实战期间有任何问题都可以留言或者与Debug联系、交流！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e2、另外，Debug也开源了该秒杀系统对应的完整的源代码以及数据库，其地址可以来这里下载：\\u003ca href\\u003d\\\"https://gitee.com/steadyjack/SpringBoot-SecondKill\\\" rel\\u003d\\\"nofollow\\\"\\u003ehttps://gitee.com/steadyjack/SpringBoot-SecondKill\\u003c/a\\u003e\\u0026nbsp;记得Fork跟Star啊！！！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e3、最后，不要忘记了关注一下Debug的技术微信公众号：\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan id\\u003d\\\"OSC_h3_1\\\"\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg height\\u003d\\\"163\\\" src\\u003d\\\"https://oscimg.oschina.net/oscnet/8b9ffa7a6c44d621b4c01d2d5ed5170aba0.jpg\\\" width\\u003d\\\"163\\\"\\u003e\\u003c/p\\u003e\",\"readTotal\":2,\"memo\":\"\",\"userName\":\"修罗debug\",\"typeIds\":[8]}', '528', '113.109.111.193', '2019-08-23 16:18:21');
INSERT INTO `sys_log` VALUES ('569', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '25', '149', '113.109.111.193', '2019-08-23 16:21:34');
INSERT INTO `sys_log` VALUES ('570', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '26', '154', '113.109.111.193', '2019-08-23 16:25:01');
INSERT INTO `sys_log` VALUES ('571', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '27', '160', '113.109.111.193', '2019-08-23 16:29:39');
INSERT INTO `sys_log` VALUES ('572', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '28', '164', '113.109.111.193', '2019-08-23 16:34:16');
INSERT INTO `sys_log` VALUES ('573', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":29,\"title\":\"Java秒杀系统(十七)：秒杀逻辑优化之RabbitMQ接口限流一\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第十七篇，我们将继续秒杀系统的优化之路。在本篇文章中我们将基于RabbitMQ异步通信、FIFO（先进先出）、接口限流的特性，在执行秒杀核心的处理逻辑之前架上一层“限流”的处理逻辑，从而让瞬时产生的，犹如波涛汹涌、潮水般的请求流量变得井井有条、有序性地到达后端的秒杀接口！\",\"label\":\"rabbitmq;接口限流;秒杀;秒杀系统;秒杀优化;RabbitMQ;消息中间件;限流\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":17,\"createTime\":\"Aug 23, 2019 4:37:34 PM\",\"readTotal\":1,\"typeIds\":[8]}', '594', '113.109.111.193', '2019-08-23 16:37:35');
INSERT INTO `sys_log` VALUES ('574', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":30,\"title\":\"Java秒杀系统(十八)：秒杀逻辑优化之RabbitMQ接口限流二\",\"digest\":\"本篇博文是“Java秒杀系统实战系列文章”的第十八篇，我们将继续秒杀系统的优化之路。在本篇文章中我们将基于RabbitMQ异步通信、FIFO（先进先出）、接口限流的特性，在执行秒杀核心的处理逻辑之前架上一层“限流”的处理逻辑，从而让瞬时产生的，犹如波涛汹涌、潮水般的请求流量变得井井有条、有序性地到达后端的秒杀接口！\",\"label\":\"rabbitmq;秒杀;秒杀系统;接口限流;秒杀优化;springboot;spring boot;RabbitMQ\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":18,\"createTime\":\"Aug 23, 2019 4:39:05 PM\",\"readTotal\":1,\"typeIds\":[8]}', '604', '113.109.111.193', '2019-08-23 16:39:06');
INSERT INTO `sys_log` VALUES ('575', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '29', '153', '113.109.111.193', '2019-08-23 16:54:12');
INSERT INTO `sys_log` VALUES ('576', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '30', '153', '113.109.111.193', '2019-08-23 17:04:06');
INSERT INTO `sys_log` VALUES ('577', 'debug', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":5,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e课程目标：\\u003c/span\\u003e给予需要入门SpringBoot的童鞋以及微服务项目SpringBoot开发者实战指导，以实际的业务场景为出发点实战目前微服务项目中涉及的常见业务模块，解决一些典型的问题。相信学习完本套课程后，诸位童鞋将对微服务项目、SpringBoot的开发有更为深入的理解！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e本课程以实际业务场景为出发点、实战撸码为主、理论概念为辅，零基础、“不废话”一步一个脚印讲解当前微服务项目或分布式系统下Springboot的各种应用场景及其涉及的各个核心要点！课程涉及到的要点如下图所示：\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"http://www.fightjava.com/files/fightCoding/course/20190824/377095123735591317.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e即本课程的主要知识要点包括：\\u003cbr\\u003e（1）微服务项目构建-单模块与多模块\\u003cbr\\u003e（2）整合\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003eMybatis\\u003c/span\\u003e实现CRUD与多数据源实战；\\u003cbr\\u003e（3）日志框架整合，项目多环境配置，\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003elombok\\u003c/span\\u003e实战，配置文件变量与对象映射，Validator校验器与自定义注解实战\\u003cbr\\u003e（4）开发通用的发送邮件服务，包括简单文本、图片、文档等附件的邮件以及采用\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003eThymeleaf\\u003c/span\\u003e或Freemarker模板动态渲染的HTML邮件\\u003cbr\\u003e（5）开发通用的\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003e上传文件服务\\u003c/span\\u003e组件，通用的下载文件服务组件，以及借助FileUtils操作前端上传的文件到实际的服务器目录服务\\u003cbr\\u003e（6）\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003e定时任务\\u003c/span\\u003e@Scheduled、前后端分离时跨域配置、全局异常处理实战\\u003cbr\\u003e（7）\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003ePoi导入导出Excel\\u003c/span\\u003e，Poi分多个Sheet导入导出Excel并开发通用的导出导入服务\\u003cbr\\u003e（8）数据缓存\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003eRedis\\u003c/span\\u003e实战，包括StringRedisTemplate缓存员工信息，缓存穿透与缓存雪崩的解决方案实战，RedisTemplate哈希散列存储实战\\u003cbr\\u003e（9）消息异步通信篇，包括消息驱动模型ApplicationEvent \\u0026amp; Listener的实战业务模块解耦、企业级系统或者微服务项目中如何实现异步发送邮箱激活注册账号\\u003cbr\\u003e（10）消息异步通信篇\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74);\\\"\\u003eRabbitMQ\\u003c/span\\u003e的整合实战实现业务模块异步解耦、消息确认机制实战、并发量配置实战等并用来实现典型的商城用户下单业务场景！\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e......\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium; font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003eSpringBoot初学者，SpringBoot需求者，微服务开发者，分布式系统学习者，Java进阶\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '220', '113.109.111.140', '2019-08-24 21:52:49');
INSERT INTO `sys_log` VALUES ('578', 'debug', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":3,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-weight: bold; font-size: medium;\\\"\\u003e课程目标：\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e掌握微服务、分布式系统的相关中间件实战实现分布式锁；基于微服务实现抢单/秒杀系统的高并发\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-weight: bold; font-size: medium;\\\"\\u003e详情介绍：\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e“在某个时刻高并发多线程访问共享资源”的场景在当前互联网应用中并不少见，在单体应用时代，更多的是采用synchronized等jdk自带的方式来控制“共享资源的访问”，即加同步锁。但在分布式系统时代，服务-应用独立部署或者集群部署的情况下，jdk自带的方式却显得力不从心，“分布式锁”的出现便解决了这个难题。\\u003c/span\\u003e\\u003cbr\\u003e\\u003cimg src\\u003d\\\"http://www.fightjava.com/files/fightCoding/course/20190824/377095511438008883.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e本课程将介绍分布式架构下、微服务项目分布式锁的实现方式，包括数据库级别锁、基于Redis的原子操作、基于Zookeeper的实现、基于Redisson的实现等方式。\\u003cbr\\u003e\\u003cbr\\u003e在实战完各种方式后，我也分享介绍了两个很实用的实际业务场景：“重复提交”、“CRM系统销售人员抢单”（抢单系统抢单），将之前所学到的分布式锁实战实现方式进行了充分的利用，更进一步的巩固了分布式锁的理解！\\u003c/span\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"http://www.fightjava.com/files/fightCoding/course/20190824/377095590755454824.jpg\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"http://www.fightjava.com/files/fightCoding/course/20190824/377095635670769267.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003e分布式系统开发者；分布式锁实战者；Redis/Zookeeper/抢单系统学习者；微服务开发者\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\"}', '167', '113.109.111.140', '2019-08-24 21:54:22');
INSERT INTO `sys_log` VALUES ('579', 'debug', '补充课程内容', 'com.debug.coding.fight.server.controller.admin.CourseController.update()', '{\"id\":2,\"content\":\"\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e\\u003cbr\\u003e\\u003c/span\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e课程目标：\\u003c/span\\u003e掌握如何使用Dubbo发布服务,如何调用其他项目的服务以及在当前微服务项目、分布式场景的实战\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e详情介绍：\\u003c/span\\u003e“如何发布服务/接口；如何调用别人服务/接口”的场景在当前互联网应用中并不少见，传统的调用方式就有RMI以及基于SOAP的Webservice等方式。\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e而在当前微服务、分布式时代，更多的则有SpringCloud以及Dubbo+Zookeeper等方式，相对而言，sc更适用于大型体系的互联网应用，而针对微型、小而简的独立服务或者项目而言，Dubbo算是应用相当广泛的方式了 ！\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"http://www.fightjava.com/files/fightCoding/course/20190824/377096235264676893.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"http://www.fightjava.com/files/fightCoding/course/20190824/377096264457122856.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cimg src\\u003d\\\"http://www.fightjava.com/files/fightCoding/course/20190824/377096290537757310.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cimg src\\u003d\\\"http://www.fightjava.com/files/fightCoding/course/20190824/377096320430463436.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cimg src\\u003d\\\"http://www.fightjava.com/files/fightCoding/course/20190824/377096345841780304.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cimg src\\u003d\\\"https://s1.51cto.com//images/20181210/1544436379796192.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cimg src\\u003d\\\"http://www.fightjava.com/files/fightCoding/course/20190824/377096394875881440.png\\\" style\\u003d\\\"max-width:100%;\\\"\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cbr\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e总之，本课程介绍的相关知识点在当前互联网项目中将具备很强的参考性与学习性，在企业内部/外部大部分项目中都有设计，加上Dubbo项目如今已经重归Apache开源基金组织的怀抱，\\u003cspan style\\u003d\\\"color: rgb(194, 79, 74); font-weight: bold;\\\"\\u003e所以，此时不学Dubbo，更待何时！！\\u003c/span\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\u003cp\\u003e\\u003cspan style\\u003d\\\"font-size: medium;\\\"\\u003e\\u003cspan style\\u003d\\\"font-weight: bold;\\\"\\u003e适用人群：\\u003c/span\\u003eDubbo学习实战者,微服务分布式系统实战者，SpringBoot整合Dubbo,Java学习者\\u0026nbsp;\\u0026nbsp;\\u003c/span\\u003e\\u003c/p\\u003e\"}', '144', '113.109.111.140', '2019-08-24 21:56:52');
INSERT INTO `sys_log` VALUES ('580', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":44,\"parentId\":40,\"courseId\":8,\"type\":2,\"name\":\"1.2 核心技术列表\",\"orderBy\":2,\"url\":\"https://v.qq.com/x/page/n0910s9aa94.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 3:13:17 PM\",\"parentName\":\"第1章 课程整体介绍\"}', '25', '113.109.110.90', '2019-08-25 22:24:02');
INSERT INTO `sys_log` VALUES ('581', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":43,\"parentId\":40,\"courseId\":8,\"type\":2,\"name\":\"1.1 课程介绍与演示\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/g0910ixk4rk.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"updateTime\":\"Aug 20, 2019 5:14:45 PM\",\"parentName\":\"第1章 课程整体介绍\"}', '9', '113.109.110.90', '2019-08-25 22:24:15');
INSERT INTO `sys_log` VALUES ('582', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":50,\"parentId\":42,\"courseId\":8,\"type\":2,\"name\":\"3.3 整合Shiro实现完整的用户登录一\",\"orderBy\":3,\"url\":\"https://v.qq.com/x/page/t0910k2stte.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 3:18:39 PM\",\"parentName\":\"第3章 用户登录模块\"}', '12', '113.109.110.90', '2019-08-25 22:25:42');
INSERT INTO `sys_log` VALUES ('583', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":126,\"parentId\":78,\"courseId\":8,\"type\":2,\"name\":\"11.1 基于Spring AOP实现日志记录一\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/r0910asbrz2.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第11章 其他业务模块\"}', '10', '113.109.110.90', '2019-08-25 22:26:12');
INSERT INTO `sys_log` VALUES ('584', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":43,\"parentId\":40,\"courseId\":6,\"type\":2,\"name\":\"1.1 课程介绍与演示\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/m0893wxfn27.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"updateTime\":\"Aug 20, 2019 5:14:45 PM\",\"parentName\":\"第1章 课程整体介绍\"}', '9', '113.109.110.90', '2019-08-25 22:28:58');
INSERT INTO `sys_log` VALUES ('585', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":43,\"parentId\":136,\"courseId\":6,\"type\":2,\"name\":\"1.1 课程介绍与演示\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/m0893wxfn27.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 20, 2019 12:00:00 AM\",\"updateTime\":\"Aug 20, 2019 5:14:45 PM\",\"parentName\":\"第1章 课程整体介绍\"}', '10', '113.109.110.90', '2019-08-25 22:29:30');
INSERT INTO `sys_log` VALUES ('586', 'debug', '删除课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.delete()', '43', '10', '113.109.110.90', '2019-08-25 22:31:22');
INSERT INTO `sys_log` VALUES ('587', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":142,\"parentId\":136,\"courseId\":6,\"type\":2,\"name\":\"1.2 核心技术列表\",\"orderBy\":2,\"url\":\"https://v.qq.com/x/page/o0893gk7xt9.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 4:27:11 PM\",\"parentName\":\"第1章 课程整体介绍\"}', '8', '113.109.110.90', '2019-08-25 22:31:52');
INSERT INTO `sys_log` VALUES ('588', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":141,\"parentId\":136,\"courseId\":6,\"type\":2,\"name\":\"1.1 课程整体介绍\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/m0893wxfn27.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 4:26:58 PM\",\"parentName\":\"第1章 课程整体介绍\"}', '8', '113.109.110.90', '2019-08-25 22:32:17');
INSERT INTO `sys_log` VALUES ('589', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":144,\"parentId\":136,\"courseId\":6,\"type\":2,\"name\":\"1.4 系统的整体演示\",\"orderBy\":4,\"url\":\"https://v.qq.com/x/page/n0893ri19gu.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 4:27:22 PM\",\"parentName\":\"第1章 课程整体介绍\"}', '7', '113.109.110.90', '2019-08-25 22:32:35');
INSERT INTO `sys_log` VALUES ('590', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":148,\"parentId\":137,\"courseId\":6,\"type\":2,\"name\":\"2.4 秒杀系统整体业务流程介绍\",\"orderBy\":4,\"url\":\"https://v.qq.com/x/page/t0893dycllq.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 4:44:30 PM\",\"parentName\":\"第2章 微服务项目的搭建\"}', '11', '113.109.110.90', '2019-08-25 22:32:56');
INSERT INTO `sys_log` VALUES ('591', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":36,\"parentId\":32,\"courseId\":2,\"type\":2,\"name\":\"1.1 课程课时整体介绍\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/z08113r5iw1.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 4:02:07 PM\",\"parentName\":\"第1章 课程课时整体介绍\"}', '8', '113.109.110.90', '2019-08-25 22:34:24');
INSERT INTO `sys_log` VALUES ('592', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":286,\"parentId\":33,\"courseId\":2,\"type\":2,\"name\":\"2.6 SpringBoot整合Dubbo开发接口服务与发布注册三\",\"orderBy\":6,\"url\":\"https://v.qq.com/x/page/p08114n4fro.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:50:38 PM\",\"parentName\":\"第2章 SpringBoot整合Dubbo开发实战\"}', '13', '113.109.110.90', '2019-08-25 22:34:50');
INSERT INTO `sys_log` VALUES ('593', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":289,\"parentId\":34,\"courseId\":2,\"type\":2,\"name\":\"3.2 基于Dubbo协议的调用二\",\"orderBy\":2,\"url\":\"https://v.qq.com/x/page/y0811oqrf8t.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:51:49 PM\",\"parentName\":\"第3章 Dubbo服务调用实战\"}', '8', '113.109.110.90', '2019-08-25 22:35:25');
INSERT INTO `sys_log` VALUES ('594', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":291,\"parentId\":34,\"courseId\":2,\"type\":2,\"name\":\"3.4 基于Http协议的Rest Api调用二\",\"orderBy\":4,\"url\":\"https://v.qq.com/x/page/l08110097ro.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:50:48 PM\",\"parentName\":\"第3章 Dubbo服务调用实战\"}', '7', '113.109.110.90', '2019-08-25 22:35:36');
INSERT INTO `sys_log` VALUES ('595', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":259,\"parentId\":39,\"courseId\":3,\"type\":2,\"name\":\"1.1 课程课时整体介绍\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/u0781e4o8mx.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:19:08 PM\",\"parentName\":\"第1章 课程整体介绍\"}', '8', '113.109.110.90', '2019-08-25 22:43:45');
INSERT INTO `sys_log` VALUES ('596', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":261,\"parentId\":39,\"courseId\":3,\"type\":2,\"name\":\"1.3 重现分布式锁的高并发场景\",\"orderBy\":3,\"url\":\"https://v.qq.com/x/page/f0781rsxnqg.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:19:23 PM\",\"parentName\":\"第1章 课程整体介绍\"}', '23', '113.109.110.90', '2019-08-25 22:43:59');
INSERT INTO `sys_log` VALUES ('597', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":264,\"parentId\":256,\"courseId\":3,\"type\":2,\"name\":\"2.3 基于Redis实现分布式锁一\",\"orderBy\":3,\"url\":\"https://v.qq.com/x/page/c07817b5quj.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:19:34 PM\",\"parentName\":\"第2章 分布式锁几种实现方式\"}', '7', '113.109.110.90', '2019-08-25 22:44:25');
INSERT INTO `sys_log` VALUES ('598', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":267,\"parentId\":256,\"courseId\":3,\"type\":2,\"name\":\"2.6 基于Zookeeper实战实现分布式锁二\",\"orderBy\":6,\"url\":\"https://v.qq.com/x/page/y0781qnkt48.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:14:54 PM\",\"parentName\":\"第2章 分布式锁几种实现方式\"}', '6', '113.109.110.90', '2019-08-25 22:44:38');
INSERT INTO `sys_log` VALUES ('599', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":271,\"parentId\":257,\"courseId\":3,\"type\":2,\"name\":\"3.3 典型业务场景实战之CRM系统销售人员抢单一\",\"orderBy\":3,\"url\":\"https://v.qq.com/x/page/t078109om57.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:20:11 PM\",\"parentName\":\"第3章 分布式锁实战之典型业务场景\"}', '8', '113.109.110.90', '2019-08-25 22:44:51');
INSERT INTO `sys_log` VALUES ('600', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":174,\"parentId\":173,\"courseId\":5,\"type\":2,\"name\":\"1.1 课程课时整体介绍\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/b0737qj8hwj.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:08:03 PM\",\"parentName\":\"第1章 SpringBoot基础技术栈入门\"}', '11', '113.109.110.90', '2019-08-25 22:46:34');
INSERT INTO `sys_log` VALUES ('601', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":195,\"parentId\":194,\"courseId\":5,\"type\":2,\"name\":\"3.1 开发通用的上传文件服务\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/w0737cbifg7.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:09:44 PM\",\"parentName\":\"第3章 上传文件服务实战\"}', '7', '113.109.110.90', '2019-08-25 22:46:56');
INSERT INTO `sys_log` VALUES ('602', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":186,\"parentId\":173,\"courseId\":5,\"type\":2,\"name\":\"1.13 多数据源实战之配置篇\",\"orderBy\":13,\"url\":\"https://v.qq.com/x/page/o0737v7wejq.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:09:05 PM\",\"parentName\":\"第1章 SpringBoot基础技术栈入门\"}', '14', '113.109.110.90', '2019-08-25 22:47:50');
INSERT INTO `sys_log` VALUES ('603', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":192,\"parentId\":189,\"courseId\":5,\"type\":2,\"name\":\"2.3 常见问题解决与发送带HTML文本邮件\",\"orderBy\":3,\"url\":\"https://v.qq.com/x/page/p0737xa0uw5.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 4:52:26 PM\",\"parentName\":\"第2章 发送邮件服务实战\"}', '7', '113.109.110.90', '2019-08-25 22:49:15');
INSERT INTO `sys_log` VALUES ('604', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":229,\"parentId\":227,\"courseId\":4,\"type\":2,\"name\":\"1.1 课程课时整体介绍\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/h0774rtkx3a.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:34:52 PM\",\"parentName\":\"第1章 Rabbitmq官网拜读\"}', '7', '113.109.110.90', '2019-08-25 22:49:52');
INSERT INTO `sys_log` VALUES ('605', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":231,\"parentId\":227,\"courseId\":4,\"type\":2,\"name\":\"1.3 RabbitMQ官网拜读之HelloWorld实战\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9314/195408\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:35:02 PM\",\"parentName\":\"第1章 Rabbitmq官网拜读\"}', '7', '113.109.110.90', '2019-08-25 22:51:12');
INSERT INTO `sys_log` VALUES ('606', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":232,\"parentId\":227,\"courseId\":4,\"type\":2,\"name\":\"1.4 生产者消费者以及队列初步认识\",\"orderBy\":4,\"url\":\"https://v.qq.com/x/page/f0774qb7w39.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"parentName\":\"第1章 Rabbitmq官网拜读\"}', '11', '113.109.110.90', '2019-08-25 22:51:20');
INSERT INTO `sys_log` VALUES ('607', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":243,\"parentId\":228,\"courseId\":4,\"type\":2,\"name\":\"2.8 用户商城抢单并发实战二\",\"orderBy\":8,\"url\":\"https://v.qq.com/x/page/p07742bgak1.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:35:22 PM\",\"parentName\":\"第2章 SpringBoot整合RabbitMQ实战\"}', '12', '113.109.110.90', '2019-08-25 22:51:41');
INSERT INTO `sys_log` VALUES ('608', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":236,\"parentId\":228,\"courseId\":4,\"type\":2,\"name\":\"2.1 SpringBoot整合RabbitMQ之整合配置篇一\",\"orderBy\":1,\"url\":\"https://edu.csdn.net/course/play/9314/195413\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:35:11 PM\",\"parentName\":\"第2章 SpringBoot整合RabbitMQ实战\"}', '7', '113.109.110.90', '2019-08-25 22:51:49');
INSERT INTO `sys_log` VALUES ('609', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":27,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.1 系统整体功能演示\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/t07601n0cf2.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '6', '113.109.110.90', '2019-08-25 22:52:37');
INSERT INTO `sys_log` VALUES ('610', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":28,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.2 基于SSM核心框架搭建系统整体架构\",\"orderBy\":2,\"url\":\"https://edu.csdn.net/course/play/9139/190538\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '6', '113.109.110.90', '2019-08-25 22:52:43');
INSERT INTO `sys_log` VALUES ('611', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":29,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.3 基于MVC开发模式构建项目目录结构\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9139/190539\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '7', '113.109.110.90', '2019-08-25 22:52:48');
INSERT INTO `sys_log` VALUES ('612', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":305,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.4 系统前后端开发流程介绍\",\"orderBy\":4,\"url\":\"https://edu.csdn.net/course/play/9139/190540\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 9:04:09 PM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '6', '113.109.110.90', '2019-08-25 22:52:55');
INSERT INTO `sys_log` VALUES ('613', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":28,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.2 基于SSM核心框架搭建系统整体架构\",\"orderBy\":2,\"url\":\"https://edu.csdn.net/course/play/9139/190538\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '6', '113.109.110.90', '2019-08-25 22:53:35');
INSERT INTO `sys_log` VALUES ('614', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":29,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.3 基于MVC开发模式构建项目目录结构\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9139/190539\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '7', '113.109.110.90', '2019-08-25 22:53:43');
INSERT INTO `sys_log` VALUES ('615', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":60,\"parentId\":59,\"courseId\":9,\"type\":2,\"name\":\"1.1 课程整体介绍\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/c0727qxl54p.html\",\"isFree\":1,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 3:02:30 PM\",\"parentName\":\"第一章 SSM整合开发实战之POI导入导出Excel\"}', '6', '113.109.110.90', '2019-08-25 22:58:21');
INSERT INTO `sys_log` VALUES ('616', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":160,\"parentId\":138,\"courseId\":6,\"type\":2,\"name\":\"3.11 死信队列失效超时未支付的订单二\",\"orderBy\":11,\"url\":\"https://edu.csdn.net/course/play/25258/296092\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 4:44:53 PM\",\"parentName\":\"第3章 秒杀业务代码实战\"}', '7', '113.109.110.90', '2019-08-26 10:14:08');
INSERT INTO `sys_log` VALUES ('617', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":167,\"parentId\":139,\"courseId\":6,\"type\":2,\"name\":\"4.3 基于Redisson的分布式锁优化抢单逻辑\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/25258/296078\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 4:45:07 PM\",\"parentName\":\"第4章 秒杀逻辑优化\"}', '9', '113.109.110.90', '2019-08-26 10:14:56');
INSERT INTO `sys_log` VALUES ('618', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":178,\"parentId\":173,\"courseId\":5,\"type\":2,\"name\":\"1.5 构建多模块项目实战三\",\"orderBy\":5,\"url\":\"https://edu.csdn.net/course/play/9619/204987\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:08:21 PM\",\"parentName\":\"第1章 SpringBoot基础技术栈入门\"}', '7', '113.109.110.90', '2019-08-26 10:16:04');
INSERT INTO `sys_log` VALUES ('619', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":180,\"parentId\":173,\"courseId\":5,\"type\":2,\"name\":\"1.7 SpringBoot整合Mybatis之JavaWeb应用MVC三层模式开发流程实战一\",\"orderBy\":7,\"url\":\"https://edu.csdn.net/course/play/9619/204989\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:08:39 PM\",\"parentName\":\"第1章 SpringBoot基础技术栈入门\"}', '7', '113.109.110.90', '2019-08-26 10:16:27');
INSERT INTO `sys_log` VALUES ('620', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":181,\"parentId\":173,\"courseId\":5,\"type\":2,\"name\":\"1.8 SpringBoot整合Mybatis之JavaWeb应用MVC三层模式开发流程实战二\",\"orderBy\":8,\"url\":\"https://edu.csdn.net/course/play/9619/204990\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:08:55 PM\",\"parentName\":\"第1章 SpringBoot基础技术栈入门\"}', '8', '113.109.110.90', '2019-08-26 10:16:33');
INSERT INTO `sys_log` VALUES ('621', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":222,\"parentId\":216,\"courseId\":5,\"type\":2,\"name\":\"7.6 RabbitMQ消息确认机制与并发量配置实战之商城用户下单一\",\"orderBy\":6,\"url\":\"https://edu.csdn.net/course/play/9619/205025\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 5:09:58 PM\",\"parentName\":\"第7章 消息中间件RabbitMQ实战篇\"}', '5', '113.109.110.90', '2019-08-26 10:17:17');
INSERT INTO `sys_log` VALUES ('622', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":299,\"parentId\":279,\"courseId\":2,\"type\":2,\"name\":\"5.3 Token机制实战三之验证Token\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/10382/221782\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 22, 2019 12:00:00 AM\",\"updateTime\":\"Aug 22, 2019 8:52:14 PM\",\"parentName\":\"第5章 Dubbo服务调用之接口认证实战\"}', '14', '113.109.110.90', '2019-08-26 10:19:13');
INSERT INTO `sys_log` VALUES ('623', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":28,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.2 基于SSM核心框架搭建系统整体架构\",\"orderBy\":2,\"url\":\"https://edu.csdn.net/course/play/9139/190538\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '6', '113.109.110.90', '2019-08-26 10:24:04');
INSERT INTO `sys_log` VALUES ('624', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":29,\"parentId\":25,\"courseId\":1,\"type\":2,\"name\":\"1.3 基于MVC开发模式构建项目目录结构\",\"orderBy\":3,\"url\":\"https://edu.csdn.net/course/play/9139/190539\",\"isFree\":0,\"isDelete\":0,\"createTime\":\"Aug 16, 2019 12:00:00 AM\",\"updateTime\":\"Aug 16, 2019 11:26:56 AM\",\"parentName\":\"第1章 系统整体功能介绍\"}', '5', '113.109.110.90', '2019-08-26 10:24:15');
INSERT INTO `sys_log` VALUES ('625', 'debug', '修改登录密码', 'com.debug.coding.fight.server.controller.admin.SysUserController.updatePassword()', '\"linsen\"', '92', '113.109.111.184', '2019-08-28 23:35:27');
INSERT INTO `sys_log` VALUES ('626', 'admin', '修改登录密码', 'com.debug.coding.fight.server.controller.admin.SysUserController.updatePassword()', '\"debug\"', '8', '113.109.111.184', '2019-08-28 23:36:05');
INSERT INTO `sys_log` VALUES ('627', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":31,\"title\":\"重磅宣布-程序员实战基地官方网站上线啦（文末有福利）\",\"digest\":\"历经千辛与万苦，Debug终于与我的老友一起把“程序员实战基地”的官方网站初步搞完了，只想碎一口“真的是很辛苦”！各位小伙伴可以打开手机或者PC浏览器访问如下链接：www.fightjava.com 即可直达咱们的官方社区，各位小伙伴若是有时间的话，不妨来点击咱们的官方网站，学习一些干货！\",\"label\":\"程序员实战基地;官方网站;Java;微服务;分布式;程序员;求职;面试;Java培训;it\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":0,\"createTime\":\"Aug 28, 2019 11:37:58 PM\",\"readTotal\":1,\"typeIds\":[14]}', '40', '113.109.111.184', '2019-08-28 23:37:58');
INSERT INTO `sys_log` VALUES ('628', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '31', '11', '113.109.111.184', '2019-08-28 23:47:32');
INSERT INTO `sys_log` VALUES ('629', 'debug', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":31,\"title\":\"重磅宣布-程序员实战基地官方网站上线啦（文末有福利）\",\"digest\":\"历经千辛与万苦，Debug终于与我的老友一起把“程序员实战基地”的官方网站初步搞完了，只想碎一口“真的是很辛苦”！各位小伙伴可以打开手机或者PC浏览器访问如下链接：http://www.fightjava.com 即可直达咱们的官方社区，各位小伙伴若是有时间的话，不妨来点击咱们的官方网站，学习一些干货！\",\"label\":\"程序员实战基地;官方网站;Java;微服务;分布式;程序员;求职;面试;Java培训;it\",\"releaseDate\":\"Aug 28, 2019 11:47:32 PM\",\"status\":2,\"userId\":6,\"isDelete\":0,\"orderBy\":0,\"createTime\":\"Aug 28, 2019 11:37:58 PM\",\"updateTime\":\"Aug 29, 2019 12:19:25 AM\",\"readTotal\":13,\"userName\":\"修罗debug\",\"typeIds\":[14]}', '117', '113.109.111.184', '2019-08-29 00:19:25');
INSERT INTO `sys_log` VALUES ('630', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":32,\"title\":\"SpringBoot系列（一）：如何构建一个标准的Spring Boot项目(入门必备)\",\"digest\":\"从本篇文章开始，Debug将开始跟各位小伙伴分享一下跟Spring Boot开发相关的技术栈，其中主要包括如何搭建项目，整合前端开发实现完整的业务服务模块，整合中间件实战典型的业务场景等等，进一步巩固各位小伙伴的技术体系！\",\"label\":\"SpringBoot;SpringBoot入门;spring boot;spring;java;构建spring boot项目;标准项目;企业级项目\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":0,\"createTime\":\"Aug 29, 2019 2:37:38 PM\",\"readTotal\":1,\"memo\":\"如何构建一个标准的Spring Boot项目(入门必备)\",\"typeIds\":[1]}', '120', '113.109.111.184', '2019-08-29 14:37:39');
INSERT INTO `sys_log` VALUES ('631', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '32', '9', '113.109.111.184', '2019-08-29 14:48:36');
INSERT INTO `sys_log` VALUES ('632', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":33,\"title\":\"SpringBoot系列（二）：如何构建统一的消息响应模型\",\"digest\":\"对于“构建统一的消息响应模型”，相信各位小伙伴在开发项目的过程中多少都有所遇见过，要知道，一个糟糕的接口响应信息的规定，对于协作开发或者接口调用方的小伙伴而言将是一个小灾难，本文将介绍一种简洁的，可用于前后端接口交互 以及 服务与服务之间进行调用时的统一消息响应模型\",\"label\":\"统一消息响应模型;响应模型;Spring Boot;springboot;java;企业级项目\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":2,\"createTime\":\"Aug 30, 2019 9:26:54 AM\",\"readTotal\":1,\"memo\":\"如何构建统一的消息响应模型\",\"typeIds\":[1]}', '137', '61.140.239.136', '2019-08-30 09:26:55');
INSERT INTO `sys_log` VALUES ('633', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '33', '7', '61.140.239.136', '2019-08-30 09:34:18');
INSERT INTO `sys_log` VALUES ('634', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":34,\"title\":\"SpringBoot系列（三）：不要告诉我你还不会使用IDEA热部署功能\",\"digest\":\"本文我们将分享介绍在IDEA开发工具中开发项目时，如何加入具有自动编译功能的Devtools热部署功能组件，从而使得项目、系统在运行的过程中，可以在不需要重启项目的前提下，调整完任意的功能代码后立即看到相应的效果\",\"label\":\"热部署;idea热部署;devtools;springboot;spring boot;自动编译;微服务;分布式\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":3,\"createTime\":\"Sep 2, 2019 9:22:32 AM\",\"readTotal\":1,\"memo\":\"使用IDEA热部署功能\",\"typeIds\":[1]}', '51', '116.21.42.17', '2019-09-02 09:22:32');
INSERT INTO `sys_log` VALUES ('635', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '34', '8', '116.21.42.17', '2019-09-02 09:36:03');
INSERT INTO `sys_log` VALUES ('636', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":35,\"title\":\"SpringBoot系列（四）：SpringBoot整合Mybatis实现不一样的CRUD\",\"digest\":\"本文我们将回归介绍、分享Spring Boot在企业级应用开发的过程中所体现出来的作用， 特别是在应用系统业务模块的开发过程中，它跟Mybatis/MybatisPlus（某种持久层框架）整合所体现出来的“双剑合璧”的巨大功效！在本篇文章中，我们将首先分享如何基于Spring Boot整合Mybatis实现基本的CRUD！\",\"label\":\"mybatis;springboot;crud;企业级应用;业务模块;mybatis plus;spring;spring boot;微服务;分布式;持久层框架\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":4,\"createTime\":\"Sep 3, 2019 10:14:54 AM\",\"readTotal\":1,\"memo\":\"SpringBoot整合Mybatis实现不一样的CRUD\",\"typeIds\":[1]}', '52', '116.21.41.112', '2019-09-03 10:14:55');
INSERT INTO `sys_log` VALUES ('637', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '35', '10', '116.21.41.112', '2019-09-03 10:27:35');
INSERT INTO `sys_log` VALUES ('638', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":36,\"title\":\"SpringBoot系列（五）：SpringBoot整合Mybatis实现多表关联查询\",\"digest\":\"本文我们将继续分享介绍Spring Boot在整合Mybatis开发企业级应用时其他典型的业务场景，即Mybatis是如何实现多表关联查询时将查询结果集与对象进行映射的，主要的内容包含“一对一的表关联”和“一对多/多对多的表关联”查询\",\"label\":\"mybatis;springboot;spring boot;spring;多表查询;关联查询;一对一;一对多;mybatis逆向工程\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":5,\"createTime\":\"Sep 4, 2019 10:13:45 PM\",\"readTotal\":1,\"memo\":\"SpringBoot整合Mybatis实现多表关联查询\",\"typeIds\":[1]}', '36', '116.21.43.124', '2019-09-04 22:13:46');
INSERT INTO `sys_log` VALUES ('639', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '36', '7', '116.21.43.124', '2019-09-04 22:26:47');
INSERT INTO `sys_log` VALUES ('640', 'debug', '新增博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.save()', '{\"id\":19,\"name\":\"JWT(Json Web Token)技术栈\",\"orderBy\":22,\"isActive\":1,\"memo\":\"JWT(Json Web Token)技术栈\",\"createTime\":\"Sep 10, 2019 5:38:07 PM\"}', '22', '61.140.238.240', '2019-09-10 17:38:07');
INSERT INTO `sys_log` VALUES ('641', 'debug', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":19,\"name\":\"JWT(Json Web Token)技术栈\",\"orderBy\":85,\"isActive\":1,\"memo\":\"JWT(Json Web Token)技术栈\",\"createTime\":\"Sep 10, 2019 5:38:07 PM\",\"updateTime\":\"Sep 10, 2019 5:38:28 PM\"}', '7', '61.140.238.240', '2019-09-10 17:38:29');
INSERT INTO `sys_log` VALUES ('642', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":37,\"title\":\"JWT（Json Web Token）实现token认证 ~ 简介\",\"digest\":\"JWT，是 Json Web Token的缩写，一种用于前后端进行接口交互时对用户身份认证的方式，此种方式属于 无状态 式的验证模式，即服务端不需要存储 客户端/前端 用户的会话Session，而只需要在进行前后端交互时采用Token进行认证即可！\",\"label\":\"jwt;JWT;Json Web Token;token认证;身份认证;接口认证\",\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":1,\"createTime\":\"Sep 10, 2019 5:41:17 PM\",\"readTotal\":1,\"memo\":\"JWT（Json Web Token）实现token认证 ~ 简介\",\"typeIds\":[19]}', '16', '61.140.238.240', '2019-09-10 17:41:18');
INSERT INTO `sys_log` VALUES ('643', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '37', '5', '61.140.238.240', '2019-09-10 17:45:55');
INSERT INTO `sys_log` VALUES ('644', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":334,\"parentId\":0,\"courseId\":11,\"type\":1,\"name\":\"第1章 课程整体介绍\",\"orderBy\":1,\"url\":null,\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '9', '61.140.237.16', '2019-09-12 21:29:00');
INSERT INTO `sys_log` VALUES ('645', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":335,\"parentId\":0,\"courseId\":11,\"type\":1,\"name\":\"第2章 微服务SpringBoot项目的搭建\",\"orderBy\":2,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '6', '61.140.237.16', '2019-09-12 21:29:07');
INSERT INTO `sys_log` VALUES ('646', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":337,\"parentId\":0,\"courseId\":11,\"type\":1,\"name\":\"第4章 基于Token+数据库认证模式\",\"orderBy\":4,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '61.140.237.16', '2019-09-12 21:32:12');
INSERT INTO `sys_log` VALUES ('647', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":338,\"parentId\":0,\"courseId\":11,\"type\":1,\"name\":\"第5章 基于Token + Redis认证模式\",\"orderBy\":5,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '4', '61.140.237.16', '2019-09-12 21:32:16');
INSERT INTO `sys_log` VALUES ('648', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":339,\"parentId\":0,\"courseId\":11,\"type\":1,\"name\":\"第6章 基于JWT(Json Web Token)认证模式\",\"orderBy\":6,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '7', '61.140.237.16', '2019-09-12 21:32:20');
INSERT INTO `sys_log` VALUES ('649', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":340,\"parentId\":0,\"courseId\":11,\"type\":1,\"name\":\"第7章 基于JWT + Redis 认证模式\",\"orderBy\":7,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '9', '61.140.237.16', '2019-09-12 21:32:23');
INSERT INTO `sys_log` VALUES ('650', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":341,\"parentId\":0,\"courseId\":11,\"type\":1,\"name\":\"第8章 基于Spring Session认证模式\",\"orderBy\":8,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '6', '61.140.237.16', '2019-09-12 21:32:27');
INSERT INTO `sys_log` VALUES ('651', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":342,\"parentId\":0,\"courseId\":11,\"type\":1,\"name\":\"第9章 基于Shiro Session认证模式\",\"orderBy\":9,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '61.140.237.16', '2019-09-12 21:32:30');
INSERT INTO `sys_log` VALUES ('652', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":337,\"parentId\":0,\"courseId\":11,\"type\":1,\"name\":\"第4章 基于Token + 数据库认证模式\",\"orderBy\":4,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":1568295132000,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '6', '61.140.237.16', '2019-09-12 21:32:54');
INSERT INTO `sys_log` VALUES ('653', 'debug', '设置课时免费', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.free()', '344', '7', '116.23.154.205', '2019-09-14 16:23:50');
INSERT INTO `sys_log` VALUES ('654', 'debug', '设置课时免费', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.free()', '345', '6', '116.23.154.205', '2019-09-14 16:23:56');
INSERT INTO `sys_log` VALUES ('655', 'debug', '设置课时免费', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.free()', '347', '5', '116.23.154.205', '2019-09-14 16:24:03');
INSERT INTO `sys_log` VALUES ('656', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":344,\"parentId\":334,\"courseId\":11,\"type\":2,\"name\":\"1-1 课程整体介绍\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/f0926e0ap0q.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":1568449430000,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '6', '116.23.154.205', '2019-09-14 16:24:30');
INSERT INTO `sys_log` VALUES ('657', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":345,\"parentId\":334,\"courseId\":11,\"type\":2,\"name\":\"1-2 核心技术列表\",\"orderBy\":2,\"url\":\"https://v.qq.com/x/page/l0926huofk5.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":1568449436000,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '6', '116.23.154.205', '2019-09-14 16:24:48');
INSERT INTO `sys_log` VALUES ('658', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":347,\"parentId\":334,\"courseId\":11,\"type\":2,\"name\":\"1-4 整体授课流程\",\"orderBy\":4,\"url\":\"https://v.qq.com/x/page/w0926gfvrxf.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":1568449443000,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '6', '116.23.154.205', '2019-09-14 16:25:03');
INSERT INTO `sys_log` VALUES ('659', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":351,\"parentId\":336,\"courseId\":11,\"type\":2,\"name\":\"3-1 基于Token认证模式的整体流程\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/k092614f1y6.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":null,\"parentName\":\"第3章 实战热身准备\",\"open\":null,\"list\":null,\"sonLessons\":null}', '8', '116.23.154.205', '2019-09-14 16:25:22');
INSERT INTO `sys_log` VALUES ('660', 'debug', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '11', '12', '116.23.154.205', '2019-09-14 16:26:07');
INSERT INTO `sys_log` VALUES ('661', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":381,\"parentId\":340,\"courseId\":11,\"type\":2,\"name\":\"7-3 优化点三之退出登录与修改密码注销Token\",\"orderBy\":3,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-09-12\",\"updateTime\":null,\"parentName\":\"第7章 基于JWT + Redis 认证模式\",\"open\":null,\"list\":null,\"sonLessons\":null}', '6', '116.23.154.205', '2019-09-14 16:29:14');
INSERT INTO `sys_log` VALUES ('662', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":38,\"title\":\"重磅发布- SpringBoot2.0前后端分离开发之用户身份认证实战(后端实现)  视频教程\",\"digest\":\"历经两三个星期的时间，Debug亲自撸的 “SpringBoot2.x前后端分离开发之用户身份认证实战（后端实现）” 终于完成了。正如字面意思，本课程讲解的是在当前微服务、分布式系统架构时代，前后端在进行接口交互、服务与服务之间在进行接口交互时如何对用户的身份进行认证，即如何进行鉴权！\",\"label\":\"Spring Boot;Spring Boot2.0;Spring MVC;Mybatis;加密解密算法AES;雪花算法Snowflake;统一验参工具ValidatorUtil;JWT（Json Web Token）;缓存中间件Redis;Shiro(身份认证与会话等等);过滤器Filter;拦截器Interceptor;热部署插件Devtools\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":1,\"createTime\":\"2019-09-16 10:25:12\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"SpringBoot2.0前后端分离开发之用户身份认证实战(后端实现)  视频教程\",\"userName\":null,\"typeIds\":[19],\"typeId\":null}', '44', '113.109.111.187', '2019-09-16 10:25:13');
INSERT INTO `sys_log` VALUES ('663', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '38', '6', '113.109.111.187', '2019-09-16 10:30:14');
INSERT INTO `sys_log` VALUES ('664', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":39,\"title\":\"SpringBoot系列（六）：使用SpringBoot定时任务时不得不采的坑\",\"digest\":\"本文我们将分享介绍如何基于Spring Boot搭建的项目使用Spring Task定时任务，带领各位小伙伴踩一踩在使用Spring定时任务时所出现的坑，并采用线程池~多线程任务调度的形式对出现的坑加以解决、优化！\",\"label\":\"定时任务;Spring Boot;springboot;spring;线程池;多线程;Scheduler;@Scheduled\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":6,\"createTime\":\"2019-09-19 22:34:19\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"使用SpringBoot定时任务时不得不采的坑\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '30', '113.109.111.187', '2019-09-19 22:34:19');
INSERT INTO `sys_log` VALUES ('665', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '39', '6', '113.109.111.187', '2019-09-19 22:38:37');
INSERT INTO `sys_log` VALUES ('666', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":40,\"title\":\"SpringBoot系列（七）：Java8的Stream API，让集合操作更为高效\",\"digest\":\"本文我们将开个小插曲，分享介绍如何基于Java8提供的Stream特性，高效操作我们的集合，如List、Set、Map等等。其中，将主要介绍Stream特性提供的筛选过滤功能Filter、对象转化功能Map、去重Distinct、排序Sorted、最小值Min以及最大值Max等核心操作。\",\"label\":\"java;java8;springboot;spring boot;java8集合操作;java集合;stream api;java stream;java8 stream\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":7,\"createTime\":\"2019-09-20 10:57:01\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"Java8的Stream API，让集合操作更为高效\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '32', '113.109.111.187', '2019-09-20 10:57:02');
INSERT INTO `sys_log` VALUES ('667', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '40', '6', '113.109.111.187', '2019-09-20 11:05:10');
INSERT INTO `sys_log` VALUES ('668', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":333,\"parentId\":40,\"courseId\":8,\"type\":2,\"name\":\"1.1 课程介绍与演示\",\"orderBy\":1,\"url\":\"https://www.ixigua.com/i6739005165900153351/\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-08-19\",\"updateTime\":1566785430000,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '113.109.111.187', '2019-09-22 20:51:57');
INSERT INTO `sys_log` VALUES ('669', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":41,\"title\":\"SpringBoot系列（八）：Spring Boot微服务项目配置文件详解\",\"digest\":\"本文我们将详细分享介绍如何基于Spring Boot搭建的项目使用其配置文件，其中内容将包括如何读取配置文件中变量的值，如何将配置文件中变量的值映射为Java Bean，如何加载使用自定义的配置文件以及如何进行多环境的切换！\",\"label\":\"spring boot;微服务;分布式;配置文件;读取配置文件;java;spring\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":8,\"createTime\":\"2019-09-29 23:32:22\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"Spring Boot微服务项目配置文件详解\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '135', '61.140.237.195', '2019-09-29 23:32:23');
INSERT INTO `sys_log` VALUES ('670', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '41', '12', '61.140.237.195', '2019-09-29 23:44:41');
INSERT INTO `sys_log` VALUES ('671', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":44,\"parentId\":40,\"courseId\":8,\"type\":2,\"name\":\"1.2 核心技术列表\",\"orderBy\":2,\"url\":\"https://www.ixigua.com/i6739129840554738190/\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-08-20\",\"updateTime\":1566457997000,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '7', '61.140.235.205', '2019-10-04 21:14:19');
INSERT INTO `sys_log` VALUES ('672', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":69,\"parentId\":42,\"courseId\":8,\"type\":2,\"name\":\"3.5 Spring Boot整合Kaptcha验证码\",\"orderBy\":5,\"url\":\"https://www.ixigua.com/i6739877690674774536/\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-08-22\",\"updateTime\":null,\"parentName\":\"第3章 用户登录模块\",\"open\":null,\"list\":null,\"sonLessons\":null}', '7', '61.140.235.205', '2019-10-04 21:15:03');
INSERT INTO `sys_log` VALUES ('673', 'debug', '新增博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.save()', '{\"id\":20,\"name\":\"面试题实战系列\",\"orderBy\":15,\"isActive\":1,\"memo\":\"面试题实战系列\",\"createTime\":\"2019-10-05 20:12:53\",\"updateTime\":null}', '42', '61.140.235.205', '2019-10-05 20:12:53');
INSERT INTO `sys_log` VALUES ('674', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":42,\"title\":\"面试题实战系列（1）- 判断字符串常量值出现的次数（附代码实现）\",\"digest\":\"本文我们将分享介绍一道关于Java的“字符串面试题~代码实现题”，主要实现的功能“查找特定的字符串单词word在一个长长的字符串str中出现的次数”，其中，debug将采用一种比较简陋的Java“字符串包含+定位+裁剪”的方式进行实现！\",\"label\":\"面试;java;spring boot;字符串;代码实战;字符串查找;spring;springboot2.0;微服务;分布式\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":1,\"createTime\":\"2019-10-05 22:22:01\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"判断字符串常量值出现的次数（附代码实现）\",\"userName\":null,\"typeIds\":[20],\"typeId\":null}', '21', '61.140.235.205', '2019-10-05 22:22:01');
INSERT INTO `sys_log` VALUES ('675', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":43,\"title\":\"面试题实战系列（2）- 基于注解+Enum+策略模式优化switch case\",\"digest\":\"本文我们将继续分享介绍第二道关于Java面试的“代码优化题”，主要实现的功能为：基于Spring Boot采用“注解+Enum枚举+策略模式”的思想优化项目中频繁需要增减if else的判断或者switch case中常量的取值。\",\"label\":\"面试题;面试;策略模式;设计模式;switch case优化;if else优化;spring boot;微服务;分布式\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":2,\"createTime\":\"2019-10-05 22:29:36\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"基于注解+Enum+策略模式优化switch case\",\"userName\":null,\"typeIds\":[20],\"typeId\":null}', '14', '61.140.235.205', '2019-10-05 22:29:36');
INSERT INTO `sys_log` VALUES ('676', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '42', '5', '61.140.235.205', '2019-10-05 22:37:50');
INSERT INTO `sys_log` VALUES ('677', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '43', '7', '61.140.235.205', '2019-10-08 22:21:41');
INSERT INTO `sys_log` VALUES ('678', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":44,\"title\":\"SpringBoot系列（九）：解析前端请求“无限嵌套层级的列表数据”\",\"digest\":\"本文我们将分享介绍后端如何解析快速、高效地解析前端某些奇葩请求中的某些奇葩数据，“无限嵌套的层级列表数据”便是其中的一种，在本文我们将介绍如何奇妙地利用“递归”算法层级遍历并获取相应的层级列表数据，并将其封装成对象，最终将其更新至数据库表中。\",\"label\":\"Spring;Spring Boot;层级列表树;解析前端请求数据;递归;递归算法\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":9,\"createTime\":\"2019-10-15 22:23:04\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"解析前端请求“无限嵌套层级的列表数据”\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '105', '116.21.42.85', '2019-10-15 22:23:04');
INSERT INTO `sys_log` VALUES ('679', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '44', '66', '116.21.42.85', '2019-10-15 22:29:42');
INSERT INTO `sys_log` VALUES ('680', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":45,\"title\":\"SpringBoot系列（十）：基于Equator组件记录对象字段 值修改前后的变化\",\"digest\":\"在开发企业级应用项目业务模块期间，相信很多小伙伴都实现过“记录用户的操作日志”的功能需求，此种方式可以基于Spring AOP的方式加以实现。然后，本文并非介绍如何记录用户的操作日志，而是实现用户在操作某个实体时对比实体对象字段值修改前后是否发生了变化并进行记录。\",\"label\":\"Spring;Spring Boot;微服务;分布式;Equator;对象字段比较;\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"2019-10-15 22:39:50\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"基于Equator组件记录对象字段 值修改前后的变化\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '16', '116.21.42.85', '2019-10-15 22:39:50');
INSERT INTO `sys_log` VALUES ('681', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '45', '7', '183.6.117.32', '2019-10-17 17:47:07');
INSERT INTO `sys_log` VALUES ('682', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":46,\"title\":\"SpringBoot系列（11）：文件上传实战(提供包括NIO在内的多种实现方式)\",\"digest\":\"在开发企业级应用项目业务模块期间，“上传文件/附件”的功能相信每个小伙伴都遇见过，甚至有的曾以代码实战过。本文Debug将带领各位小伙伴重新回温一下在Spring Web应用中如何实现文件的上传，其中提供了包括Java NIO在内的多种方式。\",\"label\":\"Spring Boot;文件上传;nio;java nio;微服务;Paths;Files\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":11,\"createTime\":\"2019-10-27 21:44:37\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"文件上传实战(提供包括NIO在内的多种实现方式)\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '58', '113.109.111.30', '2019-10-27 21:44:38');
INSERT INTO `sys_log` VALUES ('683', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":47,\"title\":\"SpringBoot系列（12）： Mybatis采坑之For Each In大数查询\",\"digest\":\"在开发企业级应用项目业务模块期间，相信很多小伙伴都使用过Mybatis，毕竟SSM早已横行天下。然后，在使用Myabtis期间，如果经常需要用到 IN 查询，那么特别需要注意的是“大批数据量的查询”，使用不当，很可能会出现内存溢出以及其他奇奇怪怪的错误。\",\"label\":\"Spring Boot;Mybatis;For Each;In查询;微服务;分布式\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":12,\"createTime\":\"2019-10-27 21:45:24\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"Mybatis采坑之For Each In大数查询\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '15', '113.109.111.30', '2019-10-27 21:45:25');
INSERT INTO `sys_log` VALUES ('684', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '46', '18', '113.109.111.30', '2019-10-27 22:24:27');
INSERT INTO `sys_log` VALUES ('685', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '47', '11', '113.109.111.30', '2019-10-28 17:57:58');
INSERT INTO `sys_log` VALUES ('686', 'debug', '新增博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.save()', '{\"id\":21,\"name\":\"缓存中间件Redis\",\"orderBy\":0,\"isActive\":1,\"memo\":\"缓存中间件Redis\",\"createTime\":\"2019-10-28 17:58:33\",\"updateTime\":null}', '42', '113.109.111.30', '2019-10-28 17:58:33');
INSERT INTO `sys_log` VALUES ('687', 'debug', '修改博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.update()', '{\"id\":21,\"name\":\"缓存中间件Redis\",\"orderBy\":45,\"isActive\":1,\"memo\":\"缓存中间件Redis\",\"createTime\":\"2019-10-28 17:58:33\",\"updateTime\":\"2019-10-28 17:58:42\"}', '7', '113.109.111.30', '2019-10-28 17:58:42');
INSERT INTO `sys_log` VALUES ('688', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":48,\"title\":\"Redis实战系列（1）- Linux下如何安装Redis（很详细）\",\"digest\":\"本文主要介绍如何在Linux环境下安装缓存中间件Redis，并对其进行简单的相应的配置，特别是里面有一些很容易掉入的坑值得注意，比如 bind 指令、iptables 防火墙6379端口的开放等等！\",\"label\":\"Redis;Spring Boot;微服务;缓存;中间件;Linux安装Redis\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":1,\"createTime\":\"2019-10-28 18:01:17\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"Linux下如何安装Redis（很详细）\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '36', '113.109.111.30', '2019-10-28 18:01:18');
INSERT INTO `sys_log` VALUES ('689', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '48', '6', '113.109.111.30', '2019-10-28 18:02:20');
INSERT INTO `sys_log` VALUES ('690', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '47', '8', '113.109.111.30', '2019-10-28 18:02:23');
INSERT INTO `sys_log` VALUES ('691', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":49,\"title\":\"Redis实战系列（2）：基于注解@Cacheable、@CacheEvict、@CachePut等的Redis缓存应用\",\"digest\":\"基于SpringBoot整合Redis缓存中间件的项目，采用相应的注解实现缓存的功能，即@Cacheable、@CacheEvict、@CachePut的应用！\",\"label\":\"Redis;缓存中间件;@Cacheble;@CacheEvict;@CachePut;缓存\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":2,\"createTime\":\"2019-11-03 15:22:16\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"SpringBoot2.0.3 Redis缓存 @Cacheable、@CacheEvict、@CachePut\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '54', '113.109.108.130', '2019-11-03 15:22:17');
INSERT INTO `sys_log` VALUES ('692', 'debug', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":48,\"title\":\"Redis实战系列（1）： Linux下如何安装Redis（很详细）\",\"digest\":\"本文主要介绍如何在Linux环境下安装缓存中间件Redis，并对其进行简单的相应的配置，特别是里面有一些很容易掉入的坑值得注意，比如 bind 指令、iptables 防火墙6379端口的开放等等！\",\"label\":\"Redis;Spring Boot;微服务;缓存;中间件;Linux安装Redis\",\"releaseDate\":\"2019-10-28 18:02:20\",\"status\":2,\"userId\":6,\"isDelete\":0,\"orderBy\":1,\"createTime\":\"2019-10-28 18:01:18\",\"updateTime\":\"2019-11-03 15:22:32\",\"content\":\"<p><span style=\\\"font-size: large;\\\">哈哈，其实就是这个链接啦，我都懒得写了！<img src=\\\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png\\\" alt=\\\"[坏笑]\\\" data-w-e=\\\"1\\\"></span></p><p><span style=\\\"font-size: large;\\\">链接地址：<a href=\\\"https://blog.csdn.net/unhejing/article/details/79893852\\\" target=\\\"_blank\\\" style=\\\"background-color: rgb(255, 255, 255);\\\">https://blog.csdn.net/unhejing/article/details/79893852</a></span></p>\",\"readTotal\":15,\"memo\":\"Linux下如何安装Redis（很详细）\",\"userName\":\"修罗debug\",\"typeIds\":[21],\"typeId\":null}', '17', '113.109.108.130', '2019-11-03 15:22:33');
INSERT INTO `sys_log` VALUES ('693', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '49', '5', '113.109.108.130', '2019-11-03 15:24:06');
INSERT INTO `sys_log` VALUES ('694', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":397,\"parentId\":0,\"courseId\":12,\"type\":1,\"name\":\"第1章 课程整体介绍\",\"orderBy\":1,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '6', '113.65.160.5', '2019-11-05 18:36:24');
INSERT INTO `sys_log` VALUES ('695', 'debug', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '12', '10', '113.65.160.5', '2019-11-05 18:41:24');
INSERT INTO `sys_log` VALUES ('696', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":405,\"parentId\":397,\"courseId\":12,\"type\":2,\"name\":\"1-2核心技术列表与课程收益\",\"orderBy\":2,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":null,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '6', '113.65.160.5', '2019-11-05 18:44:59');
INSERT INTO `sys_log` VALUES ('697', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":407,\"parentId\":397,\"courseId\":12,\"type\":2,\"name\":\"1-4Redis简介与典型应用场景介绍\",\"orderBy\":4,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":null,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '113.65.160.5', '2019-11-05 18:45:40');
INSERT INTO `sys_log` VALUES ('698', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":408,\"parentId\":397,\"courseId\":12,\"type\":2,\"name\":\"1-5Redis的安装与常用命令使用\",\"orderBy\":5,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":null,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '113.65.160.5', '2019-11-05 18:45:51');
INSERT INTO `sys_log` VALUES ('699', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":404,\"parentId\":397,\"courseId\":12,\"type\":2,\"name\":\"1-1课程整体介绍\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/m3017tof9of.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":null,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '113.65.160.5', '2019-11-05 19:19:56');
INSERT INTO `sys_log` VALUES ('700', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":405,\"parentId\":397,\"courseId\":12,\"type\":2,\"name\":\"1-2核心技术列表与课程收益\",\"orderBy\":2,\"url\":\"https://v.qq.com/x/page/g30176mn694.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":1572950699000,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '113.65.160.5', '2019-11-05 19:20:08');
INSERT INTO `sys_log` VALUES ('701', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":417,\"parentId\":399,\"courseId\":12,\"type\":2,\"name\":\"3-5列表List~场景实战一之商户商品列表有序存储一\",\"orderBy\":5,\"url\":\"https://v.qq.com/x/page/y3017miwopr.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":null,\"parentName\":\"第3章 Redis典型数据结构及其应用场景实战\",\"open\":null,\"list\":null,\"sonLessons\":null}', '4', '113.65.160.5', '2019-11-05 19:20:26');
INSERT INTO `sys_log` VALUES ('702', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":428,\"parentId\":399,\"courseId\":12,\"type\":2,\"name\":\"3-16有序集合SortedSet~场景实战一之话费充值排行榜\",\"orderBy\":16,\"url\":\"https://v.qq.com/x/page/a301751dg4w.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":null,\"parentName\":\"第3章 Redis典型数据结构及其应用场景实战\",\"open\":null,\"list\":null,\"sonLessons\":null}', '7', '113.65.160.5', '2019-11-05 19:20:41');
INSERT INTO `sys_log` VALUES ('703', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":443,\"parentId\":401,\"courseId\":12,\"type\":2,\"name\":\"5-1系统整体业务流程介绍与分析\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/y30171691bi.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":null,\"parentName\":\"第5章 抢红包系统设计与实战\",\"open\":null,\"list\":null,\"sonLessons\":null}', '4', '113.65.160.5', '2019-11-05 19:20:54');
INSERT INTO `sys_log` VALUES ('704', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":50,\"title\":\"SpringBoot系列（13）： 解锁Mybatis多数据源的最简姿势\",\"digest\":\"正常情况下，一个应用一个数据库是标配，也是很多小伙伴在开发企业级应用时最为常见的做法；然而，出于某些特殊的情况，一个应用需要跨数据库实现不同的功能需求 也逐渐变得很普遍！本文，我们将分享介绍一种最为简单的、基于注解式（Java Config）的方式实现Mybatis多数据源的访问。\",\"label\":\"SpringBoot;Mybatis;多数据源;微服务;分布式\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":13,\"createTime\":\"2019-11-07 21:35:43\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"解锁Mybatis多数据源的最简姿势\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '66', '61.140.238.40', '2019-11-07 21:35:44');
INSERT INTO `sys_log` VALUES ('705', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '50', '10', '61.140.238.40', '2019-11-07 21:45:34');
INSERT INTO `sys_log` VALUES ('706', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":51,\"title\":\"SpringBoot系列（14）： Spring AOP装逼指南之实现操作日志记录\",\"digest\":\"AOP ，也称为“面向切面编程”，其大名早已如雷贯耳，是 Spring 框架的核心特性之一，相信各位小伙伴也早已听闻过，其最普遍的用法是“记录应用系统业务模块的操作日志”，今天我们就来分享介绍一下如何利用Spring AOP实现业务模块操作日志的记录。\",\"label\":\"Spring Boot;Spring;AOP;面向切面编程;动态代理;操作日志;微服务;分布式\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":14,\"createTime\":\"2019-11-07 22:39:46\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"Spring AOP装逼指南之实现操作日志记录\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '28', '61.140.238.40', '2019-11-07 22:39:46');
INSERT INTO `sys_log` VALUES ('707', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '51', '6', '61.140.232.113', '2019-11-10 21:14:16');
INSERT INTO `sys_log` VALUES ('708', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":52,\"title\":\"SpringBoot系列（15）： 线程池-多线程Executors并发编程之广播式发送邮件(通知)\",\"digest\":\"一直都想撸一撸Java中线程池、多线程并发编程的东西，但却苦于朝9晚9的苦逼日子迟迟木有动工，趁这会儿空闲，Debug将采用2篇文章来分享介绍、并采用代码实战关于“Java线程池、多线程并发编程”的实际应用场景！让各位小伙伴体验体验Java中线程池、多线程并发编程的魅力，本文我们将首先以“广播式发送邮件(通知)”为案例进行实战！\",\"label\":\"多线程;线程池;Executors;Java;Spring Boot;发送邮件;微服务;高并发\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":15,\"createTime\":\"2019-11-10 21:19:20\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"线程池-多线程Executors并发编程之广播式发送邮件(通知)\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '26', '61.140.232.113', '2019-11-10 21:19:21');
INSERT INTO `sys_log` VALUES ('709', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":53,\"title\":\"SpringBoot系列（16）：线程池-多线程Executors并发编程之批量查询-插入数据\",\"digest\":\"在上篇文章中Debug给大家分享介绍了“Java线程池-多线程的其中一种应用场景~广播式给所有有效用户发送邮件（通知）”，本篇文章我们将继续向前迈进，继续介绍并实战“线程池-多线程的应用场景”，这一场景简称为“批量插入大量的数据”，同样是采用Java中的Executors下的其中某种线程池进行实战实现！\",\"label\":\"线程池;多线程;Java;微服务;分布式;高并发;Spring Boot;批量插入数据;Executors\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":16,\"createTime\":\"2019-11-10 21:27:32\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"线程池-多线程Executors并发编程之批量查询-插入数据\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '17', '61.140.232.113', '2019-11-10 21:27:32');
INSERT INTO `sys_log` VALUES ('710', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '52', '8', '61.140.232.113', '2019-11-12 20:10:42');
INSERT INTO `sys_log` VALUES ('711', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":404,\"parentId\":397,\"courseId\":12,\"type\":2,\"name\":\"1-1课程整体介绍\",\"orderBy\":1,\"url\":\"https://www.ixigua.com/i6755663749509546503/\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":1572952796000,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '11', '61.140.232.113', '2019-11-13 14:40:48');
INSERT INTO `sys_log` VALUES ('712', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":405,\"parentId\":397,\"courseId\":12,\"type\":2,\"name\":\"1-2核心技术列表与课程收益\",\"orderBy\":2,\"url\":\"https://www.ixigua.com/i6755664284266529288/\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":1572950699000,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '61.140.232.113', '2019-11-13 14:40:57');
INSERT INTO `sys_log` VALUES ('713', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":417,\"parentId\":399,\"courseId\":12,\"type\":2,\"name\":\"3-5列表List~场景实战一之商户商品列表有序存储一\",\"orderBy\":5,\"url\":\"https://www.ixigua.com/i6755664840427045379/\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":1572952826000,\"parentName\":\"第3章 Redis典型数据结构及其应用场景实战\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '61.140.232.113', '2019-11-13 14:41:15');
INSERT INTO `sys_log` VALUES ('714', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":428,\"parentId\":399,\"courseId\":12,\"type\":2,\"name\":\"3-16有序集合SortedSet~场景实战一之话费充值排行榜\",\"orderBy\":16,\"url\":\"https://www.ixigua.com/i6755665179930788365/\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-11-05\",\"updateTime\":1572952841000,\"parentName\":\"第3章 Redis典型数据结构及其应用场景实战\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '61.140.232.113', '2019-11-13 14:41:25');
INSERT INTO `sys_log` VALUES ('715', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '53', '5', '61.140.232.113', '2019-11-14 21:02:01');
INSERT INTO `sys_log` VALUES ('716', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":54,\"title\":\"SpringBoot系列（17）：基于Spring内置的JdbcTemplate实现极简CRUD功能\",\"digest\":\"现如今市面上以Java技术栈为主、用于开发Web项目的主流持久层框架主要包括Hibernate、JPA、Spring Data JPA、ibatis、Mybatis等等，其中，用的比较多的当属Mybatis、Hibernate/ Spring Data JPA，即所谓的SSM或者SSH项目啦！本文我们将基于Spring内置的JdbcTemplate实现一个功能模块的CRUD操作。\",\"label\":\"spring;jdbcTemplate;crud;持久化;微服务;spring boot\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":17,\"createTime\":\"2019-11-17 20:13:49\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"基于Spring内置的JdbcTemplate实现极简CRUD功能\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '47', '61.140.232.113', '2019-11-17 20:13:50');
INSERT INTO `sys_log` VALUES ('717', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '54', '7', '61.140.232.113', '2019-11-17 20:19:44');
INSERT INTO `sys_log` VALUES ('718', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":55,\"title\":\"SpringBoot系列（18）：SpringBoot整合MongoDB实战一之新增修改与简单查询\",\"digest\":\"MongoDB，也称之为文档型数据库，是目前市面上相当流行的其中一种NoSQL数据库，也是众多NoSQL数据库中最接近于“关系型数据库”的非关系型数据库，可以实现对象实体信息以“Document文档”的形式进行存储。我们花2篇文章分享介绍如何基于Spring Boot2.0搭建的项目整合MongoDB中间件，实现如何对业务模块进行CRUD与分页查询。\",\"label\":\"mongodb;spring boot;spring;微服务;nosql;中间件;大数据\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":18,\"createTime\":\"2019-11-17 20:24:56\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"SpringBoot整合MongoDB实战一之新增修改与简单查询\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '9', '61.140.232.113', '2019-11-17 20:24:56');
INSERT INTO `sys_log` VALUES ('719', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":56,\"title\":\"SpringBoot系列（19）：SpringBoot整合MongoDB实战二之删除与分页查询\",\"digest\":\"文档数据库中间件MongoDB的强大之处在于其可以存储大批量、海量的数据并可实现快速、高效、稳定的查询功能（据说千万级、亿级别的数据查询只需要几秒），其底层是采用“文档Document”的形式、Json格式的数据结构来存储数据的，在大数据量查询的场景下相对于关系型数据库如Mysql而言，效率将显著提升，本文我们将模拟在大数据量的场景下实现数据的分页查询与删除功能。\",\"label\":\"mongodb;spring boot;微服务;分页查询;高并发;nosql;文档数据库\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":19,\"createTime\":\"2019-11-17 21:06:42\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"SpringBoot整合MongoDB实战二之删除与分页查询\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '25', '61.140.232.113', '2019-11-17 21:06:42');
INSERT INTO `sys_log` VALUES ('720', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":57,\"title\":\"SpringBoot系列（20）：SpringBoot项目启动成功后初始化执行一些骚操作\",\"digest\":\"在开发企业级应用系统的过程中，难免需要设定项目在启动过程中或者项目启动成功后初始化一些资源，甚至执行一些骚操作，比如初始化第三方应用服务的账号密码、将系统字典数据初始化至缓存中等操作。本文我们将介绍如何基于CommandLineRunner，实现项目在启动成功之后执行一些骚操作、初始化一些资源的功能！\",\"label\":\"CommandLineRunner;spring boot;微服务;项目启动后初始化资源;资源初始化\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":20,\"createTime\":\"2019-11-17 21:22:25\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"SpringBoot项目启动成功后初始化执行一些骚操作\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '17', '61.140.232.113', '2019-11-17 21:22:25');
INSERT INTO `sys_log` VALUES ('721', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '55', '92', '113.109.108.9', '2019-11-21 20:37:03');
INSERT INTO `sys_log` VALUES ('722', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '56', '7', '113.109.111.247', '2019-11-24 21:14:43');
INSERT INTO `sys_log` VALUES ('723', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '57', '5', '113.109.110.36', '2019-11-26 21:13:19');
INSERT INTO `sys_log` VALUES ('724', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":58,\"title\":\"SpringBoot系列（21）：基于Guava_Retrying机制实现重试功能\",\"digest\":\"对于“接口/方法 重试”，相信很多小伙伴都听说过，但是在实际项目中却很少真正去实践过，在本篇文章中，Debug将给各位小伙伴介绍一种“重试”机制的实现，即Guava_Retrying，相对于传统的Spring_Retrying或者动态代理实现的重试功能而言，本文要介绍的Guava_Retrying机制使用起来将更加容易、灵活性更强！\",\"label\":\"guava;guava retrying;重试机制;spring boot;微服务;重试功能;分布式;延时重试\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":21,\"createTime\":\"2019-12-01 21:29:49\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"基于Guava_Retrying机制实现重试功能\",\"userName\":null,\"typeIds\":[1],\"typeId\":null}', '58', '61.140.236.47', '2019-12-01 21:29:50');
INSERT INTO `sys_log` VALUES ('725', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '58', '15', '61.140.236.47', '2019-12-01 21:41:21');
INSERT INTO `sys_log` VALUES ('726', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":460,\"parentId\":0,\"courseId\":13,\"type\":1,\"name\":\"第1章 课程整体介绍\",\"orderBy\":1,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '21', '113.65.209.168', '2019-12-09 17:29:03');
INSERT INTO `sys_log` VALUES ('727', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":461,\"parentId\":0,\"courseId\":13,\"type\":1,\"name\":\"第2章 应用中台实施之权限管理平台改造\",\"orderBy\":2,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":null,\"parentName\":\"一级菜单\",\"open\":null,\"list\":null,\"sonLessons\":null}', '6', '113.65.209.168', '2019-12-09 17:29:09');
INSERT INTO `sys_log` VALUES ('728', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":503,\"parentId\":464,\"courseId\":13,\"type\":2,\"name\":\"5-5 功能改造之用户登录二\",\"orderBy\":5,\"url\":null,\"isFree\":0,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":null,\"parentName\":\"第5章 CRM客户关系管理系统（基于Http协议Rest API实战篇）\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '59.42.9.171', '2019-12-09 17:43:21');
INSERT INTO `sys_log` VALUES ('729', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":468,\"parentId\":460,\"courseId\":13,\"type\":2,\"name\":\"1-1课程介绍与整体收益\",\"orderBy\":1,\"url\":\"https://v.qq.com/x/page/c3032rhmbhb.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":null,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '113.65.209.168', '2019-12-09 17:50:05');
INSERT INTO `sys_log` VALUES ('730', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":469,\"parentId\":460,\"courseId\":13,\"type\":2,\"name\":\"1-2中台思想介绍与系统整体演示\",\"orderBy\":2,\"url\":\"https://v.qq.com/x/page/x3032l33eeq.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":null,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '7', '113.65.209.168', '2019-12-09 17:50:21');
INSERT INTO `sys_log` VALUES ('731', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":470,\"parentId\":460,\"courseId\":13,\"type\":2,\"name\":\"1-3核心技术列表\",\"orderBy\":3,\"url\":\"https://v.qq.com/x/page/d30323exxx1.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":null,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '113.65.209.168', '2019-12-09 17:50:42');
INSERT INTO `sys_log` VALUES ('732', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":471,\"parentId\":460,\"courseId\":13,\"type\":2,\"name\":\"1-4课程学习要求、工具和建议\",\"orderBy\":4,\"url\":\"https://v.qq.com/x/page/a3032njvbaa.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":null,\"parentName\":\"第1章 课程整体介绍\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '113.65.209.168', '2019-12-09 17:50:55');
INSERT INTO `sys_log` VALUES ('733', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":478,\"parentId\":461,\"courseId\":13,\"type\":2,\"name\":\"2-7性能优化之Redis预缓存系统编码列表一\",\"orderBy\":7,\"url\":null,\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":null,\"parentName\":\"第2章 应用中台实施之权限管理平台改造\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '113.65.209.168', '2019-12-09 17:51:06');
INSERT INTO `sys_log` VALUES ('734', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":478,\"parentId\":461,\"courseId\":13,\"type\":2,\"name\":\"2-7性能优化之Redis预缓存系统编码列表一\",\"orderBy\":7,\"url\":\"https://v.qq.com/x/page/y3032z6qcvx.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":1575885065000,\"parentName\":\"第2章 应用中台实施之权限管理平台改造\",\"open\":null,\"list\":null,\"sonLessons\":null}', '5', '113.65.209.168', '2019-12-09 17:51:13');
INSERT INTO `sys_log` VALUES ('735', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":482,\"parentId\":462,\"courseId\":13,\"type\":2,\"name\":\"3-3完成用户登录服务接口开发与自测\",\"orderBy\":3,\"url\":\"https://v.qq.com/x/page/l3032hcsx6g.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":null,\"parentName\":\"第3章 应用中台实施之Dubbo服务开发与发布\",\"open\":null,\"list\":null,\"sonLessons\":null}', '4', '113.65.209.168', '2019-12-09 17:51:25');
INSERT INTO `sys_log` VALUES ('736', 'debug', '修改课时', 'com.debug.coding.fight.server.controller.admin.CourseLessonController.update()', '{\"id\":514,\"parentId\":465,\"courseId\":13,\"type\":2,\"name\":\"6-7 基于Dubbo Filter + ServiceBean拦截请求URL一\",\"orderBy\":7,\"url\":\"https://v.qq.com/x/page/g30325pxxky.html\",\"isFree\":1,\"isDelete\":0,\"memo\":null,\"createTime\":\"2019-12-09\",\"updateTime\":null,\"parentName\":\"第6章 应用授权中心实战\",\"open\":null,\"list\":null,\"sonLessons\":null}', '4', '113.65.209.168', '2019-12-09 17:51:43');
INSERT INTO `sys_log` VALUES ('737', 'debug', '发布课程', 'com.debug.coding.fight.server.controller.admin.CourseController.delete()', '13', '8', '61.140.238.71', '2019-12-09 20:05:10');
INSERT INTO `sys_log` VALUES ('738', 'debug', '新增博客分类', 'com.debug.coding.fight.server.controller.admin.BlogTypeController.save()', '{\"id\":22,\"name\":\"SpringBoot2.0企业中台实战\",\"orderBy\":8,\"isActive\":1,\"memo\":\"SpringBoot2.0企业中台实战\",\"createTime\":\"2019-12-10 20:38:12\",\"updateTime\":null}', '36', '61.140.238.71', '2019-12-10 20:38:12');
INSERT INTO `sys_log` VALUES ('739', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":59,\"title\":\"重磅课程发布~SpringBoot2.0企业中台实战之权限统一管理与应用统一授权（dubbo+zookeeper分布式系统实战）\",\"digest\":\"历经一个月的时间，Debug亲自撸的一套“企业中台系统”终于完成了，课程全名为 “springboot2.0企业应用中台实战之权限统一管理与应用统一授权”，正如字面意思，本课程讲解的是一个真正意义上的、企业级中台系统的实战，是一套真正践行“中台思想”、“分布式系统/服务开发与通信”的项目（画外音：目前全网还没有关于中台系统的课程实战哦！）\",\"label\":\"中台;spring boot2.0;dubbo;zookeeper;jwt;okhttp3;分布式;微服务\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":1,\"createTime\":\"2019-12-10 20:39:06\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"SpringBoot2.0企业中台实战之权限统一管理与应用统一授权（dubbo+zookeeper分布式系统实战）\",\"userName\":null,\"typeIds\":[22],\"typeId\":null}', '18', '61.140.238.71', '2019-12-10 20:39:06');
INSERT INTO `sys_log` VALUES ('740', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '59', '6', '61.140.238.71', '2019-12-10 20:49:37');
INSERT INTO `sys_log` VALUES ('741', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":60,\"title\":\"Redis实战(1)-SpringBoot2.0整合Redis自定义注入模板操作组件\",\"digest\":\"对于Redis，相信很多小伙伴早已有所耳闻，更有甚者，已经将其应用到许许多多的项目当中了！没错，它就是目前业界应用相当广泛的其中一种缓存中间件，也可以算是其中的佼佼者吧，从本篇文章开始，我们将基于SpringBoot2.0整合搭建的微服务项目为奠基，开启中间件Redis的实战之路！\",\"label\":\"redis;springboot;StringRedisTemplate;RedisTemplate;缓存;中间件\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":1,\"createTime\":\"2019-12-17 21:06:20\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"SpringBoot2.0整合Redis自定义注入模板操作组件\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '130', '113.109.109.113', '2019-12-17 21:06:20');
INSERT INTO `sys_log` VALUES ('742', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '60', '7', '113.109.109.113', '2019-12-17 21:26:51');
INSERT INTO `sys_log` VALUES ('743', 'debug', '修改博客', 'com.debug.coding.fight.server.controller.admin.BlogController.update()', '{\"id\":60,\"title\":\"Redis实战(1)-SpringBoot2.0整合Redis自定义注入模板操作Bean组件\",\"digest\":\"对于Redis，相信很多小伙伴早已有所耳闻，更有甚者，已经将其应用到许许多多的项目当中了！没错，它就是目前业界应用相当广泛的其中一种缓存中间件，也可以算是其中的佼佼者吧，从本篇文章开始，我们将基于SpringBoot2.0整合搭建的微服务项目为奠基，开启中间件Redis的实战之路！\",\"label\":\"redis;springboot;StringRedisTemplate;RedisTemplate;缓存;中间件\",\"releaseDate\":\"2019-12-17 21:26:51\",\"status\":2,\"userId\":6,\"isDelete\":0,\"orderBy\":1,\"createTime\":\"2019-12-17 21:06:20\",\"updateTime\":\"2019-12-17 21:27:17\",\"content\":\"<p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\"><strong>摘要：</strong>对于Redis，相信很多小伙伴早已有所耳闻，更有甚者，已经将其应用到许许多多的项目当中了！没错，它就是目前业界应用相当广泛的其中一种缓存中间件，也可以算是其中的佼佼者吧，从本篇文章开始，我们将基于SpringBoot2.0整合搭建的微服务项目为奠基，开启中间件Redis的实战之路！</span></p><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\"><strong>内容：</strong>本篇文章我们将首先基于SpringBoot2.0搭建的项目整合缓存中间件Redis，在项目中加入跟Redis相关的、常见的配置信息，并自定义注入Redis的模板操作组件StringRedisTemplate和RedisTemplate，最终给大伙撸个简单的Demo并由此开启Redis的实战之旅！</span></p><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\">（1）第一步当然是先加入中间件Redis的依赖Jar，如下所示：</span></p><pre><code><span style=\\\"font-size: medium;\\\">        &lt;!-- redis --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;<br>            &lt;version&gt;1.3.3.RELEASE&lt;/version&gt;<br>        &lt;/dependency&gt;</span></code></pre><p><span style=\\\"font-family: 微软雅黑; font-size: medium;\\\">然后是在配置文件application.properties中加入Redis常见的相关配置信息，包括host、port等基本信息，在这里我们提供了两种配置方式，即“单机模式”和“集群模式”的配置，如下所示：&nbsp;&nbsp;</span><br></p><pre><code><span style=\\\"font-size: medium;\\\">#redis 单机配置<br>spring.redis.host=127.0.0.1<br>spring.redis.port=6379<br>spring.redis.password=<br><br>spring.redis.jedis.pool.min-idle=100<br>spring.redis.jedis.pool.max-idle=300<br>spring.redis.jedis.pool.max-active=500<br><br>#集群配置<br>#spring.redis.cluster.nodes=127.0.0.1:6379,127.0.0.1:6380,127.0.0.1:6381,127.0.0.1:6382</span></code></pre><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\">在该配置文件中，我们还加入了“链接池”的概念，其中，链接池里最小可用的链接数为100个，最大可用的连接数为300个，如果还不够而需要动态扩增时，我们将最终将活跃的链接数增加到500个！（如果500个还不够，那就得堵塞等待了，等待期间，如果时间超过了默认配置的超时时间，那将报出类似于connection reset或者connection error的错误）</span></p><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\">（2）接下来，我们将基于整合搭建好的项目自定义注入Redis的操作模板组件，即主要是StringRedisTemplate和RedisTemplate。<br></span></p><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\">值得一提的是，在传统的Java Web项目中，如Spring+SpringMVC+Mybatis整合的项目，一般是直接采用基于Jedis封装出一个JedisUtil工具类，这种方式跟以前使用JDBCUtil操作DB数据库时有点类似，其缺陷还是比较明显的（如需要手动创建链接、关闭链接资源等操作）</span></p><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\">而SpringBoot的问世，带来了“约定优先于配置”、“起步依赖”等优点，省去了许多以往需要手动创建、关闭链接等有可能消耗资源的操作，即直接就内置在了SpringBoot Redis的起步依赖中了，而对于如何更加便捷的操作Redis，SpringBoot更是直接封装、提供了两大模板操作组件StringRedisTemplate和RedisTemplate，如下所示我们自定义注入了这两个模板操作组件，即主要指定其序列化的相关策略：</span></p><pre><code><span style=\\\"font-size: medium;\\\">/**<br> * @EnableCaching：开启缓存（注解生效的）<br> * redis的操作组件自定义注入配置<br> * @Author:debug (SteadyJack)<br> * @Link: wx-&gt; debug0868  qq-&gt; 1948831260<br> * @Date: 2019/10/29 16:59<br> **/<br>@Configuration<br>@EnableCaching<br>public class RedisConfig {<br><br>    @Autowired<br>    private RedisConnectionFactory connectionFactory;<br><br>    @Bean<br>    public RedisTemplate redisTemplate(){<br>        RedisTemplate&lt;String,Object&gt; redisTemplate=new RedisTemplate&lt;&gt;();<br>        redisTemplate.setConnectionFactory(connectionFactory);<br>        //设置序列化策略<br>        redisTemplate.setKeySerializer(new StringRedisSerializer());<br>        redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());<br>        redisTemplate.setHashKeySerializer(new StringRedisSerializer());<br><br>        redisTemplate.afterPropertiesSet();<br>        return redisTemplate;<br>    }<br><br>    @Bean<br>    public StringRedisTemplate stringRedisTemplate(){<br>        StringRedisTemplate stringRedisTemplate=new StringRedisTemplate();<br>        stringRedisTemplate.setConnectionFactory(connectionFactory);<br>        return stringRedisTemplate;<br>    }<br>}</span></code></pre><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\">（3）至此，我们已经做好了相关的前奏准备，接下来我们写个简单的Demo，意思意思一下“开启Redis的实战之路”：&nbsp;&nbsp;</span><br></p><pre><code><span style=\\\"font-size: medium;\\\">/**<br> * @Author:debug (SteadyJack)<br> * @Link: weixin-&gt; debug0868 qq-&gt; 1948831260<br> * @Date: 2019/10/29 15:47<br> **/<br>@RestController<br>@RequestMapping(\\\"base\\\")<br>public class BaseController {<br><br>    private static final Logger log= LoggerFactory.getLogger(BaseController.class);<br><br>    @Autowired<br>    private StringRedisTemplate stringRedisTemplate;<br><br>    private static final String RedisHelloWorldKey=\\\"SpringBootRedis:HelloWorld\\\";<br><br>    @RequestMapping(value = \\\"/hello/world/put\\\",method = RequestMethod.POST)<br>    @ResponseBody<br>    public BaseResponse helloWorldPut(@RequestParam String helloName){<br>        BaseResponse response=new BaseResponse(StatusCode.Success);<br>        try {<br>            stringRedisTemplate.opsForValue().set(RedisHelloWorldKey,helloName);<br>            response.setData(\\\"hello world!\\\");<br>        }catch (Exception e){<br>            log.info(\\\"--hello world get异常信息： \\\",e.fillInStackTrace());<br>            response=new BaseResponse(StatusCode.Fail.getCode(),e.getMessage());<br>        }<br>        return response;<br>    }<br><br>    @RequestMapping(value = \\\"/hello/world/get\\\",method = RequestMethod.GET)<br>    @ResponseBody<br>    public BaseResponse helloWorldGet(){<br>        BaseResponse response=new BaseResponse(StatusCode.Success);<br>        try {<br>            String result=stringRedisTemplate.opsForValue().get(RedisHelloWorldKey);<br>            response.setData(result);<br>        }catch (Exception e){<br>            log.info(\\\"--hello world get异常信息： \\\",e.fillInStackTrace());<br>            response=new BaseResponse(StatusCode.Fail.getCode(),e.getMessage());<br>        }<br>        return response;<br>    }<br>}</span></code></pre><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\">上述代码就是简单的基于Redis的String数据类型存储特定的一串信息（在这里指的是一串字符串常量值，由前端传递过来！）</span></p><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\">（4）最后，我们基于Postman进行自测（学会自测是一个Java攻城狮必备的技能以及良好的习惯），两张图加以概括吧：</span></p><p><img src=\\\"http://www.fightjava.com/files/fightCoding/blog/20191217/428697433916480748.png\\\" style=\\\"max-width:100%;\\\"><br></p><p><img src=\\\"http://www.fightjava.com/files/fightCoding/blog/20191217/428697529538238917.png\\\" style=\\\"max-width:100%;\\\"><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\"><br></span></p><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\">好了，本篇文章我们就介绍到这里了，建议各位小伙伴一定要照着文章提供的样例代码撸一撸，只有撸过才能知道这玩意是咋用的，否则就成了“空谈者”！对Redis相关技术栈以及实际应用场景实战感兴趣的小伙伴可以前往Debug搭建的技术社区的课程中心进行学习观看：<a href=\\\"http://www.fightjava.com/web/index/course/detail/12\\\">http://www.fightjava.com/web/index/course/detail/12</a> ！</span></p><p><span style=\\\"font-size: medium; font-family: 微软雅黑;\\\">其他相关的技术，感兴趣的小伙伴可以关注底部Debug的技术公众号，或者加Debug的微信，拉你进“微信版”的真正技术交流群！一起学习、共同成长！</span></p><h3><span style=\\\"font-weight: bold;\\\">补充：</span></h3><p><span style=\\\"font-family: 微软雅黑; font-size: medium;\\\">1、本文涉及到的相关的源代码可以到此地址，check出来进行查看学习：</span></p><p><span style=\\\"font-family: 微软雅黑; font-size: medium;\\\"><a href=\\\"https://gitee.com/steadyjack/SpringBootRedis\\\">https://gitee.com/steadyjack/SpringBootRedis</a> </span></p><p><span style=\\\"font-family: 微软雅黑; font-size: medium;\\\">2、目前Debug已将本文所涉及的内容整理录制成视频教程，感兴趣的小伙伴可以前往观看学习：<a href=\\\"http://www.fightjava.com/web/index/course/detail/12\\\">http://www.fightjava.com/web/index/course/detail/12</a> </span></p><p><span style=\\\"font-family: 微软雅黑; font-size: medium;\\\">3、关注一下Debug的技术微信公众号，最新的技术文章、课程以及技术专栏将会第一时间在公众号发布哦！</span></p><p><img src=\\\"http://www.fightjava.com/statics/web/img/Official_Accounts2.png\\\" style=\\\"max-width:100%;\\\"><br></p>\",\"readTotal\":5,\"memo\":\"SpringBoot2.0整合Redis自定义注入模板操作组件\",\"userName\":\"修罗debug\",\"typeIds\":[21],\"typeId\":null}', '16', '113.109.109.113', '2019-12-17 21:27:17');
INSERT INTO `sys_log` VALUES ('744', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":61,\"title\":\"Redis实战(2)-数据结构之字符串String实战之存储对象\",\"digest\":\"在Redis众多数据结构当中，字符串String可以说是其中比较常见、应用比较频繁的一种了，本文我们将介绍数据类型~字符串String 在命令行的简单使用及其在实际业务场景中的应用与代码实战，其中应用场景为“存储前端门户网站的商品详情信息”，从而减少数据库DB的访问频率，提高接口的响应速率！\",\"label\":\"redis;spring boot;微服务;缓存;中间件;字符串实战\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":2,\"createTime\":\"2019-12-17 22:19:21\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"数据结构之字符串String实战之存储对象\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '14', '113.109.109.113', '2019-12-17 22:19:21');
INSERT INTO `sys_log` VALUES ('745', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":62,\"title\":\"Redis实战(3)-数据结构List实战一之商品信息的有序存储\",\"digest\":\"电商平台的管理后端一般有两大角色的用户可以使用，一个是系统管理员，一个是平台的卖家/商家，对于商家而言，管理自个儿的商品是日常工作中再为普通不过的事情了，本文我们将以“有序存储并展示电商平台中商家上传的各式各样的商品列表”，这里的关键词是“有序存储与展示”，我们将借助缓存中间件Redis的数据结构~列表List进行实战实现！\",\"label\":\"redis;spring boot;缓存;中间件;列表list;list;有序存储\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":3,\"createTime\":\"2019-12-17 22:30:13\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"数据结构List实战一之商品信息的有序存储\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '20', '113.109.109.113', '2019-12-17 22:30:14');
INSERT INTO `sys_log` VALUES ('746', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '61', '7', '113.109.111.160', '2019-12-19 22:06:42');
INSERT INTO `sys_log` VALUES ('747', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '62', '207', '113.109.111.160', '2019-12-22 19:14:19');
INSERT INTO `sys_log` VALUES ('748', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":63,\"title\":\"Redis实战(4)-数据结构List实战之队列特性实现消息多线程 广播通知\",\"digest\":\"电商平台的管理后端一般有两大角色的用户可以使用，一个是系统管理员，一个是平台的卖家/商家，对于商家而言，管理自个儿的商品是日常工作中再为普通不过的事情了，而对于系统管理员而言，有时候需要发布一些活动公告通知商家进行报名参加，本文我们将基于List的队列特性实现公告消息的广播通知功能！\",\"label\":\"redis;多线程;列表list;数据结构;队列特性;spring boot;广播通知\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":4,\"createTime\":\"2019-12-29 19:40:08\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"数据结构List实战之队列特性实现消息多线程 广播通知\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '28', '61.140.233.59', '2019-12-29 19:40:09');
INSERT INTO `sys_log` VALUES ('749', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '63', '12', '113.109.109.170', '2020-01-29 22:57:12');
INSERT INTO `sys_log` VALUES ('750', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":64,\"title\":\"Redis实战(5)-数据结构Set实战之过滤用户注册重复提交的信息\",\"digest\":\"毫无疑问，集合Set同样也是缓存中间件Redis中其中一个重要的数据结构，其内部存储的元素/成员具有“唯一”、“随机”等特性，在实际的项目开发中同样具有相当广泛的应用场景。本文我们将介绍并实战一种比较典型的业务场景~“重复提交”，即如何利用集合Set的相关特性实现“用户注册时过滤重复提交的消息”！\",\"label\":\"redis;set;集合set;数据结构;重复提交;过滤重复元素;spring boot2.0\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":5,\"createTime\":\"2020-02-03 16:38:47\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"数据结构Set实战之过滤用户注册重复提交的信息\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '44', '61.140.236.119', '2020-02-03 16:38:47');
INSERT INTO `sys_log` VALUES ('751', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '64', '7', '61.140.236.119', '2020-02-03 16:48:16');
INSERT INTO `sys_log` VALUES ('752', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":65,\"title\":\"Redis实战(6)-数据结构Set实战之获取随机乱序唯一的试卷题目\",\"digest\":\"缓存中间件Redis拥有许多丰富、重要且有趣的数据结构，集合Set便是其中的一个佼佼者，其核心特性跟JavaSE集合体系中的Set几乎一毛一样，即“无序”且“唯一”，当我们向集合Set伸手要一个元素时，其底层会随机地给我们发一个元素！本文我们将继续给各位小伙伴介绍并实战另外一种典型的业务场景~从“考试系统”中获取随机、乱序且唯一的试卷题目列表\",\"label\":\"redis;集合set;考试系统;随机获取元素\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":6,\"createTime\":\"2020-02-03 18:02:49\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"数据结构Set实战之获取随机乱序唯一的试卷题目\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '17', '61.140.236.119', '2020-02-03 18:02:50');
INSERT INTO `sys_log` VALUES ('753', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '65', '7', '61.140.236.119', '2020-02-03 18:22:20');
INSERT INTO `sys_log` VALUES ('754', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":66,\"title\":\"Redis实战(7)-SortedSet实战之认识有序集合(命令行与代码实战)\",\"digest\":\"缓存中间件Redis拥有许多丰富、重要且有趣的数据结构，前文介绍的字符串String、列表List和集合Set便是其中的佼佼者，本文以及后续篇章介绍的有序集合SortedSet和哈希Hash数据结构亦是如此，毫不夸张的说，当我们谈及Redis的应用场景时，这几种数据结构几乎都会涉及。本文我们将以命令行和代码的形式继续认识一下Redis的有序集合SortedSet\",\"label\":\"redis;sortedSet;有序集合;spring boot2.0;微服务;缓存;中间件\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":7,\"createTime\":\"2020-02-03 18:30:30\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"SortedSet实战之认识有序集合(命令行与代码实战)\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '12', '61.140.236.119', '2020-02-03 18:30:30');
INSERT INTO `sys_log` VALUES ('755', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '66', '6', '61.140.236.119', '2020-02-03 18:36:28');
INSERT INTO `sys_log` VALUES ('756', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":67,\"title\":\"Redis实战(8)-SortedSet典型应用场景实战之游戏充值排行榜\",\"digest\":\"缓存中间件Redis的数据结构~有序集合SortedSet在实际项目开发中还是比较常见的，特别是在一些诸如“排行榜”的业务场景更是经常可以见到其身影！本文我们将以项目中实际的业务场景“游戏充值排行榜”为案例，一起来践行有序集合SortedSet的“有序 + 唯一”的特性，感受感受其在实际项目中是如何得到应用的！\",\"label\":\"redis;缓存;中间件;spring boot2.0;微服务;sortedSet;充值排行榜;排行榜\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":8,\"createTime\":\"2020-02-03 18:44:11\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"SortedSet典型应用场景实战之游戏充值排行榜\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '12', '61.140.236.119', '2020-02-03 18:44:12');
INSERT INTO `sys_log` VALUES ('757', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '67', '6', '61.140.236.119', '2020-02-03 18:50:41');
INSERT INTO `sys_log` VALUES ('758', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":68,\"title\":\"Redis实战(9)-SortedSet实战之再谈游戏充值排行榜(如何处理历史与异常的充值记录)\",\"digest\":\"每当我们谈起缓存中间件Redis的应用场景时，我们一般都会根据其数据结构联想到对应的应用场景，有序集合SortedSet也不例外，“排行榜”一直都是与其紧密挂钩、不得不谈的其中一种实战场景！本文我们将继续再谈“游戏充值排行榜”，介绍如何去处理历史已经存在的充值记录 或者 在将充值记录塞入缓存Cache失败时如何开启后续的补偿处理措施！\",\"label\":\"redis;有序集合;sortedSet;缓存;中间件;排行榜;spring boot2.0;微服务\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":9,\"createTime\":\"2020-02-03 18:55:18\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"SortedSet实战之再谈游戏充值排行榜(如何处理历史与异常的充值记录)\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '15', '61.140.236.119', '2020-02-03 18:55:19');
INSERT INTO `sys_log` VALUES ('759', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '68', '7', '61.140.236.119', '2020-02-03 19:00:16');
INSERT INTO `sys_log` VALUES ('760', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":69,\"title\":\"Redis实战(10)-Hash实战之借助命令行和代码的形式认识一下哈希\",\"digest\":\"对于哈希数据类型Hash，有些小伙伴在实际的项目开发中相对于Redis其他的数据结构而言，可能用得并不多。然而，从“道”的层面上看，这丝毫不影响一个客观事实、规律的存在，那就是哈希Hash本身也很强大，从本文开始我们将介绍数据类型~哈希Hash的相关特性及其相应的API和命令行层面上的操作！\",\"label\":\"redis;spring boot;缓存;微服务;中间件;哈希;hash\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":10,\"createTime\":\"2020-02-03 19:04:32\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"Hash实战之借助命令行和代码的形式认识一下哈希\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '9', '61.140.236.119', '2020-02-03 19:04:33');
INSERT INTO `sys_log` VALUES ('761', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '69', '6', '61.140.236.119', '2020-02-03 19:09:59');
INSERT INTO `sys_log` VALUES ('762', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":70,\"title\":\"Redis实战(11)-哈希Hash典型应用场景实战之系统数据字典实时触发缓存存储\",\"digest\":\"前文我们已经介绍并实战了Redis的数据类型哈希Hash的相关命令行及其对应的Java单元测试的实战代码，本文我们将以实际项目中典型的应用场景“系统数据字典模块的实时触发存储”为案例，学以致用，一起践行哈希Hash在实际项目下的实战应用，感受感受其在实际业务场景下的作用！\",\"label\":\"redis;缓存;中间件;spring boot2.0;微服务;数据字典;哈希;hash\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":11,\"createTime\":\"2020-02-03 21:09:19\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"哈希Hash典型应用场景实战之系统数据字典实时触发缓存存储\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '10', '61.140.236.119', '2020-02-03 21:09:19');
INSERT INTO `sys_log` VALUES ('763', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '70', '7', '61.140.236.119', '2020-02-03 21:16:54');
INSERT INTO `sys_log` VALUES ('764', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":71,\"title\":\"Redis实战(12)-基于Redis的Key失效和定时任务调度实现订单支付超时自动失效(延时队列)\",\"digest\":\"“商城平台用户下单”这一业务场景相信很多小伙伴并不陌生，在正常的情况下，用户在提交完订单/下完单之后，应该是前往“收银台”选择支付方式进行支付，之后只需要提供相应的密码即可完成整个支付过程；然而，“非正常的情况”也总是会有的，即用户在提交完订单之后在“规定的时间内”迟迟没有支付，这个时候我们就需要采取一些措施了，本文就是讲解如何基于Redis的Key失效，即TTL + 定时任务调度 实现这一业务场景的功能\",\"label\":\"redis;延迟队列;key失效;expire;微服务;缓存;中间件;spring boot2.0;订单支付超时\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":12,\"createTime\":\"2020-02-03 21:24:13\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"基于Redis的Key失效和定时任务调度实现订单支付超时自动失效(延时队列)\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '13', '61.140.236.119', '2020-02-03 21:24:14');
INSERT INTO `sys_log` VALUES ('765', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '71', '6', '61.140.236.119', '2020-02-03 21:30:55');
INSERT INTO `sys_log` VALUES ('766', 'debug', '新增博客', 'com.debug.coding.fight.server.controller.admin.BlogController.save()', '{\"id\":72,\"title\":\"Redis实战(13) - 手把手搭建Redis集群环境 (3主3从)\",\"digest\":\"在微服务、分布式系统架构盛行的时代，我们几乎阔以在项目中见到缓存中间件Redis的身影，作为一款具有高性能、高可用、扩展性强的中间件，Redis可以说是出尽了风头！本文我们将介绍如何在本地Windows系统下搭建Redis的集群环境（采用Master-Slave的模式，即3主3从），并在文末提供如何基于Spring Boot2.0搭建的项目以集群的方式连接至Redis服务，进一步多掌握一项运维层面的硬技能！\",\"label\":\"redis;集群;redis;redis集群;主从;spring boot;微服务;缓存;中间件\",\"releaseDate\":null,\"status\":1,\"userId\":6,\"isDelete\":0,\"orderBy\":13,\"createTime\":\"2020-02-03 21:35:01\",\"updateTime\":null,\"content\":null,\"readTotal\":1,\"memo\":\"手把手搭建Redis集群环境 (3主3从)\",\"userName\":null,\"typeIds\":[21],\"typeId\":null}', '8', '61.140.236.119', '2020-02-03 21:35:01');
INSERT INTO `sys_log` VALUES ('767', 'debug', '发布博客', 'com.debug.coding.fight.server.controller.admin.BlogController.delete()', '72', '6', '61.140.236.119', '2020-02-03 21:44:45');
INSERT INTO `sys_log` VALUES ('768', 'debug', '修改登录密码', 'com.boot.mini.blog.server.controller.admin.SysUserController.updatePassword()', '\"19931008Linsen\"', '144', '0:0:0:0:0:0:0:1', '2020-02-09 09:45:48');
INSERT INTO `sys_log` VALUES ('769', 'debug', '删除菜单', 'com.boot.mini.blog.server.controller.admin.SysMenuController.delete()', '32', '281', '0:0:0:0:0:0:0:1', '2020-02-09 16:52:29');
INSERT INTO `sys_log` VALUES ('770', 'debug', '删除菜单', 'com.boot.mini.blog.server.controller.admin.SysMenuController.delete()', '33', '264', '0:0:0:0:0:0:0:1', '2020-02-09 16:52:32');
INSERT INTO `sys_log` VALUES ('771', 'debug', '删除菜单', 'com.boot.mini.blog.server.controller.admin.SysMenuController.delete()', '34', '273', '0:0:0:0:0:0:0:1', '2020-02-09 16:52:35');
INSERT INTO `sys_log` VALUES ('772', 'debug', '删除菜单', 'com.boot.mini.blog.server.controller.admin.SysMenuController.delete()', '35', '264', '0:0:0:0:0:0:0:1', '2020-02-09 16:52:37');
INSERT INTO `sys_log` VALUES ('773', 'debug', '新增用户', 'com.boot.mini.blog.server.controller.admin.SysUserController.save()', '{\"userId\":null,\"username\":\"zhangsan\",\"name\":\"张三\",\"password\":\"123456\",\"salt\":null,\"email\":\"zhangsan@126.com\",\"mobile\":null,\"status\":1,\"type\":0,\"roleIdList\":[1],\"createTime\":null,\"deptId\":null,\"deptName\":null,\"postIdList\":null,\"postName\":null}', '1', '0:0:0:0:0:0:0:1', '2020-02-09 17:17:58');
INSERT INTO `sys_log` VALUES ('774', 'debug', '新增用户', 'com.boot.mini.blog.server.controller.admin.SysUserController.save()', '{\"userId\":27,\"username\":\"zhangsan\",\"name\":\"张三\",\"password\":\"ce0b201bfb6ff54beb96bf5e7691aae1e09ad55e13284526e0a3454defd513eb\",\"salt\":\"loSnAjvt9Rm52i3RwM56\",\"email\":\"zhangsan@126.com\",\"mobile\":null,\"status\":1,\"type\":1,\"createTime\":1581240062753,\"deptId\":null,\"roleIdList\":[],\"deptName\":null,\"postIdList\":null,\"postName\":null}', '513', '0:0:0:0:0:0:0:1', '2020-02-09 17:21:03');
INSERT INTO `sys_log` VALUES ('775', 'debug', '修改用户', 'com.boot.mini.blog.server.controller.admin.SysUserController.update()', '{\"userId\":27,\"username\":\"zhangsan\",\"name\":\"张三\",\"password\":null,\"salt\":\"loSnAjvt9Rm52i3RwM56\",\"email\":\"zhangsan@126.com\",\"mobile\":null,\"status\":1,\"type\":1,\"createTime\":1581240063000,\"deptId\":null,\"roleIdList\":[],\"deptName\":null,\"postIdList\":[],\"postName\":null}', '436', '0:0:0:0:0:0:0:1', '2020-02-09 17:21:14');
INSERT INTO `sys_log` VALUES ('776', 'debug', '修改用户', 'com.boot.mini.blog.server.controller.admin.SysUserController.update()', '{\"userId\":27,\"username\":\"zhangsan\",\"name\":\"张三\",\"password\":null,\"salt\":\"loSnAjvt9Rm52i3RwM56\",\"email\":\"zhangsan@126.com\",\"mobile\":null,\"status\":1,\"type\":1,\"createTime\":1581240063000,\"deptId\":null,\"roleIdList\":[],\"deptName\":null,\"postIdList\":[],\"postName\":null}', '431', '0:0:0:0:0:0:0:1', '2020-02-09 17:21:22');
INSERT INTO `sys_log` VALUES ('777', 'debug', '修改用户', 'com.boot.mini.blog.server.controller.admin.SysUserController.update()', '{\"userId\":27,\"username\":\"zhangsan\",\"name\":\"张三\",\"password\":null,\"salt\":\"loSnAjvt9Rm52i3RwM56\",\"email\":\"zhangsan@126.com\",\"mobile\":null,\"status\":0,\"type\":1,\"createTime\":1581240063000,\"deptId\":null,\"roleIdList\":[],\"deptName\":null,\"postIdList\":[],\"postName\":null}', '462', '0:0:0:0:0:0:0:1', '2020-02-09 17:21:29');
INSERT INTO `sys_log` VALUES ('778', 'debug', '修改用户', 'com.boot.mini.blog.server.controller.admin.SysUserController.update()', '{\"userId\":27,\"username\":\"zhangsan\",\"name\":\"张三\",\"password\":null,\"salt\":\"loSnAjvt9Rm52i3RwM56\",\"email\":\"zhangsan@126.com\",\"mobile\":null,\"status\":1,\"type\":1,\"createTime\":1581240063000,\"deptId\":null,\"roleIdList\":[],\"deptName\":null,\"postIdList\":[],\"postName\":null}', '429', '0:0:0:0:0:0:0:1', '2020-02-09 17:21:34');
INSERT INTO `sys_log` VALUES ('779', 'debug', '删除菜单', 'com.boot.mini.blog.server.controller.admin.SysMenuController.delete()', '86', '270', '0:0:0:0:0:0:0:1', '2020-02-12 10:35:56');
INSERT INTO `sys_log` VALUES ('780', 'debug', '删除菜单', 'com.boot.mini.blog.server.controller.admin.SysMenuController.delete()', '87', '255', '0:0:0:0:0:0:0:1', '2020-02-12 10:36:03');
INSERT INTO `sys_log` VALUES ('781', 'debug', '删除微博', 'com.boot.mini.blog.server.controller.admin.BlogController.delete()', '[12]', '92', '0:0:0:0:0:0:0:1', '2020-02-12 12:00:08');
INSERT INTO `sys_log` VALUES ('782', 'debug', '删除微博', 'com.boot.mini.blog.server.controller.admin.BlogController.delete()', '[16,15,12]', '90', '0:0:0:0:0:0:0:1', '2020-02-12 12:01:28');
INSERT INTO `sys_log` VALUES ('783', 'debug', '屏蔽/恢复微博', 'com.boot.mini.blog.server.controller.admin.BlogController.active()', '[16]', '134', '0:0:0:0:0:0:0:1', '2020-02-12 12:07:16');
INSERT INTO `sys_log` VALUES ('784', 'debug', '屏蔽/恢复微博', 'com.boot.mini.blog.server.controller.admin.BlogController.active()', '[16]', '47953', '0:0:0:0:0:0:0:1', '2020-02-12 12:08:38');
INSERT INTO `sys_log` VALUES ('785', 'debug', '屏蔽/恢复微博', 'com.boot.mini.blog.server.controller.admin.BlogController.active()', '[16]', '84', '0:0:0:0:0:0:0:1', '2020-02-12 12:08:38');
INSERT INTO `sys_log` VALUES ('786', 'debug', '屏蔽/恢复微博', 'com.boot.mini.blog.server.controller.admin.BlogController.active()', '[16]', '2333', '0:0:0:0:0:0:0:1', '2020-02-12 12:10:46');
INSERT INTO `sys_log` VALUES ('787', 'debug', '屏蔽/恢复微博', 'com.boot.mini.blog.server.controller.admin.BlogController.active()', '[16]', '86', '0:0:0:0:0:0:0:1', '2020-02-12 12:10:52');
INSERT INTO `sys_log` VALUES ('788', 'debug', '屏蔽/恢复微博', 'com.boot.mini.blog.server.controller.admin.BlogController.active()', '[16]', '79', '0:0:0:0:0:0:0:1', '2020-02-25 22:55:21');
INSERT INTO `sys_log` VALUES ('789', 'debug', '屏蔽/恢复微博', 'com.boot.mini.blog.server.controller.admin.BlogController.active()', '[15,12]', '8551', '0:0:0:0:0:0:0:1', '2020-02-25 22:56:20');
INSERT INTO `sys_log` VALUES ('790', 'debug', '屏蔽/恢复微博', 'com.boot.mini.blog.server.controller.admin.BlogController.active()', '[16]', '2068', '0:0:0:0:0:0:0:1', '2020-02-25 22:56:41');
INSERT INTO `sys_log` VALUES ('791', 'debug', '删除微博', 'com.boot.mini.blog.server.controller.admin.BlogController.delete()', '[1,2,12,15,16,8]', '84', '0:0:0:0:0:0:0:1', '2020-02-28 10:18:17');
INSERT INTO `sys_log` VALUES ('792', 'debug', '删除微博', 'com.boot.mini.blog.server.controller.admin.BlogController.delete()', '[21,19,18,17,11,7,6,4]', '83', '0:0:0:0:0:0:0:1', '2020-03-02 09:40:56');
INSERT INTO `sys_log` VALUES ('793', 'debug', '删除微博', 'com.boot.mini.blog.server.controller.admin.BlogController.delete()', '[29]', '83', '0:0:0:0:0:0:0:1', '2020-03-04 10:19:51');
INSERT INTO `sys_log` VALUES ('794', 'debug', '屏蔽/恢复微博', 'com.boot.mini.blog.server.controller.admin.BlogController.active()', '[33]', '82', '0:0:0:0:0:0:0:1', '2020-03-04 20:43:02');
INSERT INTO `sys_log` VALUES ('795', 'debug', '屏蔽/恢复微博', 'com.boot.mini.blog.server.controller.admin.BlogController.active()', '[33]', '83', '0:0:0:0:0:0:0:1', '2020-03-04 20:43:44');
INSERT INTO `sys_log` VALUES ('796', 'debug', '重置用户密码', 'com.debug.mini.blog.server.controller.admin.SysUserController.restPsd()', '[38]', '74', '127.0.0.1', '2020-12-28 14:54:21');
INSERT INTO `sys_log` VALUES ('797', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[48]', '41', '127.0.0.1', '2020-12-29 12:23:14');
INSERT INTO `sys_log` VALUES ('798', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[48]', '35', '127.0.0.1', '2020-12-29 12:23:28');
INSERT INTO `sys_log` VALUES ('799', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[47]', '269', '127.0.0.1', '2020-12-30 11:53:56');
INSERT INTO `sys_log` VALUES ('800', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[47]', '2291', '127.0.0.1', '2020-12-30 11:53:56');
INSERT INTO `sys_log` VALUES ('801', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[47]', '9850', '127.0.0.1', '2020-12-30 11:57:41');
INSERT INTO `sys_log` VALUES ('802', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[47,46]', '5783', '127.0.0.1', '2020-12-30 11:59:07');
INSERT INTO `sys_log` VALUES ('803', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[46,47]', '315', '127.0.0.1', '2020-12-30 11:59:51');
INSERT INTO `sys_log` VALUES ('804', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '64', '127.0.0.1', '2020-12-31 18:40:26');
INSERT INTO `sys_log` VALUES ('805', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '44', '127.0.0.1', '2020-12-31 18:40:58');
INSERT INTO `sys_log` VALUES ('806', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '57', '127.0.0.1', '2020-12-31 18:43:13');
INSERT INTO `sys_log` VALUES ('807', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '31', '127.0.0.1', '2020-12-31 18:43:41');
INSERT INTO `sys_log` VALUES ('808', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '3607', '127.0.0.1', '2020-12-31 18:44:29');
INSERT INTO `sys_log` VALUES ('809', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '15957', '127.0.0.1', '2020-12-31 18:49:45');
INSERT INTO `sys_log` VALUES ('810', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '2640', '127.0.0.1', '2020-12-31 18:50:41');
INSERT INTO `sys_log` VALUES ('811', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '57', '127.0.0.1', '2020-12-31 18:51:05');
INSERT INTO `sys_log` VALUES ('812', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '58', '127.0.0.1', '2020-12-31 18:57:28');
INSERT INTO `sys_log` VALUES ('813', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '54', '127.0.0.1', '2020-12-31 18:58:03');
INSERT INTO `sys_log` VALUES ('814', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '36', '127.0.0.1', '2020-12-31 18:58:45');
INSERT INTO `sys_log` VALUES ('815', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[53]', '47', '127.0.0.1', '2020-12-31 18:58:52');
INSERT INTO `sys_log` VALUES ('816', 'debug', '删除用户', 'com.debug.mini.blog.server.controller.admin.SysUserController.delete()', '[29]', '67', '127.0.0.1', '2021-01-05 11:37:29');
INSERT INTO `sys_log` VALUES ('817', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[79]', '58', '127.0.0.1', '2021-01-06 20:27:26');
INSERT INTO `sys_log` VALUES ('818', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[79]', '52', '127.0.0.1', '2021-01-06 20:31:21');
INSERT INTO `sys_log` VALUES ('819', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[78]', '77', '127.0.0.1', '2021-01-06 20:33:06');
INSERT INTO `sys_log` VALUES ('820', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[77]', '53', '127.0.0.1', '2021-01-06 20:50:50');
INSERT INTO `sys_log` VALUES ('821', 'debug', '新增角色', 'com.debug.mini.blog.server.controller.admin.SysRoleController.save()', '{\"roleId\":18,\"roleName\":\"游客\",\"remark\":\"游客\",\"menuIdList\":[1,2,15,16,17,18,60],\"deptIdList\":null,\"createTime\":\"2021-01-08 16:45:50\"}', '110', '127.0.0.1', '2021-01-08 16:45:50');
INSERT INTO `sys_log` VALUES ('822', 'debug', '修改角色', 'com.debug.mini.blog.server.controller.admin.SysRoleController.update()', '{\"roleId\":18,\"roleName\":\"游客\",\"remark\":\"游客\",\"menuIdList\":[1,2,15,16,17,18,60],\"deptIdList\":[],\"createTime\":\"2021-01-08 16:45:50\"}', '117', '127.0.0.1', '2021-01-08 16:45:56');
INSERT INTO `sys_log` VALUES ('823', 'debug', '修改角色', 'com.debug.mini.blog.server.controller.admin.SysRoleController.update()', '{\"roleId\":18,\"roleName\":\"游客\",\"remark\":\"游客\",\"menuIdList\":[1,2,15,16,17,18,60,41,68,85],\"deptIdList\":[],\"createTime\":\"2021-01-08 16:45:50\"}', '146', '127.0.0.1', '2021-01-08 16:46:02');
INSERT INTO `sys_log` VALUES ('824', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[81]', '51', '127.0.0.1', '2021-01-11 15:17:49');
INSERT INTO `sys_log` VALUES ('825', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[81]', '49', '127.0.0.1', '2021-01-11 15:18:00');
INSERT INTO `sys_log` VALUES ('826', 'debug', '新增用户', 'com.debug.mini.blog.server.controller.admin.SysUserController.save()', '{\"userId\":44,\"username\":\"wangliu\",\"name\":\"王六\",\"password\":\"3e3d45d57cc3984d685a93be09a20cdecec530ccf0defe86ef304681b2561685\",\"salt\":\"4mf5mnx8o66vlm0lqzje\",\"email\":\"wangliu@126.com\",\"mobile\":null,\"status\":1,\"type\":1,\"createTime\":1611106445005,\"deptId\":null,\"imgUrl\":null,\"roleIdList\":[17],\"deptName\":null,\"postIdList\":null,\"postName\":null}', '285', '127.0.0.1', '2021-01-20 09:34:05');
INSERT INTO `sys_log` VALUES ('827', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[85]', '26068', '127.0.0.1', '2021-01-20 10:49:57');
INSERT INTO `sys_log` VALUES ('828', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[85]', '47', '127.0.0.1', '2021-01-20 10:54:47');
INSERT INTO `sys_log` VALUES ('829', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[84]', '10897', '127.0.0.1', '2021-01-20 10:56:07');
INSERT INTO `sys_log` VALUES ('830', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[85]', '8309', '127.0.0.1', '2021-01-20 11:26:53');
INSERT INTO `sys_log` VALUES ('831', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[85]', '5643', '127.0.0.1', '2021-01-20 11:28:32');
INSERT INTO `sys_log` VALUES ('832', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[84]', '33605', '127.0.0.1', '2021-01-20 11:29:19');
INSERT INTO `sys_log` VALUES ('833', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[85]', '5101', '127.0.0.1', '2021-01-20 11:34:05');
INSERT INTO `sys_log` VALUES ('834', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[85]', '14063', '127.0.0.1', '2021-01-20 11:36:57');
INSERT INTO `sys_log` VALUES ('835', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[85]', '14808', '127.0.0.1', '2021-01-20 11:50:39');
INSERT INTO `sys_log` VALUES ('836', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[84]', '3422', '127.0.0.1', '2021-01-20 14:46:41');
INSERT INTO `sys_log` VALUES ('837', 'debug', '删除微博', 'com.debug.mini.blog.server.controller.admin.BlogController.delete()', '[36]', '218', '127.0.0.1', '2021-01-20 14:47:18');
INSERT INTO `sys_log` VALUES ('838', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '51', '127.0.0.1', '2021-01-20 14:47:58');
INSERT INTO `sys_log` VALUES ('839', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '141', '127.0.0.1', '2021-01-20 14:49:58');
INSERT INTO `sys_log` VALUES ('840', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '17830', '127.0.0.1', '2021-01-20 14:50:41');
INSERT INTO `sys_log` VALUES ('841', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '45269', '127.0.0.1', '2021-01-20 14:51:54');
INSERT INTO `sys_log` VALUES ('842', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '164', '127.0.0.1', '2021-01-20 14:52:40');
INSERT INTO `sys_log` VALUES ('843', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '308', '127.0.0.1', '2021-01-20 14:53:01');
INSERT INTO `sys_log` VALUES ('844', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '74683', '127.0.0.1', '2021-01-20 14:55:23');
INSERT INTO `sys_log` VALUES ('845', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[83]', '11652', '127.0.0.1', '2021-01-20 14:56:29');
INSERT INTO `sys_log` VALUES ('846', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[83]', '109079', '127.0.0.1', '2021-01-20 14:58:40');
INSERT INTO `sys_log` VALUES ('847', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[83]', '83454', '127.0.0.1', '2021-01-20 15:03:45');
INSERT INTO `sys_log` VALUES ('848', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[83]', '26592', '127.0.0.1', '2021-01-20 15:13:43');
INSERT INTO `sys_log` VALUES ('849', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[83]', '16618', '127.0.0.1', '2021-01-20 15:15:11');
INSERT INTO `sys_log` VALUES ('850', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[83]', '10558', '127.0.0.1', '2021-01-20 15:17:02');
INSERT INTO `sys_log` VALUES ('851', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '3488', '127.0.0.1', '2021-01-20 15:18:00');
INSERT INTO `sys_log` VALUES ('852', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '126', '127.0.0.1', '2021-01-20 15:20:13');
INSERT INTO `sys_log` VALUES ('853', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '225', '127.0.0.1', '2021-01-20 15:20:21');
INSERT INTO `sys_log` VALUES ('854', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88,83]', '230', '127.0.0.1', '2021-01-20 15:20:40');
INSERT INTO `sys_log` VALUES ('855', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88,83]', '321', '127.0.0.1', '2021-01-20 15:20:49');
INSERT INTO `sys_log` VALUES ('856', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '48', '127.0.0.1', '2021-01-20 15:33:54');
INSERT INTO `sys_log` VALUES ('857', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88]', '47', '127.0.0.1', '2021-01-20 15:34:14');
INSERT INTO `sys_log` VALUES ('858', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88,83]', '55', '127.0.0.1', '2021-01-20 15:34:21');
INSERT INTO `sys_log` VALUES ('859', 'debug', '屏蔽/恢复微博', 'com.debug.mini.blog.server.controller.admin.BlogController.active()', '[88,83]', '45', '127.0.0.1', '2021-01-20 15:34:29');

-- ----------------------------
-- Table structure for sys_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu`;
CREATE TABLE `sys_menu` (
  `menu_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `parent_id` bigint(20) DEFAULT NULL COMMENT '父菜单ID，一级菜单为0',
  `name` varchar(50) DEFAULT NULL COMMENT '菜单名称',
  `url` varchar(200) DEFAULT NULL COMMENT '菜单URL',
  `perms` varchar(500) DEFAULT NULL COMMENT '授权(多个用逗号分隔，如：user:list,user:create)',
  `type` int(11) DEFAULT NULL COMMENT '类型   0：目录   1：菜单   2：按钮',
  `icon` varchar(50) DEFAULT NULL COMMENT '菜单图标',
  `order_num` int(11) DEFAULT NULL COMMENT '排序',
  PRIMARY KEY (`menu_id`)
) ENGINE=InnoDB AUTO_INCREMENT=86 DEFAULT CHARSET=utf8 COMMENT='菜单管理';

-- ----------------------------
-- Records of sys_menu
-- ----------------------------
INSERT INTO `sys_menu` VALUES ('1', '0', '系统管理', null, null, '0', 'fa fa-cog', '0');
INSERT INTO `sys_menu` VALUES ('2', '1', '用户管理', 'modules/sys/user.html', null, '1', 'fa fa-user', '1');
INSERT INTO `sys_menu` VALUES ('3', '1', '角色管理', 'modules/sys/role.html', null, '1', 'fa fa-user-secret', '5');
INSERT INTO `sys_menu` VALUES ('4', '1', '菜单管理', 'modules/sys/menu.html', null, '1', 'fa fa-th-list', '4');
INSERT INTO `sys_menu` VALUES ('15', '2', '查询', null, 'sys:user:list,sys:user:info', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('16', '2', '新增', null, 'sys:user:save,sys:role:select', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('17', '2', '修改', null, 'sys:user:update,sys:role:select', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('18', '2', '删除', null, 'sys:user:delete', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('19', '3', '查询', null, 'sys:role:list,sys:role:info', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('20', '3', '新增', null, 'sys:role:save,sys:menu:perms', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('21', '3', '修改', null, 'sys:role:update,sys:menu:perms', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('22', '3', '删除', null, 'sys:role:delete', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('23', '4', '查询', null, 'sys:menu:list,sys:menu:info', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('24', '4', '新增', null, 'sys:menu:save,sys:menu:select', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('25', '4', '修改', null, 'sys:menu:update,sys:menu:select', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('26', '4', '删除', null, 'sys:menu:delete', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('29', '1', '系统日志', 'modules/sys/log.html', 'sys:log:list', '1', 'fa fa-file-text-o', '7');
INSERT INTO `sys_menu` VALUES ('41', '0', '微博管理', null, null, '0', 'fa fa-coffee', '3');
INSERT INTO `sys_menu` VALUES ('48', '29', '清除日志', null, 'sys:log:truncate', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('60', '2', '重置密码', null, 'sys:user:resetPsd', '2', null, '0');
INSERT INTO `sys_menu` VALUES ('68', '41', '微博列表', 'modules/blog/blogInfo.html', 'sys:blog:info', '1', 'fa fa-binoculars', '2');
INSERT INTO `sys_menu` VALUES ('85', '68', '删除', null, 'blog:info:delete', '2', null, '0');

-- ----------------------------
-- Table structure for sys_post
-- ----------------------------
DROP TABLE IF EXISTS `sys_post`;
CREATE TABLE `sys_post` (
  `post_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '岗位ID',
  `post_code` varchar(64) NOT NULL COMMENT '岗位编码',
  `post_name` varchar(50) NOT NULL COMMENT '岗位名称',
  `order_num` int(4) NOT NULL DEFAULT '0' COMMENT '排序号',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态（1正常 0停用）',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`post_id`),
  UNIQUE KEY `idx_post_code` (`post_code`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COMMENT='岗位信息表';

-- ----------------------------
-- Records of sys_post
-- ----------------------------
INSERT INTO `sys_post` VALUES ('1', 'Rank1001', '董事长', '0', '1', '2019-07-22 23:16:28', null, '董事长');
INSERT INTO `sys_post` VALUES ('2', 'Rank1002', '总经理', '1', '1', '2019-07-22 23:17:30', null, '总经理');
INSERT INTO `sys_post` VALUES ('3', 'Rank1003', '互联网技术总监', '2', '1', '2019-07-23 09:25:38', null, '互联网技术总监');
INSERT INTO `sys_post` VALUES ('4', 'Rank1004', '财务总监', '3', '1', '2019-07-23 09:25:55', null, '财务总监');
INSERT INTO `sys_post` VALUES ('5', 'Rank1005', '技术主管', '4', '1', '2019-07-23 09:26:17', null, '技术主管');
INSERT INTO `sys_post` VALUES ('6', 'Rank1006', '产品经理', '5', '1', '2019-07-23 09:27:02', null, '产品经理');
INSERT INTO `sys_post` VALUES ('7', 'Rank1007', '开发部经理', '6', '1', '2019-07-23 09:27:14', null, '开发部经理');
INSERT INTO `sys_post` VALUES ('8', 'Rank1008', '运维主管', '7', '1', '2019-07-23 09:27:23', null, '运维主管');
INSERT INTO `sys_post` VALUES ('9', 'Rank1009', '高级开发工程师', '8', '1', '2019-07-23 09:27:35', null, '高级开发工程师');
INSERT INTO `sys_post` VALUES ('10', 'R1010', 'HRBP', '9', '1', '2019-07-23 09:27:52', '2019-07-23 10:01:10', 'HRBP');

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role` (
  `role_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `role_name` varchar(100) DEFAULT NULL COMMENT '角色名称',
  `remark` varchar(100) DEFAULT NULL COMMENT '备注',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8 COMMENT='角色';

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES ('1', '市场调研部-普通管理员', '市场调研部-普通管理员', '2019-02-22 14:29:45');
INSERT INTO `sys_role` VALUES ('3', '互联网技术部-普通管理员', '互联网技术部-普通管理员', '2019-07-19 17:25:23');
INSERT INTO `sys_role` VALUES ('4', '销售部-普通管理员', '销售部-普通管理员', '2019-07-19 17:48:33');
INSERT INTO `sys_role` VALUES ('7', '开发部-管理员', '开发部-管理员', '2019-07-19 18:04:45');
INSERT INTO `sys_role` VALUES ('10', '财务部~超级管理员', '财务部~超级管理员', '2019-07-21 22:21:58');
INSERT INTO `sys_role` VALUES ('11', '测试部~超级管理员', '测试部~超级管理员', '2019-07-21 23:02:19');
INSERT INTO `sys_role` VALUES ('12', '数据视野管理员', '数据视野管理员', '2019-08-01 16:30:50');
INSERT INTO `sys_role` VALUES ('13', '博客管理~角色', '博客管理~角色', '2019-08-03 23:33:18');
INSERT INTO `sys_role` VALUES ('16', '操作权限角色', '操作权限角色', '2019-08-04 21:02:58');
INSERT INTO `sys_role` VALUES ('17', '系统管理员', '系统超级管理员', '2019-08-23 14:17:48');
INSERT INTO `sys_role` VALUES ('18', '游客', '游客', '2021-01-08 16:45:50');

-- ----------------------------
-- Table structure for sys_role_dept
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_dept`;
CREATE TABLE `sys_role_dept` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `role_id` bigint(20) DEFAULT NULL COMMENT '角色ID',
  `dept_id` bigint(20) DEFAULT NULL COMMENT '部门ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=303 DEFAULT CHARSET=utf8 COMMENT='角色与部门对应关系';

-- ----------------------------
-- Records of sys_role_dept
-- ----------------------------
INSERT INTO `sys_role_dept` VALUES ('9', '3', '2');
INSERT INTO `sys_role_dept` VALUES ('10', '3', '6');
INSERT INTO `sys_role_dept` VALUES ('11', '3', '7');
INSERT INTO `sys_role_dept` VALUES ('12', '3', '8');
INSERT INTO `sys_role_dept` VALUES ('13', '3', '9');
INSERT INTO `sys_role_dept` VALUES ('17', '1', '3');
INSERT INTO `sys_role_dept` VALUES ('18', '1', '4');
INSERT INTO `sys_role_dept` VALUES ('19', '1', '5');
INSERT INTO `sys_role_dept` VALUES ('27', '4', '1');
INSERT INTO `sys_role_dept` VALUES ('28', '4', '3');
INSERT INTO `sys_role_dept` VALUES ('29', '4', '4');
INSERT INTO `sys_role_dept` VALUES ('30', '4', '5');
INSERT INTO `sys_role_dept` VALUES ('44', '7', '1');
INSERT INTO `sys_role_dept` VALUES ('45', '7', '2');
INSERT INTO `sys_role_dept` VALUES ('46', '7', '6');
INSERT INTO `sys_role_dept` VALUES ('84', '10', '1');
INSERT INTO `sys_role_dept` VALUES ('85', '10', '10');
INSERT INTO `sys_role_dept` VALUES ('86', '10', '11');
INSERT INTO `sys_role_dept` VALUES ('87', '10', '12');
INSERT INTO `sys_role_dept` VALUES ('88', '10', '13');
INSERT INTO `sys_role_dept` VALUES ('106', '11', '1');
INSERT INTO `sys_role_dept` VALUES ('107', '11', '2');
INSERT INTO `sys_role_dept` VALUES ('108', '11', '8');
INSERT INTO `sys_role_dept` VALUES ('130', '12', '1');
INSERT INTO `sys_role_dept` VALUES ('131', '12', '3');
INSERT INTO `sys_role_dept` VALUES ('132', '12', '4');
INSERT INTO `sys_role_dept` VALUES ('133', '12', '5');
INSERT INTO `sys_role_dept` VALUES ('134', '13', '1');
INSERT INTO `sys_role_dept` VALUES ('135', '13', '2');
INSERT INTO `sys_role_dept` VALUES ('136', '13', '6');
INSERT INTO `sys_role_dept` VALUES ('137', '13', '7');
INSERT INTO `sys_role_dept` VALUES ('138', '13', '8');
INSERT INTO `sys_role_dept` VALUES ('139', '13', '9');
INSERT INTO `sys_role_dept` VALUES ('140', '13', '3');
INSERT INTO `sys_role_dept` VALUES ('141', '13', '4');
INSERT INTO `sys_role_dept` VALUES ('142', '13', '5');
INSERT INTO `sys_role_dept` VALUES ('143', '13', '10');
INSERT INTO `sys_role_dept` VALUES ('144', '13', '11');
INSERT INTO `sys_role_dept` VALUES ('145', '13', '12');
INSERT INTO `sys_role_dept` VALUES ('146', '13', '13');
INSERT INTO `sys_role_dept` VALUES ('147', '13', '21');
INSERT INTO `sys_role_dept` VALUES ('278', '16', '1');
INSERT INTO `sys_role_dept` VALUES ('279', '16', '2');
INSERT INTO `sys_role_dept` VALUES ('280', '16', '6');
INSERT INTO `sys_role_dept` VALUES ('281', '16', '24');
INSERT INTO `sys_role_dept` VALUES ('282', '16', '28');
INSERT INTO `sys_role_dept` VALUES ('283', '17', '1');
INSERT INTO `sys_role_dept` VALUES ('284', '17', '2');
INSERT INTO `sys_role_dept` VALUES ('285', '17', '6');
INSERT INTO `sys_role_dept` VALUES ('286', '17', '23');
INSERT INTO `sys_role_dept` VALUES ('287', '17', '25');
INSERT INTO `sys_role_dept` VALUES ('288', '17', '26');
INSERT INTO `sys_role_dept` VALUES ('289', '17', '24');
INSERT INTO `sys_role_dept` VALUES ('290', '17', '27');
INSERT INTO `sys_role_dept` VALUES ('291', '17', '28');
INSERT INTO `sys_role_dept` VALUES ('292', '17', '7');
INSERT INTO `sys_role_dept` VALUES ('293', '17', '8');
INSERT INTO `sys_role_dept` VALUES ('294', '17', '9');
INSERT INTO `sys_role_dept` VALUES ('295', '17', '3');
INSERT INTO `sys_role_dept` VALUES ('296', '17', '4');
INSERT INTO `sys_role_dept` VALUES ('297', '17', '5');
INSERT INTO `sys_role_dept` VALUES ('298', '17', '10');
INSERT INTO `sys_role_dept` VALUES ('299', '17', '11');
INSERT INTO `sys_role_dept` VALUES ('300', '17', '12');
INSERT INTO `sys_role_dept` VALUES ('301', '17', '13');
INSERT INTO `sys_role_dept` VALUES ('302', '17', '21');

-- ----------------------------
-- Table structure for sys_role_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_menu`;
CREATE TABLE `sys_role_menu` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `role_id` bigint(20) DEFAULT NULL COMMENT '角色ID',
  `menu_id` bigint(20) DEFAULT NULL COMMENT '菜单ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=739 DEFAULT CHARSET=utf8 COMMENT='角色与菜单对应关系';

-- ----------------------------
-- Records of sys_role_menu
-- ----------------------------
INSERT INTO `sys_role_menu` VALUES ('55', '3', '1');
INSERT INTO `sys_role_menu` VALUES ('56', '3', '2');
INSERT INTO `sys_role_menu` VALUES ('57', '3', '15');
INSERT INTO `sys_role_menu` VALUES ('58', '3', '16');
INSERT INTO `sys_role_menu` VALUES ('59', '3', '17');
INSERT INTO `sys_role_menu` VALUES ('60', '3', '18');
INSERT INTO `sys_role_menu` VALUES ('61', '3', '3');
INSERT INTO `sys_role_menu` VALUES ('62', '3', '19');
INSERT INTO `sys_role_menu` VALUES ('63', '3', '20');
INSERT INTO `sys_role_menu` VALUES ('64', '3', '21');
INSERT INTO `sys_role_menu` VALUES ('65', '3', '22');
INSERT INTO `sys_role_menu` VALUES ('70', '1', '1');
INSERT INTO `sys_role_menu` VALUES ('71', '1', '27');
INSERT INTO `sys_role_menu` VALUES ('72', '1', '29');
INSERT INTO `sys_role_menu` VALUES ('73', '1', '30');
INSERT INTO `sys_role_menu` VALUES ('96', '4', '1');
INSERT INTO `sys_role_menu` VALUES ('97', '4', '2');
INSERT INTO `sys_role_menu` VALUES ('98', '4', '15');
INSERT INTO `sys_role_menu` VALUES ('99', '4', '16');
INSERT INTO `sys_role_menu` VALUES ('100', '4', '17');
INSERT INTO `sys_role_menu` VALUES ('101', '4', '18');
INSERT INTO `sys_role_menu` VALUES ('102', '4', '3');
INSERT INTO `sys_role_menu` VALUES ('103', '4', '19');
INSERT INTO `sys_role_menu` VALUES ('104', '4', '20');
INSERT INTO `sys_role_menu` VALUES ('105', '4', '21');
INSERT INTO `sys_role_menu` VALUES ('106', '4', '22');
INSERT INTO `sys_role_menu` VALUES ('107', '4', '4');
INSERT INTO `sys_role_menu` VALUES ('108', '4', '23');
INSERT INTO `sys_role_menu` VALUES ('109', '4', '24');
INSERT INTO `sys_role_menu` VALUES ('110', '4', '25');
INSERT INTO `sys_role_menu` VALUES ('111', '4', '26');
INSERT INTO `sys_role_menu` VALUES ('151', '7', '1');
INSERT INTO `sys_role_menu` VALUES ('152', '7', '2');
INSERT INTO `sys_role_menu` VALUES ('153', '7', '15');
INSERT INTO `sys_role_menu` VALUES ('154', '7', '16');
INSERT INTO `sys_role_menu` VALUES ('155', '7', '17');
INSERT INTO `sys_role_menu` VALUES ('156', '7', '18');
INSERT INTO `sys_role_menu` VALUES ('241', '10', '1');
INSERT INTO `sys_role_menu` VALUES ('242', '10', '2');
INSERT INTO `sys_role_menu` VALUES ('243', '10', '15');
INSERT INTO `sys_role_menu` VALUES ('244', '10', '16');
INSERT INTO `sys_role_menu` VALUES ('245', '10', '17');
INSERT INTO `sys_role_menu` VALUES ('246', '10', '18');
INSERT INTO `sys_role_menu` VALUES ('247', '10', '3');
INSERT INTO `sys_role_menu` VALUES ('248', '10', '19');
INSERT INTO `sys_role_menu` VALUES ('249', '10', '20');
INSERT INTO `sys_role_menu` VALUES ('250', '10', '21');
INSERT INTO `sys_role_menu` VALUES ('251', '10', '22');
INSERT INTO `sys_role_menu` VALUES ('252', '10', '4');
INSERT INTO `sys_role_menu` VALUES ('253', '10', '23');
INSERT INTO `sys_role_menu` VALUES ('254', '10', '24');
INSERT INTO `sys_role_menu` VALUES ('255', '10', '25');
INSERT INTO `sys_role_menu` VALUES ('256', '10', '26');
INSERT INTO `sys_role_menu` VALUES ('257', '10', '31');
INSERT INTO `sys_role_menu` VALUES ('302', '11', '41');
INSERT INTO `sys_role_menu` VALUES ('303', '11', '42');
INSERT INTO `sys_role_menu` VALUES ('305', '11', '45');
INSERT INTO `sys_role_menu` VALUES ('306', '11', '46');
INSERT INTO `sys_role_menu` VALUES ('307', '11', '47');
INSERT INTO `sys_role_menu` VALUES ('338', '12', '1');
INSERT INTO `sys_role_menu` VALUES ('339', '12', '31');
INSERT INTO `sys_role_menu` VALUES ('344', '12', '41');
INSERT INTO `sys_role_menu` VALUES ('345', '12', '42');
INSERT INTO `sys_role_menu` VALUES ('347', '12', '45');
INSERT INTO `sys_role_menu` VALUES ('348', '12', '46');
INSERT INTO `sys_role_menu` VALUES ('349', '12', '47');
INSERT INTO `sys_role_menu` VALUES ('616', '16', '1');
INSERT INTO `sys_role_menu` VALUES ('617', '16', '2');
INSERT INTO `sys_role_menu` VALUES ('618', '16', '15');
INSERT INTO `sys_role_menu` VALUES ('619', '16', '16');
INSERT INTO `sys_role_menu` VALUES ('620', '16', '17');
INSERT INTO `sys_role_menu` VALUES ('621', '16', '18');
INSERT INTO `sys_role_menu` VALUES ('622', '16', '60');
INSERT INTO `sys_role_menu` VALUES ('623', '16', '3');
INSERT INTO `sys_role_menu` VALUES ('624', '16', '19');
INSERT INTO `sys_role_menu` VALUES ('625', '16', '20');
INSERT INTO `sys_role_menu` VALUES ('626', '16', '21');
INSERT INTO `sys_role_menu` VALUES ('627', '16', '22');
INSERT INTO `sys_role_menu` VALUES ('628', '16', '4');
INSERT INTO `sys_role_menu` VALUES ('629', '16', '23');
INSERT INTO `sys_role_menu` VALUES ('630', '16', '24');
INSERT INTO `sys_role_menu` VALUES ('631', '16', '25');
INSERT INTO `sys_role_menu` VALUES ('632', '16', '26');
INSERT INTO `sys_role_menu` VALUES ('633', '16', '29');
INSERT INTO `sys_role_menu` VALUES ('634', '16', '48');
INSERT INTO `sys_role_menu` VALUES ('635', '16', '31');
INSERT INTO `sys_role_menu` VALUES ('640', '16', '36');
INSERT INTO `sys_role_menu` VALUES ('641', '16', '37');
INSERT INTO `sys_role_menu` VALUES ('642', '16', '38');
INSERT INTO `sys_role_menu` VALUES ('643', '16', '39');
INSERT INTO `sys_role_menu` VALUES ('644', '16', '40');
INSERT INTO `sys_role_menu` VALUES ('645', '16', '49');
INSERT INTO `sys_role_menu` VALUES ('646', '16', '50');
INSERT INTO `sys_role_menu` VALUES ('647', '16', '51');
INSERT INTO `sys_role_menu` VALUES ('648', '16', '52');
INSERT INTO `sys_role_menu` VALUES ('649', '16', '53');
INSERT INTO `sys_role_menu` VALUES ('650', '17', '1');
INSERT INTO `sys_role_menu` VALUES ('651', '17', '2');
INSERT INTO `sys_role_menu` VALUES ('652', '17', '15');
INSERT INTO `sys_role_menu` VALUES ('653', '17', '16');
INSERT INTO `sys_role_menu` VALUES ('654', '17', '17');
INSERT INTO `sys_role_menu` VALUES ('655', '17', '18');
INSERT INTO `sys_role_menu` VALUES ('656', '17', '60');
INSERT INTO `sys_role_menu` VALUES ('657', '17', '3');
INSERT INTO `sys_role_menu` VALUES ('658', '17', '19');
INSERT INTO `sys_role_menu` VALUES ('659', '17', '20');
INSERT INTO `sys_role_menu` VALUES ('660', '17', '21');
INSERT INTO `sys_role_menu` VALUES ('661', '17', '22');
INSERT INTO `sys_role_menu` VALUES ('662', '17', '4');
INSERT INTO `sys_role_menu` VALUES ('663', '17', '23');
INSERT INTO `sys_role_menu` VALUES ('664', '17', '24');
INSERT INTO `sys_role_menu` VALUES ('665', '17', '25');
INSERT INTO `sys_role_menu` VALUES ('666', '17', '26');
INSERT INTO `sys_role_menu` VALUES ('667', '17', '29');
INSERT INTO `sys_role_menu` VALUES ('668', '17', '48');
INSERT INTO `sys_role_menu` VALUES ('669', '17', '31');
INSERT INTO `sys_role_menu` VALUES ('674', '17', '36');
INSERT INTO `sys_role_menu` VALUES ('675', '17', '37');
INSERT INTO `sys_role_menu` VALUES ('676', '17', '38');
INSERT INTO `sys_role_menu` VALUES ('677', '17', '39');
INSERT INTO `sys_role_menu` VALUES ('678', '17', '40');
INSERT INTO `sys_role_menu` VALUES ('679', '17', '49');
INSERT INTO `sys_role_menu` VALUES ('680', '17', '50');
INSERT INTO `sys_role_menu` VALUES ('681', '17', '51');
INSERT INTO `sys_role_menu` VALUES ('682', '17', '52');
INSERT INTO `sys_role_menu` VALUES ('683', '17', '53');
INSERT INTO `sys_role_menu` VALUES ('684', '17', '41');
INSERT INTO `sys_role_menu` VALUES ('685', '17', '42');
INSERT INTO `sys_role_menu` VALUES ('686', '17', '82');
INSERT INTO `sys_role_menu` VALUES ('687', '17', '83');
INSERT INTO `sys_role_menu` VALUES ('688', '17', '84');
INSERT INTO `sys_role_menu` VALUES ('689', '17', '68');
INSERT INTO `sys_role_menu` VALUES ('690', '17', '85');
INSERT INTO `sys_role_menu` VALUES ('693', '17', '88');
INSERT INTO `sys_role_menu` VALUES ('694', '17', '91');
INSERT INTO `sys_role_menu` VALUES ('695', '17', '92');
INSERT INTO `sys_role_menu` VALUES ('696', '17', '93');
INSERT INTO `sys_role_menu` VALUES ('697', '17', '54');
INSERT INTO `sys_role_menu` VALUES ('698', '17', '55');
INSERT INTO `sys_role_menu` VALUES ('699', '17', '66');
INSERT INTO `sys_role_menu` VALUES ('700', '17', '67');
INSERT INTO `sys_role_menu` VALUES ('701', '17', '69');
INSERT INTO `sys_role_menu` VALUES ('702', '17', '89');
INSERT INTO `sys_role_menu` VALUES ('703', '17', '90');
INSERT INTO `sys_role_menu` VALUES ('704', '17', '70');
INSERT INTO `sys_role_menu` VALUES ('705', '17', '71');
INSERT INTO `sys_role_menu` VALUES ('706', '17', '72');
INSERT INTO `sys_role_menu` VALUES ('707', '17', '73');
INSERT INTO `sys_role_menu` VALUES ('708', '17', '79');
INSERT INTO `sys_role_menu` VALUES ('709', '17', '80');
INSERT INTO `sys_role_menu` VALUES ('710', '17', '81');
INSERT INTO `sys_role_menu` VALUES ('711', '17', '74');
INSERT INTO `sys_role_menu` VALUES ('712', '17', '76');
INSERT INTO `sys_role_menu` VALUES ('713', '17', '77');
INSERT INTO `sys_role_menu` VALUES ('714', '17', '78');
INSERT INTO `sys_role_menu` VALUES ('729', '18', '1');
INSERT INTO `sys_role_menu` VALUES ('730', '18', '2');
INSERT INTO `sys_role_menu` VALUES ('731', '18', '15');
INSERT INTO `sys_role_menu` VALUES ('732', '18', '16');
INSERT INTO `sys_role_menu` VALUES ('733', '18', '17');
INSERT INTO `sys_role_menu` VALUES ('734', '18', '18');
INSERT INTO `sys_role_menu` VALUES ('735', '18', '60');
INSERT INTO `sys_role_menu` VALUES ('736', '18', '41');
INSERT INTO `sys_role_menu` VALUES ('737', '18', '68');
INSERT INTO `sys_role_menu` VALUES ('738', '18', '85');

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user` (
  `user_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 DEFAULT '' COMMENT '姓名',
  `username` varchar(50) NOT NULL COMMENT '用户名',
  `password` varchar(100) DEFAULT NULL COMMENT '密码',
  `salt` varchar(20) DEFAULT NULL COMMENT '盐',
  `email` varchar(100) DEFAULT NULL COMMENT '邮箱',
  `mobile` varchar(100) DEFAULT NULL COMMENT '手机号',
  `type` int(11) DEFAULT '0' COMMENT '身份类型(0=普通大众(前端注册);1=后端管理员(后端管理新增))',
  `status` tinyint(4) DEFAULT '1' COMMENT '状态  0：禁用   1：正常',
  `dept_id` bigint(20) DEFAULT NULL COMMENT '部门ID',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `img_url` varchar(500) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '头像url',
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=45 DEFAULT CHARSET=utf8 COMMENT='用户';

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES ('1', '系统管理员', 'admin', '04bc3bc031bb35cb3f64e961e43ddfc9ea26961f817865c67eb3701a70855b26', 'YzcmCZNvbXocrsz9dm8e', 'root@renren.io', null, '1', '1', null, '2016-11-11 11:11:11', null);
INSERT INTO `sys_user` VALUES ('2', '杰克', 'jack', '2a661ad095f8ab66247d4b8f7b92bde6d4cf69482b7b3b9cc4303882d92cfce7', 'UsyQ2c0TDvycqqD03HQP', '123456@qq.com', null, '1', '1', null, '2018-12-12 10:50:58', null);
INSERT INTO `sys_user` VALUES ('6', '修罗debug', 'debug', '85b51e719034cf3ec4e242cb8f171de65105eb10efa0412fb673be512ca23f48', 'q8WwxUma2bqO4voBMNK4', 'linsen@126.com', null, '1', '1', null, '2019-07-17 15:19:52', '20201225/user/1106796221860500.jpg');
INSERT INTO `sys_user` VALUES ('9', '李小龙', 'linsen', '5cd23204759430105f0ab2d01a994a14a505abfe9d756c4a18884789f7483c29', '84iyPk1aBzEDwlH4g8js', 'linsen@126.com', null, '1', '1', null, '2019-07-18 21:00:10', null);
INSERT INTO `sys_user` VALUES ('27', '张三子', 'zhangsan', '21be5dccca752980f8906ccdd785737c35cd6c12881c5b831baef68103e1182b', 'loSnAjvt9Rm52i3RwM56', 'zhangsan@qq.com', null, '0', '1', null, '2020-02-09 17:21:03', '20201222/user/869393233842400.jpg');
INSERT INTO `sys_user` VALUES ('28', '李四', 'lisi', '79e7881b3d9caaaa3f1a9c4ffd6343f9e9b0e240a2ba57f5b9fb4d48b7d8067a', '3sdylj8rsuid85zetlst', 'lisi@126.com', null, '0', '1', null, '2020-02-09 18:50:06', '/statics/img/defaultImg.jpg');
INSERT INTO `sys_user` VALUES ('30', '李六', 'liliu', 'b9897141e197656f4b9c30ee755e7b60174f8d5b025d3810e82012f45c530f14', 'b9kb6gbhky78513mw1a1', 'liliu@126.com', null, '0', '1', null, '2020-02-10 22:06:27', '/statics/img/defaultImg.jpg');
INSERT INTO `sys_user` VALUES ('31', '周老九', 'zhoulaojiu', '423391c2419c4dde3ccf3101085b66b9c1af8c758fb00725e7e3ec29fcfbf2cc', 'djugueuvakts2cghcj82', 'zhoulaojiu@126.com', null, '0', '1', null, '2020-02-11 11:03:37', null);
INSERT INTO `sys_user` VALUES ('32', '吴广', 'wuguang', '87803711d3b8327c1e8bd3272e1128c930b3e3371aa5ce9353d3092a78bf4513', 'ol18g1nrvpdzmp48oqw4', 'wuguang@126.com', null, '0', '1', null, '2020-02-11 11:25:37', '20200211\\user\\483839590782500.jpg');
INSERT INTO `sys_user` VALUES ('33', '游客', 'wusong', '1e0909b81b5f12dde964938416ccff55f4a7c42ec9b4bb2a038b1b9f93b60e55', '9c5e2v738fy0qf099mkr', 'wusong@126.com', null, '0', '1', null, '2020-02-24 23:02:38', '/statics/img/defaultImg.jpg');
INSERT INTO `sys_user` VALUES ('34', '游客', 'zhangyi', '5f882b31af5d15f7957efd805621d29ddcdac893a306f21629956be029aa4928', 'kandz8n7ws7vsdai8xkw', 'zhangyi@126.com', null, '0', '1', null, '2020-02-25 22:44:07', '/statics/img/defaultImg.jpg');
INSERT INTO `sys_user` VALUES ('35', '123', 'ceshi', 'e3c6556ccdf02db0fa056d68c17e0b9885935e5e125c17d74a806b8043a7bd2b', 'zm7zqmunpfaa1qtvo53q', '123@qq.com', null, '0', '1', null, '2020-02-25 23:32:29', '20200304/user/47950313648800.jpg');
INSERT INTO `sys_user` VALUES ('36', '游客', 'zhangfei', '2e411f3c4e7720f1a47fd6d7777eba920bb2650721a4ed7408d572dca3cdf836', 'x2ofwp5sy0n7de2v5317', 'zhangfei@126.com', null, '0', '1', null, '2020-02-25 23:42:37', '/statics/img/defaultImg.jpg');
INSERT INTO `sys_user` VALUES ('37', '李小龙', 'lixiaolong', '8232b7e9799ebefc5b6d620f11690661453fb2faa2969ca1fcc21329e6e24b70', 'ubhz2pysfxo5chhlnq4h', 'lixiaolong@126.com', null, '0', '1', null, '2020-02-25 23:52:56', '20200302/user/357889024660700.jpg');
INSERT INTO `sys_user` VALUES ('38', '布鲁斯', 'bruce', '8140ccb297d42417c2a80257d3d64dda9b3cc302cb002e93561e434492edf77a', 'ql5z2oz8pzyluc15sudy', 'bruce@126.com', null, '0', '1', null, '2020-03-02 15:15:59', '20200302/user/355204574745700.jpg');
INSERT INTO `sys_user` VALUES ('39', '小龙', 'chenglong', '7ae03fc23ef446665bea9cd613fb6f0da4d9e80dcac3aede18f7e977db1c3e76', 'szfd9z36aa9dtfx3vh6y', 'chenglong@163.com', null, '0', '1', null, '2020-03-04 20:33:11', '/statics/img/defaultImg.jpg');
INSERT INTO `sys_user` VALUES ('40', '大刀王五', 'wangwu', '664c495ed48339125a4c36fff156fff743b243320abb7a15ac865417ce744115', 'z3zcozd545ny5gvi1pij', 'wangwu@126.com', null, '0', '1', null, '2021-01-05 11:37:34', '20210105/user/2036232744248900.png');
INSERT INTO `sys_user` VALUES ('41', '十三爷', 'steadyjack', '0d935c99240ad9adb97f5731094f972bdfb3cac3dd958bf2c6f96b97aa3797d0', '2605dapgu6volxqphmzb', 'steadyjack@126.com', null, '0', '1', null, '2021-01-11 15:07:47', '20210111/user/1348527156908797952.png');
INSERT INTO `sys_user` VALUES ('42', '陈胜', 'chensheng', '508612e31f2e898e48bc901742f216ed9faa02eecdf97e5e2b7ea96cf6988208', 'dw0qru22psrk0h4guykf', 'chensheng@126.com', null, '0', '1', null, '2021-01-14 11:39:20', '/statics/img/defaultImg.jpg');
INSERT INTO `sys_user` VALUES ('43', '杰马克', 'jackma', '7fe8b33d82beb9208547874154abf666522b6aecf313706aba723deac20c9c28', '7ctdce4gj4qo70wgp6wh', 'jackma2@126.com', null, '0', '1', null, '2021-01-14 12:53:46', '20210114/user/1349584755557150720.jpg');
INSERT INTO `sys_user` VALUES ('44', '王六', 'wangliu', '3e3d45d57cc3984d685a93be09a20cdecec530ccf0defe86ef304681b2561685', '4mf5mnx8o66vlm0lqzje', 'wangliu@126.com', null, '1', '1', null, '2021-01-20 09:34:05', null);

-- ----------------------------
-- Table structure for sys_user_post
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_post`;
CREATE TABLE `sys_user_post` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) NOT NULL COMMENT '用户Id',
  `post_id` bigint(20) NOT NULL COMMENT '岗位Id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=47 DEFAULT CHARSET=utf8 COMMENT='用户与岗位关联表';

-- ----------------------------
-- Records of sys_user_post
-- ----------------------------
INSERT INTO `sys_user_post` VALUES ('1', '2', '1');
INSERT INTO `sys_user_post` VALUES ('2', '2', '2');
INSERT INTO `sys_user_post` VALUES ('13', '26', '10');
INSERT INTO `sys_user_post` VALUES ('45', '6', '4');
INSERT INTO `sys_user_post` VALUES ('46', '6', '1');

-- ----------------------------
-- Table structure for sys_user_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) DEFAULT NULL COMMENT '用户ID',
  `role_id` bigint(20) DEFAULT NULL COMMENT '角色ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8 COMMENT='用户与角色对应关系';

-- ----------------------------
-- Records of sys_user_role
-- ----------------------------
INSERT INTO `sys_user_role` VALUES ('5', '9', '1');
INSERT INTO `sys_user_role` VALUES ('6', '11', '1');
INSERT INTO `sys_user_role` VALUES ('7', '12', '1');
INSERT INTO `sys_user_role` VALUES ('10', '15', '1');
INSERT INTO `sys_user_role` VALUES ('20', '19', '1');
INSERT INTO `sys_user_role` VALUES ('21', '2', '1');
INSERT INTO `sys_user_role` VALUES ('27', '22', '1');
INSERT INTO `sys_user_role` VALUES ('38', '24', '10');
INSERT INTO `sys_user_role` VALUES ('41', '25', '7');
INSERT INTO `sys_user_role` VALUES ('43', '26', '12');
INSERT INTO `sys_user_role` VALUES ('70', '6', '17');
INSERT INTO `sys_user_role` VALUES ('71', '44', '17');

-- ----------------------------
-- Table structure for user_msg
-- ----------------------------
DROP TABLE IF EXISTS `user_msg`;
CREATE TABLE `user_msg` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `module` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '所属模块(转发、评论、回复、点赞、新粉丝)',
  `module_id` int(11) DEFAULT NULL COMMENT '模块id(转发、评论、回复、点赞 ~ 跳到微博详情; 新粉丝 ~ 跳到个人主页)',
  `content` varchar(2000) CHARACTER SET utf8 DEFAULT NULL COMMENT '内容',
  `is_read` int(11) DEFAULT '0' COMMENT '是否已读(1=是;0=否)',
  `read_time` datetime DEFAULT NULL COMMENT '读时间',
  `receiver_id` int(11) DEFAULT NULL COMMENT '消息的接受者',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `is_delete` int(11) DEFAULT '0' COMMENT '是否删除(1=是；0=否)',
  `delete_time` datetime DEFAULT NULL COMMENT '删除时间',
  `update_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=184 DEFAULT CHARSET=utf8mb4 COMMENT='用户消息盒子';

-- ----------------------------
-- Records of user_msg
-- ----------------------------
INSERT INTO `user_msg` VALUES ('95', 'concern', '31', '有新用户关注了您：张三子', '1', '2020-12-28 09:53:49', '6', '2020-12-28 09:52:41', '0', null, '2020-12-28 09:53:49');
INSERT INTO `user_msg` VALUES ('96', 'concern', '32', '有新用户关注了您：张三子', '1', '2020-12-28 15:18:24', '38', '2020-12-28 15:18:15', '0', null, '2020-12-28 15:18:24');
INSERT INTO `user_msg` VALUES ('97', 'concern', '33', '有新用户关注了您：布鲁斯', '1', '2020-12-28 15:19:11', '6', '2020-12-28 15:19:04', '0', null, '2020-12-28 15:19:11');
INSERT INTO `user_msg` VALUES ('98', 'comment', '24', '张三子 评论了你的微博，内容为：说得在理', '1', '2020-12-28 15:23:50', '38', '2020-12-28 15:20:26', '0', null, '2020-12-28 15:23:50');
INSERT INTO `user_msg` VALUES ('99', 'reply', '15', '张三子 回复了你的评论，内容为：good', '1', '2020-12-28 15:26:08', '6', '2020-12-28 15:25:54', '0', null, '2020-12-28 15:26:08');
INSERT INTO `user_msg` VALUES ('100', 'forwardBlog', '48', '修罗debug 转发了你的微博', '1', '2020-12-29 23:24:43', '27', '2020-12-29 12:17:57', '0', null, '2020-12-29 23:24:43');
INSERT INTO `user_msg` VALUES ('101', 'concern', '34', '有新用户关注了您：修罗debug', '1', '2021-01-03 23:27:51', '27', '2020-12-31 18:39:10', '0', null, '2021-01-03 23:27:51');
INSERT INTO `user_msg` VALUES ('102', 'praise', '32', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-03 23:27:48', '27', '2020-12-31 18:39:12', '0', null, '2021-01-03 23:27:48');
INSERT INTO `user_msg` VALUES ('103', 'praise', '33', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-04 22:32:11', '27', '2021-01-04 17:09:52', '0', null, '2021-01-04 22:32:11');
INSERT INTO `user_msg` VALUES ('104', 'comment', '25', '张三子 评论了你的微博，内容为：不错！！！', '1', '2021-01-04 22:33:36', '6', '2021-01-04 22:32:24', '0', null, '2021-01-04 22:33:36');
INSERT INTO `user_msg` VALUES ('105', 'comment', '26', '张三子 评论了你的微博，内容为：受益匪浅', '1', '2021-01-04 22:33:35', '6', '2021-01-04 22:33:21', '0', null, '2021-01-04 22:33:35');
INSERT INTO `user_msg` VALUES ('106', 'praise', '34', '张三子 喜欢你的微博，并给了你一个赞', '1', '2021-01-05 11:48:02', '40', '2021-01-05 11:47:49', '0', null, '2021-01-05 11:48:02');
INSERT INTO `user_msg` VALUES ('107', 'praise', '35', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-05 11:48:02', '40', '2021-01-05 11:47:53', '0', null, '2021-01-05 11:48:02');
INSERT INTO `user_msg` VALUES ('108', 'praise', '36', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 10:56:19', '40', '2021-01-05 11:48:10', '0', null, '2021-01-06 10:56:19');
INSERT INTO `user_msg` VALUES ('109', 'praise', '37', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 10:56:18', '40', '2021-01-05 11:48:13', '0', null, '2021-01-06 10:56:18');
INSERT INTO `user_msg` VALUES ('110', 'praise', '38', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 10:56:18', '40', '2021-01-05 11:48:14', '0', null, '2021-01-06 10:56:18');
INSERT INTO `user_msg` VALUES ('111', 'comment', '27', '张三子 评论了你的微博，内容为：说的对，赞同', '1', '2021-01-06 10:56:29', '40', '2021-01-05 23:08:21', '0', null, '2021-01-06 10:56:29');
INSERT INTO `user_msg` VALUES ('112', 'concern', '35', '有新用户关注了您：大刀王五', '1', '2021-01-06 11:53:50', '27', '2021-01-05 23:08:46', '0', null, '2021-01-06 11:53:50');
INSERT INTO `user_msg` VALUES ('113', 'concern', '36', '有新用户关注了您：张三子', '1', '2021-01-06 10:56:21', '40', '2021-01-06 10:20:03', '0', null, '2021-01-06 10:56:21');
INSERT INTO `user_msg` VALUES ('114', 'praise', '39', '张三子 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 10:56:18', '40', '2021-01-06 10:27:26', '0', null, '2021-01-06 10:56:18');
INSERT INTO `user_msg` VALUES ('115', 'praise', '40', '张三子 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 10:56:17', '40', '2021-01-06 10:34:35', '0', null, '2021-01-06 10:56:17');
INSERT INTO `user_msg` VALUES ('116', 'praise', '41', '张三子 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 10:56:17', '40', '2021-01-06 10:43:48', '0', null, '2021-01-06 10:56:17');
INSERT INTO `user_msg` VALUES ('117', 'praise', '42', '张三子 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 10:56:17', '40', '2021-01-06 10:48:52', '0', null, '2021-01-06 10:56:17');
INSERT INTO `user_msg` VALUES ('118', 'praise', '43', '张三子 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 10:56:17', '40', '2021-01-06 10:52:30', '0', null, '2021-01-06 10:56:17');
INSERT INTO `user_msg` VALUES ('119', 'praise', '44', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 10:57:29', '0', null, null);
INSERT INTO `user_msg` VALUES ('120', 'praise', '45', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 11:51:56', '0', null, null);
INSERT INTO `user_msg` VALUES ('121', 'comment', '28', '张三子 评论了你的微博，内容为：我就觉得很不错！', '1', '2021-01-06 15:15:00', '40', '2021-01-06 11:52:19', '0', null, '2021-01-06 15:15:00');
INSERT INTO `user_msg` VALUES ('122', 'praise', '46', '大刀王五 喜欢你的微博，并给了你一个赞', '1', '2021-01-08 15:13:32', '27', '2021-01-06 11:52:57', '0', null, '2021-01-08 15:13:32');
INSERT INTO `user_msg` VALUES ('123', 'forwardBlog', '78', '大刀王五 转发了你的微博', '1', '2021-01-08 15:13:28', '27', '2021-01-06 11:53:24', '0', null, '2021-01-08 15:13:28');
INSERT INTO `user_msg` VALUES ('124', 'praise', '47', '大刀王五 喜欢你的微博，并给了你一个赞', '1', '2021-01-08 15:13:31', '27', '2021-01-06 12:07:21', '0', null, '2021-01-08 15:13:31');
INSERT INTO `user_msg` VALUES ('125', 'praise', '48', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 12:08:14', '0', null, null);
INSERT INTO `user_msg` VALUES ('126', 'praise', '49', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 12:08:30', '0', null, null);
INSERT INTO `user_msg` VALUES ('127', 'praise', '50', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 12:10:17', '0', null, null);
INSERT INTO `user_msg` VALUES ('128', 'praise', '51', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 12:10:37', '0', null, null);
INSERT INTO `user_msg` VALUES ('129', 'praise', '53', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 12:16:14', '0', null, null);
INSERT INTO `user_msg` VALUES ('130', 'praise', '54', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 12:16:35', '0', null, null);
INSERT INTO `user_msg` VALUES ('131', 'praise', '55', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 12:16:53', '0', null, null);
INSERT INTO `user_msg` VALUES ('132', 'praise', '56', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 12:16:57', '0', null, null);
INSERT INTO `user_msg` VALUES ('133', 'praise', '57', '大刀王五 喜欢你的微博，并给了你一个赞', '1', '2021-01-08 15:13:31', '27', '2021-01-06 12:17:20', '0', null, '2021-01-08 15:13:31');
INSERT INTO `user_msg` VALUES ('134', 'praise', '58', '大刀王五 喜欢你的微博，并给了你一个赞', '1', '2021-01-08 15:13:31', '27', '2021-01-06 12:17:26', '0', null, '2021-01-08 15:13:31');
INSERT INTO `user_msg` VALUES ('135', 'praise', '59', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 12:17:39', '0', null, null);
INSERT INTO `user_msg` VALUES ('136', 'comment', '29', '张三子 评论了你的微博，内容为：说得对', '1', '2021-01-06 15:15:01', '40', '2021-01-06 12:18:08', '0', null, '2021-01-06 15:15:01');
INSERT INTO `user_msg` VALUES ('137', 'praise', '61', '张三子 喜欢你的微博，并给了你一个赞', '1', '2021-01-11 15:10:17', '6', '2021-01-06 15:11:15', '0', null, '2021-01-11 15:10:17');
INSERT INTO `user_msg` VALUES ('138', 'praise', '62', '大刀王五 喜欢你的微博，并给了你一个赞', '1', '2021-01-11 15:10:16', '6', '2021-01-06 15:11:29', '0', null, '2021-01-11 15:10:16');
INSERT INTO `user_msg` VALUES ('139', 'comment', '30', '大刀王五 评论了你的微博，内容为：说的对，免得给自己拉下一身困扰！！！', '1', '2021-01-11 15:10:14', '6', '2021-01-06 15:11:58', '0', null, '2021-01-11 15:10:14');
INSERT INTO `user_msg` VALUES ('140', 'concern', '37', '有新用户关注了您：修罗debug', '1', '2021-01-06 15:15:04', '40', '2021-01-06 15:14:27', '0', null, '2021-01-06 15:15:04');
INSERT INTO `user_msg` VALUES ('141', 'praise', '64', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 15:15:08', '40', '2021-01-06 15:14:35', '0', null, '2021-01-06 15:15:08');
INSERT INTO `user_msg` VALUES ('142', 'praise', '65', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 15:15:08', '40', '2021-01-06 15:14:42', '0', null, '2021-01-06 15:15:08');
INSERT INTO `user_msg` VALUES ('143', 'praise', '66', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 15:15:07', '40', '2021-01-06 15:14:44', '0', null, '2021-01-06 15:15:07');
INSERT INTO `user_msg` VALUES ('144', 'praise', '67', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 15:15:07', '40', '2021-01-06 15:14:45', '0', null, '2021-01-06 15:15:07');
INSERT INTO `user_msg` VALUES ('145', 'praise', '68', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 15:15:07', '40', '2021-01-06 15:14:46', '0', null, '2021-01-06 15:15:07');
INSERT INTO `user_msg` VALUES ('146', 'praise', '69', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-06 15:15:06', '40', '2021-01-06 15:14:53', '0', null, '2021-01-06 15:15:06');
INSERT INTO `user_msg` VALUES ('147', 'praise', '70', '修罗debug 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 15:15:31', '0', null, null);
INSERT INTO `user_msg` VALUES ('148', 'concern', '38', '有新用户关注了您：大刀王五', '1', '2021-01-11 15:10:18', '6', '2021-01-06 15:27:22', '0', null, '2021-01-11 15:10:18');
INSERT INTO `user_msg` VALUES ('149', 'comment', '31', '修罗debug 评论了你的微博，内容为：牛逼', '0', null, '40', '2021-01-06 15:27:40', '0', null, null);
INSERT INTO `user_msg` VALUES ('150', 'praise', '71', '修罗debug 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 15:29:18', '0', null, null);
INSERT INTO `user_msg` VALUES ('151', 'praise', '72', '修罗debug 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 15:29:25', '0', null, null);
INSERT INTO `user_msg` VALUES ('152', 'praise', '73', '修罗debug 喜欢你的微博，并给了你一个赞', '0', null, '40', '2021-01-06 15:29:27', '0', null, null);
INSERT INTO `user_msg` VALUES ('153', 'praise', '74', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-08 15:13:30', '27', '2021-01-06 15:29:29', '0', null, '2021-01-08 15:13:30');
INSERT INTO `user_msg` VALUES ('154', 'praise', '75', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-08 15:13:30', '27', '2021-01-06 15:30:06', '0', null, '2021-01-08 15:13:30');
INSERT INTO `user_msg` VALUES ('155', 'comment', '32', '修罗debug 评论了你的微博，内容为：说得好', '0', null, '40', '2021-01-06 15:30:45', '0', null, null);
INSERT INTO `user_msg` VALUES ('156', 'praise', '76', '大刀王五 喜欢你的微博，并给了你一个赞', '0', null, '27', '2021-01-08 15:14:07', '0', null, null);
INSERT INTO `user_msg` VALUES ('157', 'praise', '77', '大刀王五 喜欢你的微博，并给了你一个赞', '0', null, '27', '2021-01-08 15:14:11', '0', null, null);
INSERT INTO `user_msg` VALUES ('158', 'comment', '33', '大刀王五 评论了你的微博，内容为：不错!', '0', null, '27', '2021-01-08 15:14:20', '0', null, null);
INSERT INTO `user_msg` VALUES ('159', 'praise', '78', '十三爷 喜欢你的微博，并给了你一个赞', '1', '2021-01-11 15:12:00', '6', '2021-01-11 15:10:39', '0', null, '2021-01-11 15:12:00');
INSERT INTO `user_msg` VALUES ('160', 'praise', '79', '十三爷 喜欢你的微博，并给了你一个赞', '1', '2021-01-11 15:12:00', '6', '2021-01-11 15:11:20', '0', null, '2021-01-11 15:12:00');
INSERT INTO `user_msg` VALUES ('161', 'concern', '39', '有新用户关注了您：十三爷', '1', '2021-01-11 21:27:38', '6', '2021-01-11 15:11:29', '0', null, '2021-01-11 21:27:38');
INSERT INTO `user_msg` VALUES ('162', 'forwardBlog', '80', '十三爷 转发了你的微博', '1', '2021-01-11 21:27:31', '6', '2021-01-11 15:12:15', '0', null, '2021-01-11 21:27:31');
INSERT INTO `user_msg` VALUES ('163', 'comment', '34', '十三爷 评论了你的微博，内容为：不错！', '1', '2021-01-11 21:27:33', '6', '2021-01-11 15:12:35', '0', null, '2021-01-11 21:27:33');
INSERT INTO `user_msg` VALUES ('164', 'reply', '16', '十三爷 回复了你的评论，内容为：是的！', '0', null, '40', '2021-01-11 15:12:46', '0', null, null);
INSERT INTO `user_msg` VALUES ('165', 'reply', '17', '杰马克 回复了你的评论，内容为：是的', '0', null, '41', '2021-01-14 21:43:28', '0', null, null);
INSERT INTO `user_msg` VALUES ('166', 'reply', '18', '杰马克 回复了你的评论，内容为：说得对', '0', null, '41', '2021-01-14 21:43:45', '0', null, null);
INSERT INTO `user_msg` VALUES ('167', 'praise', '85', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-19 09:54:56', '43', '2021-01-18 22:15:11', '0', null, '2021-01-19 09:54:56');
INSERT INTO `user_msg` VALUES ('168', 'comment', '39', '修罗debug 评论了你的微博，内容为：不错的微博！', '1', '2021-01-19 09:55:00', '43', '2021-01-18 22:15:42', '0', null, '2021-01-19 09:55:00');
INSERT INTO `user_msg` VALUES ('169', 'praise', '86', '修罗debug 喜欢你的微博，并给了你一个赞', '1', '2021-01-18 22:45:38', '43', '2021-01-18 22:21:22', '0', null, '2021-01-18 22:45:38');
INSERT INTO `user_msg` VALUES ('170', 'comment', '40', '修罗debug 评论了你的微博，内容为：是啊 确实不错！', '1', '2021-01-19 09:55:03', '43', '2021-01-18 22:21:40', '0', null, '2021-01-19 09:55:03');
INSERT INTO `user_msg` VALUES ('171', 'reply', '23', '修罗debug 回复了你的评论，内容为：是的', '1', '2021-01-19 09:54:58', '43', '2021-01-18 22:22:00', '0', null, '2021-01-19 09:54:58');
INSERT INTO `user_msg` VALUES ('172', 'forwardBlog', '84', '修罗debug 转发了你的微博', '1', '2021-01-19 09:55:02', '43', '2021-01-18 22:22:13', '0', null, '2021-01-19 09:55:02');
INSERT INTO `user_msg` VALUES ('173', 'concern', '42', '有新用户关注了您：修罗debug', '1', '2021-01-18 22:23:46', '43', '2021-01-18 22:22:25', '0', null, '2021-01-18 22:23:46');
INSERT INTO `user_msg` VALUES ('174', 'praise', '87', '张三子 喜欢你的微博，并给了你一个赞', '1', '2021-01-19 09:54:56', '43', '2021-01-18 22:57:25', '0', null, '2021-01-19 09:54:56');
INSERT INTO `user_msg` VALUES ('175', 'comment', '41', '张三子 评论了你的微博，内容为：赞同+1', '1', '2021-01-19 09:55:01', '43', '2021-01-18 22:57:58', '0', null, '2021-01-19 09:55:01');
INSERT INTO `user_msg` VALUES ('176', 'concern', '43', '有新用户关注了您：张三子', '1', '2021-01-19 09:54:46', '43', '2021-01-18 22:58:23', '0', null, '2021-01-19 09:54:46');
INSERT INTO `user_msg` VALUES ('177', 'reply', '24', '张三子 回复了你的评论，内容为：是的', '1', '2021-01-19 09:54:58', '43', '2021-01-18 22:58:56', '0', null, '2021-01-19 09:54:58');
INSERT INTO `user_msg` VALUES ('178', 'forwardBlog', '85', '张三子 转发了你的微博', '1', '2021-01-19 09:55:02', '43', '2021-01-18 22:59:16', '0', null, '2021-01-19 09:55:02');
INSERT INTO `user_msg` VALUES ('179', 'praise', '88', '张三子 喜欢你的微博，并给了你一个赞', '0', null, '43', '2021-01-19 09:56:08', '0', null, null);
INSERT INTO `user_msg` VALUES ('180', 'comment', '42', '张三子 评论了你的微博，内容为：还行吧', '0', null, '43', '2021-01-19 09:56:34', '0', null, null);
INSERT INTO `user_msg` VALUES ('181', 'forwardBlog', '89', '杰马克 转发了你的微博', '0', null, '27', '2021-01-19 18:03:15', '0', null, null);
INSERT INTO `user_msg` VALUES ('182', 'praise', '89', '修罗debug 喜欢你的微博，并给了你一个赞', '0', null, '27', '2021-01-20 09:52:32', '0', null, null);
INSERT INTO `user_msg` VALUES ('183', 'comment', '43', '修罗debug 评论了你的微博，内容为：写得不错！', '0', null, '27', '2021-01-20 09:52:43', '0', null, null);
